
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.92
 Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b12.vhd

yosys> verific -vhdl b12.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b12.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b12.vhd:1: analyzing entity 'b12'
VERIFIC-INFO [VHDL-1010] b12.vhd:12: analyzing architecture 'behav'

yosys> synth_rs -top b12 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.79

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b12

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b12.vhd:1: processing 'b12(BEHAV)'
Importing module b12.

3.4.1. Analyzing design hierarchy..
Top module:  \b12

3.4.2. Analyzing design hierarchy..
Top module:  \b12
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~9 debug messages>

yosys> bmuxmap

3.6. Executing BMUXMAP pass.

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).

yosys> bmuxmap

3.9. Executing BMUXMAP pass.

yosys> demuxmap

3.10. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.11. Executing TRIBUF pass.

yosys> deminout

3.12. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~197 debug messages>

yosys> opt_clean

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 64 unused wires.
<suppressed ~19 debug messages>

yosys> check

3.15. Executing CHECK pass (checking for obvious problems).
Checking module b12...
Found and reported 0 problems.

yosys> opt_expr

3.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.18. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~66 debug messages>

yosys> opt_reduce

3.19. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.20. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

yosys> opt_share

3.21. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.22. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$wr_reg$b12.vhd:564$542 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$timebase_reg$b12.vhd:564$546 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$speaker_reg$b12.vhd:144$304 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$sound_reg$b12.vhd:564$548 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$scan_reg$b12.vhd:564$543 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$s_reg$b12.vhd:144$303 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$play_reg$b12.vhd:564$541 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$nloss_reg$b12.vhd:564$539 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$nl_reg$b12.vhd:564$540 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_9$b12.vhd:184$391 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_8$b12.vhd:184$390 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_7$b12.vhd:184$389 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_6$b12.vhd:184$388 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_5$b12.vhd:184$387 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_4$b12.vhd:184$386 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_32$b12.vhd:184$414 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_31$b12.vhd:184$413 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_30$b12.vhd:184$412 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_3$b12.vhd:184$385 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_29$b12.vhd:184$411 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_28$b12.vhd:184$410 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_27$b12.vhd:184$409 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_26$b12.vhd:184$408 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_25$b12.vhd:184$407 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_24$b12.vhd:184$406 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_23$b12.vhd:184$405 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_22$b12.vhd:184$404 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_21$b12.vhd:184$403 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_20$b12.vhd:184$402 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_2$b12.vhd:184$384 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_19$b12.vhd:184$401 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_18$b12.vhd:184$400 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_17$b12.vhd:184$399 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_16$b12.vhd:184$398 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_15$b12.vhd:184$397 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_14$b12.vhd:184$396 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_13$b12.vhd:184$395 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_12$b12.vhd:184$394 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_11$b12.vhd:184$393 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg_10$b12.vhd:184$392 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$memory_reg$b12.vhd:184$415 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$max_reg$b12.vhd:564$544 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$ind_reg$b12.vhd:564$545 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$gamma_reg$b12.vhd:564$551 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$data_out_reg$b12.vhd:184$383 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$data_in_reg$b12.vhd:564$550 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$counter_reg$b12.vhd:144$305 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$count_reg_2$b12.vhd:164$311 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$count_reg$b12.vhd:564$547 ($aldff) from module b12.
Changing const-value async load to async reset on $verific$address_reg$b12.vhd:564$549 ($aldff) from module b12.

yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_muxtree

3.25. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~72 debug messages>

yosys> opt_reduce

3.26. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.28. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.29. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.31. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 2

yosys> fsm -encoding binary

3.32. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.32.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register b12.ind.

yosys> fsm_extract

3.32.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\ind' from module `\b12'.
  found $adff cell for state register: $verific$ind_reg$b12.vhd:564$545
  root of input selection tree: $auto$bmuxmap.cc:58:execute$587
  found reset state: 2'00 (from async reset)
  found ctrl input: $verific$n699$159 [4]
  found ctrl input: $verific$n699$159 [3]
  found ctrl input: $verific$n699$159 [2]
  found ctrl input: $verific$n699$159 [1]
  found ctrl input: $verific$n699$159 [0]
  found ctrl input: $verific$n751$36
  found ctrl input: \k [0]
  found ctrl input: \k [1]
  found ctrl input: \k [2]
  found ctrl input: \k [3]
  found state code: 2'11
  found state code: 2'10
  found state code: 2'01
  ctrl inputs: { $verific$n699$159 $verific$n751$36 \k }
  ctrl outputs: $auto$bmuxmap.cc:58:execute$587
  transition:       2'00 10'00-------- ->       2'00 2'00
  transition:       2'00 10'0100------ ->       2'00 2'00
  transition:       2'00 10'0101000000 ->       2'00 2'00
  transition:       2'00 10'0101001000 ->       2'11 2'11
  transition:       2'00 10'010100-100 ->       2'10 2'10
  transition:       2'00 10'010100--10 ->       2'01 2'01
  transition:       2'00 10'010100---1 ->       2'00 2'00
  transition:       2'00 10'010101---- ->       2'00 2'00
  transition:       2'00 10'01011----- ->       2'00 2'00
  transition:       2'00 10'011------- ->       2'00 2'00
  transition:       2'00 10'10-------- ->       2'00 2'00
  transition:       2'00 10'1100------ ->       2'00 2'00
  transition:       2'00 10'1101------ -> INVALID_STATE(2'x) 2'x  <ignored invalid transition!>
  transition:       2'00 10'111------- -> INVALID_STATE(2'x) 2'x  <ignored invalid transition!>
  transition:       2'10 10'00-------- ->       2'10 2'10
  transition:       2'10 10'0100------ ->       2'10 2'10
  transition:       2'10 10'0101000000 ->       2'10 2'10
  transition:       2'10 10'0101001000 ->       2'11 2'11
  transition:       2'10 10'010100-100 ->       2'10 2'10
  transition:       2'10 10'010100--10 ->       2'01 2'01
  transition:       2'10 10'010100---1 ->       2'00 2'00
  transition:       2'10 10'010101---- ->       2'10 2'10
  transition:       2'10 10'01011----- ->       2'10 2'10
  transition:       2'10 10'011------- ->       2'10 2'10
  transition:       2'10 10'10-------- ->       2'10 2'10
  transition:       2'10 10'1100------ ->       2'10 2'10
  transition:       2'10 10'1101------ -> INVALID_STATE(2'x) 2'x  <ignored invalid transition!>
  transition:       2'10 10'111------- -> INVALID_STATE(2'x) 2'x  <ignored invalid transition!>
  transition:       2'01 10'00-------- ->       2'01 2'01
  transition:       2'01 10'0100------ ->       2'01 2'01
  transition:       2'01 10'0101000000 ->       2'01 2'01
  transition:       2'01 10'0101001000 ->       2'11 2'11
  transition:       2'01 10'010100-100 ->       2'10 2'10
  transition:       2'01 10'010100--10 ->       2'01 2'01
  transition:       2'01 10'010100---1 ->       2'00 2'00
  transition:       2'01 10'010101---- ->       2'01 2'01
  transition:       2'01 10'01011----- ->       2'01 2'01
  transition:       2'01 10'011------- ->       2'01 2'01
  transition:       2'01 10'10-------- ->       2'01 2'01
  transition:       2'01 10'1100------ ->       2'01 2'01
  transition:       2'01 10'1101------ -> INVALID_STATE(2'x) 2'x  <ignored invalid transition!>
  transition:       2'01 10'111------- -> INVALID_STATE(2'x) 2'x  <ignored invalid transition!>
  transition:       2'11 10'00-------- ->       2'11 2'11
  transition:       2'11 10'0100------ ->       2'11 2'11
  transition:       2'11 10'0101000000 ->       2'11 2'11
  transition:       2'11 10'0101001000 ->       2'11 2'11
  transition:       2'11 10'010100-100 ->       2'10 2'10
  transition:       2'11 10'010100--10 ->       2'01 2'01
  transition:       2'11 10'010100---1 ->       2'00 2'00
  transition:       2'11 10'010101---- ->       2'11 2'11
  transition:       2'11 10'01011----- ->       2'11 2'11
  transition:       2'11 10'011------- ->       2'11 2'11
  transition:       2'11 10'10-------- ->       2'11 2'11
  transition:       2'11 10'1100------ ->       2'11 2'11
  transition:       2'11 10'1101------ -> INVALID_STATE(2'x) 2'x  <ignored invalid transition!>
  transition:       2'11 10'111------- -> INVALID_STATE(2'x) 2'x  <ignored invalid transition!>

yosys> fsm_opt

3.32.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\ind$1087' from module `\b12'.
  Merging pattern 10'0100------ and 10'1100------ from group (0 0 2'00).
  Merging pattern 10'1100------ and 10'0100------ from group (0 0 2'00).
  Merging pattern 10'00-------- and 10'10-------- from group (0 0 2'00).
  Merging pattern 10'10-------- and 10'00-------- from group (0 0 2'00).
  Merging pattern 10'0100------ and 10'1100------ from group (1 1 2'10).
  Merging pattern 10'1100------ and 10'0100------ from group (1 1 2'10).
  Merging pattern 10'00-------- and 10'10-------- from group (1 1 2'10).
  Merging pattern 10'10-------- and 10'00-------- from group (1 1 2'10).
  Merging pattern 10'0100------ and 10'1100------ from group (2 2 2'01).
  Merging pattern 10'1100------ and 10'0100------ from group (2 2 2'01).
  Merging pattern 10'00-------- and 10'10-------- from group (2 2 2'01).
  Merging pattern 10'10-------- and 10'00-------- from group (2 2 2'01).
  Merging pattern 10'0101000000 and 10'0101001000 from group (3 3 2'11).
  Merging pattern 10'0101001000 and 10'0101000000 from group (3 3 2'11).
  Merging pattern 10'0100------ and 10'1100------ from group (3 3 2'11).
  Merging pattern 10'1100------ and 10'0100------ from group (3 3 2'11).
  Merging pattern 10'00-------- and 10'10-------- from group (3 3 2'11).
  Merging pattern 10'10-------- and 10'00-------- from group (3 3 2'11).

yosys> opt_clean

3.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 13 unused cells and 10 unused wires.
<suppressed ~14 debug messages>

yosys> fsm_opt

3.32.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\ind$1087' from module `\b12'.

yosys> fsm_recode -encoding binary

3.32.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\ind$1087' from module `\b12' using `auto' encoding:
  mapping auto encoding to `binary` for this FSM.
  existing encoding is already a packed binary encoding.

yosys> fsm_info

3.32.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\ind$1087' from module `b12':
-------------------------------------

  Information on FSM $fsm$\ind$1087 (\ind):

  Number of input signals:   10
  Number of output signals:   2
  Number of state bits:       2

  Input signals:
    0: \k [0]
    1: \k [1]
    2: \k [2]
    3: \k [3]
    4: $verific$n751$36
    5: $verific$n699$159 [0]
    6: $verific$n699$159 [1]
    7: $verific$n699$159 [2]
    8: $verific$n699$159 [3]
    9: $verific$n699$159 [4]

  Output signals:
    0: $auto$bmuxmap.cc:58:execute$587 [0]
    1: $auto$bmuxmap.cc:58:execute$587 [1]

  State encoding:
    0:       2'00  <RESET STATE>
    1:       2'10
    2:       2'01
    3:       2'11

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 10'0101000000   ->     0 2'00
      1:     0 10'010100---1   ->     0 2'00
      2:     0 10'010101----   ->     0 2'00
      3:     0 10'01011-----   ->     0 2'00
      4:     0 10'-100------   ->     0 2'00
      5:     0 10'011-------   ->     0 2'00
      6:     0 10'-0--------   ->     0 2'00
      7:     0 10'010100-100   ->     1 2'10
      8:     0 10'010100--10   ->     2 2'01
      9:     0 10'0101001000   ->     3 2'11
     10:     1 10'010100---1   ->     0 2'00
     11:     1 10'0101000000   ->     1 2'10
     12:     1 10'010100-100   ->     1 2'10
     13:     1 10'010101----   ->     1 2'10
     14:     1 10'01011-----   ->     1 2'10
     15:     1 10'-100------   ->     1 2'10
     16:     1 10'011-------   ->     1 2'10
     17:     1 10'-0--------   ->     1 2'10
     18:     1 10'010100--10   ->     2 2'01
     19:     1 10'0101001000   ->     3 2'11
     20:     2 10'010100---1   ->     0 2'00
     21:     2 10'010100-100   ->     1 2'10
     22:     2 10'0101000000   ->     2 2'01
     23:     2 10'010100--10   ->     2 2'01
     24:     2 10'010101----   ->     2 2'01
     25:     2 10'01011-----   ->     2 2'01
     26:     2 10'-100------   ->     2 2'01
     27:     2 10'011-------   ->     2 2'01
     28:     2 10'-0--------   ->     2 2'01
     29:     2 10'0101001000   ->     3 2'11
     30:     3 10'010100---1   ->     0 2'00
     31:     3 10'010100-100   ->     1 2'10
     32:     3 10'010100--10   ->     2 2'01
     33:     3 10'010100-000   ->     3 2'11
     34:     3 10'010101----   ->     3 2'11
     35:     3 10'01011-----   ->     3 2'11
     36:     3 10'-100------   ->     3 2'11
     37:     3 10'011-------   ->     3 2'11
     38:     3 10'-0--------   ->     3 2'11

-------------------------------------

yosys> fsm_map

3.32.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\ind$1087' from module `\b12'.

yosys> opt_expr

3.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~7 debug messages>

yosys> opt_merge -nomux

3.34. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~141 debug messages>
Removed a total of 47 cells.

yosys> opt_muxtree

3.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~72 debug messages>

yosys> opt_reduce

3.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.38. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.39. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$wr_reg$b12.vhd:564$542 ($adff) from module b12 (D = $auto$bmuxmap.cc:58:execute$875, Q = \wr).
Adding EN signal on $verific$timebase_reg$b12.vhd:564$546 ($adff) from module b12 (D = $auto$bmuxmap.cc:58:execute$803, Q = \timebase).
Adding EN signal on $verific$speaker_reg$b12.vhd:144$304 ($adff) from module b12 (D = $verific$n133$30, Q = \speaker).
Adding EN signal on $verific$sound_reg$b12.vhd:564$548 ($adff) from module b12 (D = $auto$bmuxmap.cc:58:execute$623, Q = \sound).
Adding EN signal on $verific$scan_reg$b12.vhd:564$543 ($adff) from module b12 (D = $auto$bmuxmap.cc:58:execute$767, Q = \scan).
Adding EN signal on $verific$s_reg$b12.vhd:144$303 ($adff) from module b12 (D = $auto$bmuxmap.cc:58:execute$1085, Q = \s).
Adding EN signal on $verific$play_reg$b12.vhd:564$541 ($adff) from module b12 (D = $auto$bmuxmap.cc:58:execute$911, Q = \play).
Adding EN signal on $verific$nloss_reg$b12.vhd:564$539 ($adff) from module b12 (D = $auto$bmuxmap.cc:58:execute$983, Q = \nloss).
Adding EN signal on $verific$nl_reg$b12.vhd:564$540 ($adff) from module b12 (D = $auto$bmuxmap.cc:58:execute$947, Q = \nl).
Adding EN signal on $verific$memory_reg_9$b12.vhd:184$391 ($adff) from module b12 (D = \data_in, Q = \memory[24]).
Adding EN signal on $verific$memory_reg_8$b12.vhd:184$390 ($adff) from module b12 (D = \data_in, Q = \memory[25]).
Adding EN signal on $verific$memory_reg_7$b12.vhd:184$389 ($adff) from module b12 (D = \data_in, Q = \memory[26]).
Adding EN signal on $verific$memory_reg_6$b12.vhd:184$388 ($adff) from module b12 (D = \data_in, Q = \memory[27]).
Adding EN signal on $verific$memory_reg_5$b12.vhd:184$387 ($adff) from module b12 (D = \data_in, Q = \memory[28]).
Adding EN signal on $verific$memory_reg_4$b12.vhd:184$386 ($adff) from module b12 (D = \data_in, Q = \memory[29]).
Adding EN signal on $verific$memory_reg_32$b12.vhd:184$414 ($adff) from module b12 (D = \data_in, Q = \memory[1]).
Adding EN signal on $verific$memory_reg_31$b12.vhd:184$413 ($adff) from module b12 (D = \data_in, Q = \memory[2]).
Adding EN signal on $verific$memory_reg_30$b12.vhd:184$412 ($adff) from module b12 (D = \data_in, Q = \memory[3]).
Adding EN signal on $verific$memory_reg_3$b12.vhd:184$385 ($adff) from module b12 (D = \data_in, Q = \memory[30]).
Adding EN signal on $verific$memory_reg_29$b12.vhd:184$411 ($adff) from module b12 (D = \data_in, Q = \memory[4]).
Adding EN signal on $verific$memory_reg_28$b12.vhd:184$410 ($adff) from module b12 (D = \data_in, Q = \memory[5]).
Adding EN signal on $verific$memory_reg_27$b12.vhd:184$409 ($adff) from module b12 (D = \data_in, Q = \memory[6]).
Adding EN signal on $verific$memory_reg_26$b12.vhd:184$408 ($adff) from module b12 (D = \data_in, Q = \memory[7]).
Adding EN signal on $verific$memory_reg_25$b12.vhd:184$407 ($adff) from module b12 (D = \data_in, Q = \memory[8]).
Adding EN signal on $verific$memory_reg_24$b12.vhd:184$406 ($adff) from module b12 (D = \data_in, Q = \memory[9]).
Adding EN signal on $verific$memory_reg_23$b12.vhd:184$405 ($adff) from module b12 (D = \data_in, Q = \memory[10]).
Adding EN signal on $verific$memory_reg_22$b12.vhd:184$404 ($adff) from module b12 (D = \data_in, Q = \memory[11]).
Adding EN signal on $verific$memory_reg_21$b12.vhd:184$403 ($adff) from module b12 (D = \data_in, Q = \memory[12]).
Adding EN signal on $verific$memory_reg_20$b12.vhd:184$402 ($adff) from module b12 (D = \data_in, Q = \memory[13]).
Adding EN signal on $verific$memory_reg_2$b12.vhd:184$384 ($adff) from module b12 (D = \data_in, Q = \memory[31]).
Adding EN signal on $verific$memory_reg_19$b12.vhd:184$401 ($adff) from module b12 (D = \data_in, Q = \memory[14]).
Adding EN signal on $verific$memory_reg_18$b12.vhd:184$400 ($adff) from module b12 (D = \data_in, Q = \memory[15]).
Adding EN signal on $verific$memory_reg_17$b12.vhd:184$399 ($adff) from module b12 (D = \data_in, Q = \memory[16]).
Adding EN signal on $verific$memory_reg_16$b12.vhd:184$398 ($adff) from module b12 (D = \data_in, Q = \memory[17]).
Adding EN signal on $verific$memory_reg_15$b12.vhd:184$397 ($adff) from module b12 (D = \data_in, Q = \memory[18]).
Adding EN signal on $verific$memory_reg_14$b12.vhd:184$396 ($adff) from module b12 (D = \data_in, Q = \memory[19]).
Adding EN signal on $verific$memory_reg_13$b12.vhd:184$395 ($adff) from module b12 (D = \data_in, Q = \memory[20]).
Adding EN signal on $verific$memory_reg_12$b12.vhd:184$394 ($adff) from module b12 (D = \data_in, Q = \memory[21]).
Adding EN signal on $verific$memory_reg_11$b12.vhd:184$393 ($adff) from module b12 (D = \data_in, Q = \memory[22]).
Adding EN signal on $verific$memory_reg_10$b12.vhd:184$392 ($adff) from module b12 (D = \data_in, Q = \memory[23]).
Adding EN signal on $verific$memory_reg$b12.vhd:184$415 ($adff) from module b12 (D = \data_in, Q = \memory[0]).
Adding EN signal on $verific$max_reg$b12.vhd:564$544 ($adff) from module b12 (D = $auto$bmuxmap.cc:58:execute$839, Q = \max).
Adding EN signal on $verific$data_in_reg$b12.vhd:564$550 ($adff) from module b12 (D = $auto$bmuxmap.cc:58:execute$695, Q = \data_in).
Adding EN signal on $verific$count_reg$b12.vhd:564$547 ($adff) from module b12 (D = $auto$bmuxmap.cc:58:execute$659, Q = \count).
Adding EN signal on $verific$address_reg$b12.vhd:564$549 ($adff) from module b12 (D = $auto$bmuxmap.cc:58:execute$731, Q = \address).

yosys> opt_clean

3.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 74 unused cells and 119 unused wires.
<suppressed ~75 debug messages>

yosys> opt_expr

3.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~31 debug messages>

yosys> opt_muxtree

3.42. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~40 debug messages>

yosys> opt_reduce

3.43. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.44. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~261 debug messages>
Removed a total of 87 cells.

yosys> opt_share

3.45. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.46. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 81 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_muxtree

3.49. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~42 debug messages>

yosys> opt_reduce

3.50. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.52. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.53. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.55. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 3

yosys> wreduce -keepdc

3.56. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1302 ($ne).
Removed top 1 bits (of 6) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1307 ($ne).
Removed top 1 bits (of 7) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1311 ($ne).
Removed top 1 bits (of 5) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1315 ($ne).
Removed top 1 bits (of 2) from port B of cell b12.$auto$fsm_map.cc:215:map_fsm$1094 ($eq).
Removed top 1 bits (of 8) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1309 ($ne).
Removed top 1 bits (of 3) from port A of cell b12.$verific$LessThan_4$b12.vhd:80$267 ($lt).
Removed top 2 bits (of 3) from port B of cell b12.$verific$add_8$b12.vhd:85$271 ($add).
Removed top 1 bits (of 4) from port Y of cell b12.$verific$add_8$b12.vhd:85$271 ($add).
Removed top 3 bits (of 4) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1319 ($ne).
Removed top 1 bits (of 3) from port A of cell b12.$verific$LessThan_13$b12.vhd:88$277 ($lt).
Removed top 2 bits (of 3) from port A of cell b12.$verific$LessThan_49$b12.vhd:125$293 ($lt).
Removed top 1 bits (of 5) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1450 ($ne).
Removed top 1 bits (of 2) from port B of cell b12.$verific$add_69$b12.vhd:159$308 ($add).
Removed top 31 bits (of 32) from port A of cell b12.$verific$Decoder_79$b12.vhd:182$318 ($shl).
Removed top 3 bits (of 4) from port A of cell b12.$verific$Decoder_195$b12.vhd:284$420 ($shl).
Removed top 1 bits (of 7) from port A of cell b12.$verific$sub_207$b12.vhd:298$427 ($sub).
Removed top 6 bits (of 7) from port B of cell b12.$verific$sub_207$b12.vhd:298$427 ($sub).
Removed top 1 bits (of 7) from port Y of cell b12.$verific$sub_207$b12.vhd:298$427 ($sub).
Removed top 4 bits (of 5) from port B of cell b12.$verific$add_215$b12.vhd:306$432 ($add).
Removed top 1 bits (of 6) from port Y of cell b12.$verific$add_215$b12.vhd:306$432 ($add).
Removed top 1 bits (of 2) from port A of cell b12.$verific$equal_239$b12.vhd:358$442 ($eq).
Removed top 2 bits (of 3) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1298 ($ne).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_273$b12.vhd:394$471 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_274$b12.vhd:394$472 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_275$b12.vhd:394$473 ($mux).
Removed top 1 bits (of 4) from mux cell b12.$verific$mux_276$b12.vhd:394$474 ($mux).
Removed top 3 bits (of 4) from port A of cell b12.$verific$Decoder_289$b12.vhd:400$482 ($shl).
Removed top 4 bits (of 5) from port B of cell b12.$verific$add_309$b12.vhd:423$488 ($add).
Removed top 1 bits (of 6) from port Y of cell b12.$verific$add_309$b12.vhd:423$488 ($add).
Removed top 1 bits (of 7) from port A of cell b12.$verific$sub_311$b12.vhd:424$491 ($sub).
Removed top 6 bits (of 7) from port B of cell b12.$verific$sub_311$b12.vhd:424$491 ($sub).
Removed top 1 bits (of 7) from port Y of cell b12.$verific$sub_311$b12.vhd:424$491 ($sub).
Removed top 2 bits (of 19) from mux cell b12.$verific$mux_503$b12.vhd:510$494 ($mux).
Removed top 1 bits (of 4) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1321 ($ne).
Removed top 1 bits (of 4) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1423 ($ne).
Removed top 1 bits (of 4) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1421 ($ne).
Removed top 2 bits (of 4) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1419 ($ne).
Removed top 2 bits (of 4) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1406 ($ne).
Removed top 3 bits (of 5) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1400 ($ne).
Removed top 2 bits (of 5) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1398 ($ne).
Removed top 1 bits (of 7) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1394 ($ne).
Removed top 2 bits (of 6) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1392 ($ne).
Removed top 2 bits (of 4) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1381 ($ne).
Removed top 1 bits (of 4) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1379 ($ne).
Removed top 1 bits (of 5) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1375 ($ne).
Removed top 1 bits (of 6) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1365 ($ne).
Removed top 1 bits (of 8) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1359 ($ne).
Removed top 1 bits (of 10) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1349 ($ne).
Removed top 1 bits (of 3) from port B of cell b12.$auto$fsm_map.cc:77:implement_pattern_cache$1280 ($eq).
Removed top 1 bits (of 5) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1338 ($ne).
Removed top 1 bits (of 5) from port B of cell b12.$auto$fsm_map.cc:77:implement_pattern_cache$1268 ($eq).
Removed top 1 bits (of 6) from port B of cell b12.$auto$fsm_map.cc:77:implement_pattern_cache$1262 ($eq).
Removed top 1 bits (of 9) from port B of cell b12.$auto$fsm_map.cc:77:implement_pattern_cache$1260 ($eq).
Removed top 1 bits (of 9) from port B of cell b12.$auto$fsm_map.cc:77:implement_pattern_cache$1256 ($eq).
Removed top 1 bits (of 10) from port B of cell b12.$auto$fsm_map.cc:77:implement_pattern_cache$1254 ($eq).
Removed top 1 bits (of 10) from port B of cell b12.$auto$fsm_map.cc:77:implement_pattern_cache$1250 ($eq).
Removed top 1 bits (of 5) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1336 ($ne).
Removed top 2 bits (of 5) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1334 ($ne).
Removed top 4 bits (of 5) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1332 ($ne).
Removed top 1 bits (of 8) from port B of cell b12.$auto$fsm_map.cc:77:implement_pattern_cache$1217 ($eq).
Removed top 3 bits (of 5) from mux cell b12.$auto$bmuxmap.cc:60:execute$986 ($mux).
Removed top 2 bits (of 5) from mux cell b12.$auto$bmuxmap.cc:60:execute$987 ($mux).
Removed top 3 bits (of 5) from mux cell b12.$auto$bmuxmap.cc:60:execute$988 ($mux).
Removed top 1 bits (of 5) from mux cell b12.$auto$bmuxmap.cc:60:execute$989 ($mux).
Removed top 3 bits (of 5) from mux cell b12.$auto$bmuxmap.cc:60:execute$990 ($mux).
Removed top 3 bits (of 5) from mux cell b12.$auto$bmuxmap.cc:60:execute$994 ($mux).
Removed top 2 bits (of 5) from mux cell b12.$auto$bmuxmap.cc:60:execute$995 ($mux).
Removed top 2 bits (of 5) from mux cell b12.$auto$bmuxmap.cc:60:execute$996 ($mux).
Removed top 4 bits (of 5) from mux cell b12.$auto$bmuxmap.cc:60:execute$997 ($mux).
Removed top 4 bits (of 5) from mux cell b12.$auto$bmuxmap.cc:60:execute$998 ($mux).
Removed top 1 bits (of 3) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1323 ($ne).
Removed top 2 bits (of 5) from mux cell b12.$auto$bmuxmap.cc:60:execute$1003 ($mux).
Removed top 1 bits (of 5) from mux cell b12.$auto$bmuxmap.cc:60:execute$1004 ($mux).
Removed top 2 bits (of 5) from mux cell b12.$auto$bmuxmap.cc:60:execute$1007 ($mux).
Removed top 2 bits (of 5) from mux cell b12.$auto$bmuxmap.cc:60:execute$1008 ($mux).
Removed top 1 bits (of 5) from mux cell b12.$auto$bmuxmap.cc:60:execute$1012 ($mux).
Removed top 2 bits (of 5) from mux cell b12.$auto$bmuxmap.cc:60:execute$1014 ($mux).
Removed top 2 bits (of 5) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1454 ($ne).
Removed top 1 bits (of 11) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1467 ($ne).
Removed top 1 bits (of 10) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1469 ($ne).
Removed top 1 bits (of 9) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1471 ($ne).
Removed top 1 bits (of 8) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1473 ($ne).
Removed top 1 bits (of 3) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1487 ($ne).
Removed top 1 bits (of 5) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1504 ($ne).
Removed top 1 bits (of 5) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1671 ($ne).
Removed top 1 bits (of 4) from port B of cell b12.$auto$opt_dff.cc:195:make_patterns_logic$1690 ($ne).
Removed top 5 bits (of 40) from wire b12.$auto$bmuxmap.cc:58:execute$1002.
Removed top 3 bits (of 12) from wire b12.$auto$bmuxmap.cc:58:execute$1057.
Removed top 6 bits (of 32) from wire b12.$auto$bmuxmap.cc:58:execute$553.
Removed top 9 bits (of 48) from wire b12.$auto$bmuxmap.cc:58:execute$589.
Removed top 3 bits (of 24) from wire b12.$auto$bmuxmap.cc:58:execute$606.
Removed top 18 bits (of 96) from wire b12.$auto$bmuxmap.cc:58:execute$625.
Removed top 6 bits (of 48) from wire b12.$auto$bmuxmap.cc:58:execute$642.
Removed top 6 bits (of 32) from wire b12.$auto$bmuxmap.cc:58:execute$661.
Removed top 4 bits (of 16) from wire b12.$auto$bmuxmap.cc:58:execute$678.
Removed top 2 bits (of 8) from wire b12.$auto$bmuxmap.cc:58:execute$687.
Removed top 2 bits (of 4) from wire b12.$auto$bmuxmap.cc:58:execute$692.
Removed top 15 bits (of 80) from wire b12.$auto$bmuxmap.cc:58:execute$697.
Removed top 10 bits (of 40) from wire b12.$auto$bmuxmap.cc:58:execute$714.
Removed top 5 bits (of 20) from wire b12.$auto$bmuxmap.cc:58:execute$723.
Removed top 15 bits (of 80) from wire b12.$auto$bmuxmap.cc:58:execute$733.
Removed top 10 bits (of 40) from wire b12.$auto$bmuxmap.cc:58:execute$750.
Removed top 5 bits (of 20) from wire b12.$auto$bmuxmap.cc:58:execute$759.
Removed top 5 bits (of 10) from wire b12.$auto$bmuxmap.cc:58:execute$764.
Removed top 18 bits (of 96) from wire b12.$auto$bmuxmap.cc:58:execute$769.
Removed top 12 bits (of 48) from wire b12.$auto$bmuxmap.cc:58:execute$786.
Removed top 6 bits (of 24) from wire b12.$auto$bmuxmap.cc:58:execute$795.
Removed top 6 bits (of 12) from wire b12.$auto$bmuxmap.cc:58:execute$800.
Removed top 15 bits (of 80) from wire b12.$auto$bmuxmap.cc:58:execute$805.
Removed top 10 bits (of 40) from wire b12.$auto$bmuxmap.cc:58:execute$822.
Removed top 5 bits (of 20) from wire b12.$auto$bmuxmap.cc:58:execute$831.
Removed top 3 bits (of 16) from wire b12.$auto$bmuxmap.cc:58:execute$841.
Removed top 2 bits (of 8) from wire b12.$auto$bmuxmap.cc:58:execute$858.
Removed top 1 bits (of 4) from wire b12.$auto$bmuxmap.cc:58:execute$867.
Removed top 6 bits (of 16) from wire b12.$auto$bmuxmap.cc:58:execute$877.
Removed top 1 bits (of 8) from wire b12.$auto$bmuxmap.cc:58:execute$894.
Removed top 12 bits (of 64) from wire b12.$auto$bmuxmap.cc:58:execute$913.
Removed top 4 bits (of 32) from wire b12.$auto$bmuxmap.cc:58:execute$930.
Removed top 3 bits (of 16) from wire b12.$auto$bmuxmap.cc:58:execute$949.
Removed top 2 bits (of 8) from wire b12.$auto$bmuxmap.cc:58:execute$966.
Removed top 1 bits (of 4) from wire b12.$auto$bmuxmap.cc:58:execute$975.
Removed top 19 bits (of 80) from wire b12.$auto$bmuxmap.cc:58:execute$985.
Removed top 1 bits (of 4) from wire b12.$verific$n1024$184.
Removed top 1 bits (of 4) from wire b12.$verific$n1139$199.
Removed top 1 bits (of 4) from wire b12.$verific$n1149$201.
Removed top 1 bits (of 7) from wire b12.$verific$n1280$211.
Removed top 1 bits (of 5) from wire b12.$verific$n1336$215.
Removed top 3 bits (of 5) from wire b12.$verific$n1688$237.
Removed top 2 bits (of 5) from wire b12.$verific$n1733$242.
Removed top 4 bits (of 5) from wire b12.$verific$n1997$252.
Removed top 1 bits (of 7) from wire b12.$verific$n765$167.
Removed top 1 bits (of 4) from wire b12.$verific$n926$180.

yosys> peepopt

3.57. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 50 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.59. Executing BMUXMAP pass.

yosys> demuxmap

3.60. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.61. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b12:
  creating $macc model for $verific$add_215$b12.vhd:306$432 ($add).
  creating $macc model for $verific$add_309$b12.vhd:423$488 ($add).
  creating $macc model for $verific$add_69$b12.vhd:159$308 ($add).
  creating $macc model for $verific$add_8$b12.vhd:85$271 ($add).
  creating $macc model for $verific$sub_207$b12.vhd:298$427 ($sub).
  creating $macc model for $verific$sub_311$b12.vhd:424$491 ($sub).
  creating $alu model for $macc $verific$sub_311$b12.vhd:424$491.
  creating $alu model for $macc $verific$sub_207$b12.vhd:298$427.
  creating $alu model for $macc $verific$add_8$b12.vhd:85$271.
  creating $alu model for $macc $verific$add_69$b12.vhd:159$308.
  creating $alu model for $macc $verific$add_309$b12.vhd:423$488.
  creating $alu model for $macc $verific$add_215$b12.vhd:306$432.
  creating $alu model for $verific$LessThan_13$b12.vhd:88$277 ($lt): new $alu
  creating $alu model for $verific$LessThan_22$b12.vhd:98$281 ($lt): new $alu
  creating $alu model for $verific$LessThan_31$b12.vhd:107$285 ($lt): new $alu
  creating $alu model for $verific$LessThan_4$b12.vhd:80$267 ($lt): new $alu
  creating $alu model for $verific$LessThan_40$b12.vhd:116$289 ($lt): new $alu
  creating $alu model for $verific$LessThan_49$b12.vhd:125$293 ($lt): new $alu
  creating $alu cell for $verific$LessThan_40$b12.vhd:116$289: $auto$alumacc.cc:485:replace_alu$1751
  creating $alu cell for $verific$LessThan_4$b12.vhd:80$267: $auto$alumacc.cc:485:replace_alu$1756
  creating $alu cell for $verific$LessThan_31$b12.vhd:107$285: $auto$alumacc.cc:485:replace_alu$1761
  creating $alu cell for $verific$LessThan_22$b12.vhd:98$281: $auto$alumacc.cc:485:replace_alu$1766
  creating $alu cell for $verific$LessThan_13$b12.vhd:88$277: $auto$alumacc.cc:485:replace_alu$1771
  creating $alu cell for $verific$add_215$b12.vhd:306$432: $auto$alumacc.cc:485:replace_alu$1776
  creating $alu cell for $verific$add_309$b12.vhd:423$488: $auto$alumacc.cc:485:replace_alu$1779
  creating $alu cell for $verific$add_69$b12.vhd:159$308: $auto$alumacc.cc:485:replace_alu$1782
  creating $alu cell for $verific$LessThan_49$b12.vhd:125$293: $auto$alumacc.cc:485:replace_alu$1785
  creating $alu cell for $verific$add_8$b12.vhd:85$271: $auto$alumacc.cc:485:replace_alu$1790
  creating $alu cell for $verific$sub_207$b12.vhd:298$427: $auto$alumacc.cc:485:replace_alu$1793
  creating $alu cell for $verific$sub_311$b12.vhd:424$491: $auto$alumacc.cc:485:replace_alu$1796
  created 12 $alu and 0 $macc cells.

yosys> opt_expr

3.62. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~12 debug messages>

yosys> opt_merge -nomux

3.63. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.64. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~42 debug messages>

yosys> opt_reduce

3.65. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.66. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_share

3.67. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.68. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.69. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.70. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_muxtree

3.71. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~45 debug messages>

yosys> opt_reduce

3.72. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.73. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.74. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.75. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.76. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.77. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 2

yosys> stat

3.78. Printing statistics.

=== b12 ===

   Number of wires:                439
   Number of wire bits:           2066
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                535
     $adff                           6
     $adffe                         45
     $alu                           12
     $and                           28
     $eq                            15
     $logic_not                      2
     $mux                          289
     $ne                            63
     $not                           15
     $pmux                           1
     $reduce_and                    45
     $reduce_bool                    4
     $reduce_or                      7
     $shl                            3


yosys> memory -nomap

3.79. Executing MEMORY pass.

yosys> opt_mem

3.79.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.79.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.79.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.79.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.79.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.79.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> memory_share

3.79.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.79.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.79.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> memory_collect

3.79.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.80. Printing statistics.

=== b12 ===

   Number of wires:                439
   Number of wire bits:           2066
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                535
     $adff                           6
     $adffe                         45
     $alu                           12
     $and                           28
     $eq                            15
     $logic_not                      2
     $mux                          289
     $ne                            63
     $not                           15
     $pmux                           1
     $reduce_and                    45
     $reduce_bool                    4
     $reduce_or                      7
     $shl                            3


yosys> muxpack

3.81. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~245 debug messages>

yosys> opt_clean

3.82. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> pmuxtree

3.83. Executing PMUXTREE pass.

yosys> muxpack

3.84. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~246 debug messages>

yosys> memory_map

3.85. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.86. Printing statistics.

=== b12 ===

   Number of wires:                445
   Number of wire bits:           2075
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                540
     $adff                           6
     $adffe                         45
     $alu                           12
     $and                           28
     $eq                            15
     $logic_not                      2
     $mux                          292
     $ne                            63
     $not                           16
     $or                             1
     $reduce_and                    45
     $reduce_bool                    4
     $reduce_or                      8
     $shl                            3


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.87. Executing TECHMAP pass (map to technology primitives).

3.87.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.87.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.87.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_90_alu for cells of type $alu.
Using template $paramod$a04dd9d4d8b430140c4ff94b50470fb380fda2a0\_90_alu for cells of type $alu.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$79fc7abbb3333dbd5736999d565fd903198fb1eb\_90_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$constmap:dbcddb7b4524c1c5fa25e15435f3b9049e3d7d7a$paramod$3bf4391c2edcd7fdc564361d03ba2cf3a33c67d4\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:66d421c313e4e958be776b99540ac2de3b59fdbc$paramod$77562a466236eb4a6d905351a0995599b75075cb\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
No more expansions possible.
<suppressed ~2528 debug messages>

yosys> stat

3.88. Printing statistics.

=== b12 ===

   Number of wires:               1239
   Number of wire bits:          23353
   Number of public wires:          56
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2563
     $_AND_                        286
     $_DFFE_PP0P_                  105
     $_DFF_PP0_                     16
     $_MUX_                       1142
     $_NOT_                         82
     $_OR_                         430
     $_XOR_                        502


yosys> opt_expr

3.89. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~796 debug messages>

yosys> opt_merge -nomux

3.90. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~1434 debug messages>
Removed a total of 478 cells.

yosys> opt_muxtree

3.91. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.92. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.93. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.94. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.95. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.96. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 28 unused cells and 855 unused wires.
<suppressed ~29 debug messages>

yosys> opt_expr

3.97. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~1 debug messages>

yosys> opt_muxtree

3.98. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.99. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.100. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.101. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.102. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.103. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.104. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 2

yosys> opt_expr -full

3.105. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~489 debug messages>

yosys> techmap -map +/techmap.v

3.106. Executing TECHMAP pass (map to technology primitives).

3.106.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.106.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.107. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.108. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~84 debug messages>
Removed a total of 28 cells.

yosys> opt_muxtree

3.109. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.110. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.111. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.112. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.113. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 90 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.114. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~4 debug messages>

yosys> opt_muxtree

3.115. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.116. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.117. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.118. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.119. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..

yosys> opt_expr

3.120. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 2

yosys> abc -dff

3.121. Executing ABC pass (technology mapping using ABC).

3.121.1. Summary of detected clock domains:
  46 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1303, arst=\reset, srst={ }
  145 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1676, arst=\reset, srst={ }
  73 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1413, arst=\reset, srst={ }
  148 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1697, arst=\reset, srst={ }
  16 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1345, arst=\reset, srst={ }
  12 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1655, arst=\reset, srst={ }
  17 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1430, arst=\reset, srst={ }
  83 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1328, arst=\reset, srst={ }
  39 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1490, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1514, arst=\reset, srst={ }
  84 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1511, arst=\reset, srst={ }
  60 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1640, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1535, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1538, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1541, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1547, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1550, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1553, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1556, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1559, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1562, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1565, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1568, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1571, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1574, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1580, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1583, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1586, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1589, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1592, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1595, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1598, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1601, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1604, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1607, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1517, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1520, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1523, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1526, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1529, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1532, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1544, arst=\reset, srst={ }
  2 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1577, arst=\reset, srst={ }
  242 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  124 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1386, arst=\reset, srst={ }
  37 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$1461, arst=\reset, srst={ }

3.121.2. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1303, asynchronously reset by \reset
Extracted 46 gates and 89 wires to a netlist network with 42 inputs and 43 outputs.

3.121.2.1. Executing ABC.

3.121.3. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1676, asynchronously reset by \reset
Extracted 145 gates and 188 wires to a netlist network with 41 inputs and 22 outputs.

3.121.3.1. Executing ABC.

3.121.4. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1413, asynchronously reset by \reset
Extracted 73 gates and 100 wires to a netlist network with 26 inputs and 17 outputs.

3.121.4.1. Executing ABC.

3.121.5. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1697, asynchronously reset by \reset
Extracted 148 gates and 235 wires to a netlist network with 86 inputs and 41 outputs.

3.121.5.1. Executing ABC.

3.121.6. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1345, asynchronously reset by \reset
Extracted 16 gates and 29 wires to a netlist network with 13 inputs and 2 outputs.

3.121.6.1. Executing ABC.

3.121.7. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1655, asynchronously reset by \reset
Extracted 12 gates and 24 wires to a netlist network with 12 inputs and 8 outputs.

3.121.7.1. Executing ABC.

3.121.8. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1430, asynchronously reset by \reset
Extracted 17 gates and 28 wires to a netlist network with 11 inputs and 3 outputs.

3.121.8.1. Executing ABC.

3.121.9. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1328, asynchronously reset by \reset
Extracted 83 gates and 117 wires to a netlist network with 32 inputs and 26 outputs.

3.121.9.1. Executing ABC.

3.121.10. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1490, asynchronously reset by \reset
Extracted 39 gates and 69 wires to a netlist network with 30 inputs and 9 outputs.

3.121.10.1. Executing ABC.

3.121.11. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1514, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.11.1. Executing ABC.

3.121.12. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1511, asynchronously reset by \reset
Extracted 84 gates and 110 wires to a netlist network with 24 inputs and 11 outputs.

3.121.12.1. Executing ABC.

3.121.13. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1640, asynchronously reset by \reset
Extracted 60 gates and 84 wires to a netlist network with 23 inputs and 15 outputs.

3.121.13.1. Executing ABC.

3.121.14. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1535, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.14.1. Executing ABC.

3.121.15. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1538, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.15.1. Executing ABC.

3.121.16. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1541, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.16.1. Executing ABC.

3.121.17. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1547, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.17.1. Executing ABC.

3.121.18. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1550, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.18.1. Executing ABC.

3.121.19. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1553, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.19.1. Executing ABC.

3.121.20. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1556, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.20.1. Executing ABC.

3.121.21. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1559, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.21.1. Executing ABC.

3.121.22. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1562, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.22.1. Executing ABC.

3.121.23. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1565, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.23.1. Executing ABC.

3.121.24. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1568, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.24.1. Executing ABC.

3.121.25. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1571, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.25.1. Executing ABC.

3.121.26. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1574, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.26.1. Executing ABC.

3.121.27. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1580, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.27.1. Executing ABC.

3.121.28. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1583, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.28.1. Executing ABC.

3.121.29. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1586, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.29.1. Executing ABC.

3.121.30. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1589, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.30.1. Executing ABC.

3.121.31. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1592, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.31.1. Executing ABC.

3.121.32. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1595, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.32.1. Executing ABC.

3.121.33. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1598, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.33.1. Executing ABC.

3.121.34. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1601, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.34.1. Executing ABC.

3.121.35. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1604, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.35.1. Executing ABC.

3.121.36. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1607, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.36.1. Executing ABC.

3.121.37. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1517, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.37.1. Executing ABC.

3.121.38. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1520, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.38.1. Executing ABC.

3.121.39. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1523, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.39.1. Executing ABC.

3.121.40. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1526, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.40.1. Executing ABC.

3.121.41. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1529, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.41.1. Executing ABC.

3.121.42. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1532, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.42.1. Executing ABC.

3.121.43. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1544, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.43.1. Executing ABC.

3.121.44. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1577, asynchronously reset by \reset
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.121.44.1. Executing ABC.

3.121.45. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 242 gates and 280 wires to a netlist network with 36 inputs and 40 outputs.

3.121.45.1. Executing ABC.

3.121.46. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1386, asynchronously reset by \reset
Extracted 124 gates and 176 wires to a netlist network with 50 inputs and 36 outputs.

3.121.46.1. Executing ABC.

3.121.47. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1461, asynchronously reset by \reset
Extracted 37 gates and 65 wires to a netlist network with 26 inputs and 9 outputs.

3.121.47.1. Executing ABC.

yosys> abc -dff

3.122. Executing ABC pass (technology mapping using ABC).

3.122.1. Summary of detected clock domains:
  5 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1562, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1565, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1568, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1571, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1538, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1547, arst=\reset, srst={ }
  15 cells in clk=\clock, en=$abc$6575$auto$opt_dff.cc:219:make_patterns_logic$1430, arst=\reset, srst={ }
  36 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1303, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1535, arst=\reset, srst={ }
  37 cells in clk=\clock, en=$abc$6653$auto$opt_dff.cc:219:make_patterns_logic$1490, arst=\reset, srst={ }
  51 cells in clk=\clock, en=$abc$6260$auto$opt_dff.cc:219:make_patterns_logic$1413, arst=\reset, srst={ }
  21 cells in clk=\clock, en=$abc$6544$auto$opt_dff.cc:219:make_patterns_logic$1345, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1550, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1541, arst=\reset, srst={ }
  119 cells in clk=\clock, en=$abc$6698$auto$opt_dff.cc:219:make_patterns_logic$1511, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1514, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1556, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1559, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1553, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1577, arst=\reset, srst={ }
  52 cells in clk=\clock, en=$abc$6817$auto$opt_dff.cc:219:make_patterns_logic$1640, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1544, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1532, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1529, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1526, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1523, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1520, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1517, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1607, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1604, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1601, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1598, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1595, arst=\reset, srst={ }
  62 cells in clk=\clock, en=$abc$6591$auto$opt_dff.cc:219:make_patterns_logic$1328, arst=\reset, srst={ }
  69 cells in clk=\clock, en=$abc$7301$auto$opt_dff.cc:219:make_patterns_logic$1386, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1574, arst=\reset, srst={ }
  148 cells in clk=\clock, en=$abc$6320$auto$opt_dff.cc:219:make_patterns_logic$1697, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1583, arst=\reset, srst={ }
  194 cells in clk=\clock, en=$abc$6065$auto$opt_dff.cc:219:make_patterns_logic$1676, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1580, arst=\reset, srst={ }
  13 cells in clk=\clock, en=$abc$6558$auto$opt_dff.cc:219:make_patterns_logic$1655, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1592, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1586, arst=\reset, srst={ }
  228 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1589, arst=\reset, srst={ }
  40 cells in clk=\clock, en=$abc$7399$auto$opt_dff.cc:219:make_patterns_logic$1461, arst=\reset, srst={ }

3.122.2. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1562, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.122.2.1. Executing ABC.

3.122.3. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1565, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.122.3.1. Executing ABC.

3.122.4. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1568, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.122.4.1. Executing ABC.

3.122.5. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1571, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.122.5.1. Executing ABC.

3.122.6. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1538, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.122.6.1. Executing ABC.

3.122.7. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1547, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.122.7.1. Executing ABC.

3.122.8. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6575$auto$opt_dff.cc:219:make_patterns_logic$1430, asynchronously reset by \reset
Extracted 15 gates and 27 wires to a netlist network with 12 inputs and 3 outputs.

3.122.8.1. Executing ABC.

3.122.9. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1303, asynchronously reset by \reset
Extracted 36 gates and 69 wires to a netlist network with 33 inputs and 34 outputs.

3.122.9.1. Executing ABC.

3.122.10. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1535, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.122.10.1. Executing ABC.

3.122.11. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6653$auto$opt_dff.cc:219:make_patterns_logic$1490, asynchronously reset by \reset
Extracted 37 gates and 66 wires to a netlist network with 29 inputs and 9 outputs.

3.122.11.1. Executing ABC.

3.122.12. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6260$auto$opt_dff.cc:219:make_patterns_logic$1413, asynchronously reset by \reset
Extracted 51 gates and 77 wires to a netlist network with 26 inputs and 20 outputs.

3.122.12.1. Executing ABC.

3.122.13. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6544$auto$opt_dff.cc:219:make_patterns_logic$1345, asynchronously reset by \reset
Extracted 21 gates and 39 wires to a netlist network with 18 inputs and 4 outputs.

3.122.13.1. Executing ABC.

3.122.14. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1550, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.14.1. Executing ABC.

3.122.15. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1541, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.15.1. Executing ABC.

3.122.16. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6698$auto$opt_dff.cc:219:make_patterns_logic$1511, asynchronously reset by \reset
Extracted 119 gates and 143 wires to a netlist network with 24 inputs and 14 outputs.

3.122.16.1. Executing ABC.

3.122.17. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1514, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.17.1. Executing ABC.

3.122.18. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1556, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.18.1. Executing ABC.

3.122.19. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1559, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.19.1. Executing ABC.

3.122.20. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1553, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.122.20.1. Executing ABC.

3.122.21. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1577, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.21.1. Executing ABC.

3.122.22. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6817$auto$opt_dff.cc:219:make_patterns_logic$1640, asynchronously reset by \reset
Extracted 52 gates and 79 wires to a netlist network with 27 inputs and 18 outputs.

3.122.22.1. Executing ABC.

3.122.23. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1544, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.23.1. Executing ABC.

3.122.24. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1532, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.24.1. Executing ABC.

3.122.25. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1529, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.25.1. Executing ABC.

3.122.26. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1526, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.26.1. Executing ABC.

3.122.27. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1523, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.27.1. Executing ABC.

3.122.28. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1520, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.28.1. Executing ABC.

3.122.29. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1517, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.29.1. Executing ABC.

3.122.30. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1607, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.30.1. Executing ABC.

3.122.31. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1604, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.31.1. Executing ABC.

3.122.32. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1601, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.32.1. Executing ABC.

3.122.33. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1598, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.33.1. Executing ABC.

3.122.34. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1595, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.34.1. Executing ABC.

3.122.35. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6591$auto$opt_dff.cc:219:make_patterns_logic$1328, asynchronously reset by \reset
Extracted 62 gates and 99 wires to a netlist network with 37 inputs and 30 outputs.

3.122.35.1. Executing ABC.

3.122.36. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7301$auto$opt_dff.cc:219:make_patterns_logic$1386, asynchronously reset by \reset
Extracted 69 gates and 110 wires to a netlist network with 41 inputs and 27 outputs.

3.122.36.1. Executing ABC.

3.122.37. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1574, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.122.37.1. Executing ABC.

3.122.38. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6320$auto$opt_dff.cc:219:make_patterns_logic$1697, asynchronously reset by \reset
Extracted 148 gates and 231 wires to a netlist network with 83 inputs and 52 outputs.

3.122.38.1. Executing ABC.

3.122.39. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1583, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.39.1. Executing ABC.

3.122.40. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6065$auto$opt_dff.cc:219:make_patterns_logic$1676, asynchronously reset by \reset
Extracted 194 gates and 236 wires to a netlist network with 42 inputs and 21 outputs.

3.122.40.1. Executing ABC.

3.122.41. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1580, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.41.1. Executing ABC.

3.122.42. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$6558$auto$opt_dff.cc:219:make_patterns_logic$1655, asynchronously reset by \reset
Extracted 13 gates and 25 wires to a netlist network with 12 inputs and 9 outputs.

3.122.42.1. Executing ABC.

3.122.43. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1592, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.43.1. Executing ABC.

3.122.44. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1586, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.44.1. Executing ABC.

3.122.45. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 228 gates and 283 wires to a netlist network with 55 inputs and 31 outputs.

3.122.45.1. Executing ABC.

3.122.46. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1589, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.122.46.1. Executing ABC.

3.122.47. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7399$auto$opt_dff.cc:219:make_patterns_logic$1461, asynchronously reset by \reset
Extracted 40 gates and 64 wires to a netlist network with 24 inputs and 9 outputs.

3.122.47.1. Executing ABC.

yosys> abc -dff

3.123. Executing ABC pass (technology mapping using ABC).

3.123.1. Summary of detected clock domains:
  5 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1586, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7443$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1562, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7451$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1565, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7459$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1568, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7467$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1571, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7475$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1538, arst=\reset, srst={ }
  19 cells in clk=\clock, en=$abc$7491$abc$6575$auto$opt_dff.cc:219:make_patterns_logic$1430, arst=\reset, srst={ }
  34 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1303, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7545$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1535, arst=\reset, srst={ }
  30 cells in clk=\clock, en=$abc$7553$abc$6653$auto$opt_dff.cc:219:make_patterns_logic$1490, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1589, arst=\reset, srst={ }
  18 cells in clk=\clock, en=$abc$7646$abc$6544$auto$opt_dff.cc:219:make_patterns_logic$1345, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1550, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1541, arst=\reset, srst={ }
  119 cells in clk=\clock, en=$abc$7679$abc$6698$auto$opt_dff.cc:219:make_patterns_logic$1511, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1514, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1556, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1559, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7483$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1547, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1592, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7824$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1553, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1577, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1544, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1532, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1529, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1526, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1523, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1520, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1517, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1607, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1604, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1601, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1598, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1595, arst=\reset, srst={ }
  67 cells in clk=\clock, en=$abc$7980$abc$6591$auto$opt_dff.cc:219:make_patterns_logic$1328, arst=\reset, srst={ }
  57 cells in clk=\clock, en=$abc$7839$abc$6817$auto$opt_dff.cc:219:make_patterns_logic$1640, arst=\reset, srst={ }
  66 cells in clk=\clock, en=$abc$8048$abc$7301$auto$opt_dff.cc:219:make_patterns_logic$1386, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$8122$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1574, arst=\reset, srst={ }
  11 cells in clk=\clock, en=$abc$8467$abc$6558$auto$opt_dff.cc:219:make_patterns_logic$1655, arst=\reset, srst={ }
  156 cells in clk=\clock, en=$abc$8296$abc$6065$auto$opt_dff.cc:219:make_patterns_logic$1676, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1580, arst=\reset, srst={ }
  153 cells in clk=\clock, en=$abc$8130$abc$6320$auto$opt_dff.cc:219:make_patterns_logic$1697, arst=\reset, srst={ }
  212 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  48 cells in clk=\clock, en=$abc$7591$abc$6260$auto$opt_dff.cc:219:make_patterns_logic$1413, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1583, arst=\reset, srst={ }
  48 cells in clk=\clock, en=$abc$8721$abc$7399$auto$opt_dff.cc:219:make_patterns_logic$1461, arst=\reset, srst={ }

3.123.2. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1586, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.123.2.1. Executing ABC.

3.123.3. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7443$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1562, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.123.3.1. Executing ABC.

3.123.4. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7451$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1565, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.123.4.1. Executing ABC.

3.123.5. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7459$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1568, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.123.5.1. Executing ABC.

3.123.6. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7467$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1571, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.123.6.1. Executing ABC.

3.123.7. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7475$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1538, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.123.7.1. Executing ABC.

3.123.8. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7491$abc$6575$auto$opt_dff.cc:219:make_patterns_logic$1430, asynchronously reset by \reset
Extracted 19 gates and 31 wires to a netlist network with 12 inputs and 4 outputs.

3.123.8.1. Executing ABC.

3.123.9. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1303, asynchronously reset by \reset
Extracted 34 gates and 64 wires to a netlist network with 30 inputs and 32 outputs.

3.123.9.1. Executing ABC.

3.123.10. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7545$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1535, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.123.10.1. Executing ABC.

3.123.11. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7553$abc$6653$auto$opt_dff.cc:219:make_patterns_logic$1490, asynchronously reset by \reset
Extracted 30 gates and 59 wires to a netlist network with 29 inputs and 4 outputs.

3.123.11.1. Executing ABC.

3.123.12. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1589, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.123.12.1. Executing ABC.

3.123.13. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7646$abc$6544$auto$opt_dff.cc:219:make_patterns_logic$1345, asynchronously reset by \reset
Extracted 18 gates and 36 wires to a netlist network with 18 inputs and 4 outputs.

3.123.13.1. Executing ABC.

3.123.14. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1550, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.123.14.1. Executing ABC.

3.123.15. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1541, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.15.1. Executing ABC.

3.123.16. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7679$abc$6698$auto$opt_dff.cc:219:make_patterns_logic$1511, asynchronously reset by \reset
Extracted 119 gates and 144 wires to a netlist network with 25 inputs and 14 outputs.

3.123.16.1. Executing ABC.

3.123.17. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1514, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.17.1. Executing ABC.

3.123.18. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1556, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.18.1. Executing ABC.

3.123.19. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1559, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.123.19.1. Executing ABC.

3.123.20. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7483$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1547, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.123.20.1. Executing ABC.

3.123.21. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1592, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.21.1. Executing ABC.

3.123.22. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7824$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1553, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.22.1. Executing ABC.

3.123.23. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1577, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.23.1. Executing ABC.

3.123.24. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1544, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.24.1. Executing ABC.

3.123.25. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1532, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.25.1. Executing ABC.

3.123.26. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1529, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.26.1. Executing ABC.

3.123.27. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1526, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.27.1. Executing ABC.

3.123.28. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1523, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.28.1. Executing ABC.

3.123.29. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1520, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.29.1. Executing ABC.

3.123.30. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1517, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.30.1. Executing ABC.

3.123.31. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1607, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.31.1. Executing ABC.

3.123.32. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1604, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.32.1. Executing ABC.

3.123.33. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1601, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.33.1. Executing ABC.

3.123.34. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1598, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.34.1. Executing ABC.

3.123.35. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1595, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.35.1. Executing ABC.

3.123.36. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7980$abc$6591$auto$opt_dff.cc:219:make_patterns_logic$1328, asynchronously reset by \reset
Extracted 67 gates and 106 wires to a netlist network with 39 inputs and 31 outputs.

3.123.36.1. Executing ABC.

3.123.37. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7839$abc$6817$auto$opt_dff.cc:219:make_patterns_logic$1640, asynchronously reset by \reset
Extracted 57 gates and 84 wires to a netlist network with 27 inputs and 21 outputs.

3.123.37.1. Executing ABC.

3.123.38. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8048$abc$7301$auto$opt_dff.cc:219:make_patterns_logic$1386, asynchronously reset by \reset
Extracted 66 gates and 105 wires to a netlist network with 39 inputs and 26 outputs.

3.123.38.1. Executing ABC.

3.123.39. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$8122$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1574, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.39.1. Executing ABC.

3.123.40. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8467$abc$6558$auto$opt_dff.cc:219:make_patterns_logic$1655, asynchronously reset by \reset
Extracted 11 gates and 23 wires to a netlist network with 12 inputs and 7 outputs.

3.123.40.1. Executing ABC.

3.123.41. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8296$abc$6065$auto$opt_dff.cc:219:make_patterns_logic$1676, asynchronously reset by \reset
Extracted 156 gates and 199 wires to a netlist network with 43 inputs and 23 outputs.

3.123.41.1. Executing ABC.

3.123.42. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1580, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.123.42.1. Executing ABC.

3.123.43. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8130$abc$6320$auto$opt_dff.cc:219:make_patterns_logic$1697, asynchronously reset by \reset
Extracted 153 gates and 236 wires to a netlist network with 83 inputs and 53 outputs.

3.123.43.1. Executing ABC.

3.123.44. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 212 gates and 262 wires to a netlist network with 50 inputs and 35 outputs.

3.123.44.1. Executing ABC.

3.123.45. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$7591$abc$6260$auto$opt_dff.cc:219:make_patterns_logic$1413, asynchronously reset by \reset
Extracted 48 gates and 70 wires to a netlist network with 22 inputs and 17 outputs.

3.123.45.1. Executing ABC.

3.123.46. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1583, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.123.46.1. Executing ABC.

3.123.47. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8721$abc$7399$auto$opt_dff.cc:219:make_patterns_logic$1461, asynchronously reset by \reset
Extracted 48 gates and 80 wires to a netlist network with 32 inputs and 10 outputs.

3.123.47.1. Executing ABC.

yosys> abc -dff

3.124. Executing ABC pass (technology mapping using ABC).

3.124.1. Summary of detected clock domains:
  5 cells in clk=\clock, en=$abc$8763$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1586, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$8771$abc$7443$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1562, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$8779$abc$7451$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1565, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$8787$abc$7459$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1568, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$8795$abc$7467$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1571, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$8803$abc$7475$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1538, arst=\reset, srst={ }
  16 cells in clk=\clock, en=$abc$8811$abc$7491$abc$6575$auto$opt_dff.cc:219:make_patterns_logic$1430, arst=\reset, srst={ }
  31 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1303, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$8866$abc$7545$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1535, arst=\reset, srst={ }
  29 cells in clk=\clock, en=$abc$8874$abc$7553$abc$6653$auto$opt_dff.cc:219:make_patterns_logic$1490, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$8906$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1589, arst=\reset, srst={ }
  17 cells in clk=\clock, en=$abc$8914$abc$7646$abc$6544$auto$opt_dff.cc:219:make_patterns_logic$1345, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$8933$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1550, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1541, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1583, arst=\reset, srst={ }
  117 cells in clk=\clock, en=$abc$8948$abc$7679$abc$6698$auto$opt_dff.cc:219:make_patterns_logic$1511, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1514, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1556, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$9085$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1559, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$9093$abc$7483$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1547, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1592, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$8830$abc$7824$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1553, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1577, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1544, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1532, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1529, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1526, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1523, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1520, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1517, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1607, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1604, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1601, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1598, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1595, arst=\reset, srst={ }
  62 cells in clk=\clock, en=$abc$9206$abc$7980$abc$6591$auto$opt_dff.cc:219:make_patterns_logic$1328, arst=\reset, srst={ }
  62 cells in clk=\clock, en=$abc$9274$abc$7839$abc$6817$auto$opt_dff.cc:219:make_patterns_logic$1640, arst=\reset, srst={ }
  68 cells in clk=\clock, en=$abc$9336$abc$8048$abc$7301$auto$opt_dff.cc:219:make_patterns_logic$1386, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$8830$abc$8122$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1574, arst=\reset, srst={ }
  11 cells in clk=\clock, en=$abc$9412$abc$8467$abc$6558$auto$opt_dff.cc:219:make_patterns_logic$1655, arst=\reset, srst={ }
  157 cells in clk=\clock, en=$abc$9428$abc$8296$abc$6065$auto$opt_dff.cc:219:make_patterns_logic$1676, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$9586$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1580, arst=\reset, srst={ }
  158 cells in clk=\clock, en=$abc$9594$abc$8130$abc$6320$auto$opt_dff.cc:219:make_patterns_logic$1697, arst=\reset, srst={ }
  203 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  44 cells in clk=\clock, en=$abc$9964$abc$7591$abc$6260$auto$opt_dff.cc:219:make_patterns_logic$1413, arst=\reset, srst={ }
  49 cells in clk=\clock, en=$abc$10021$abc$8721$abc$7399$auto$opt_dff.cc:219:make_patterns_logic$1461, arst=\reset, srst={ }

3.124.2. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8763$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1586, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.124.2.1. Executing ABC.

3.124.3. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8771$abc$7443$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1562, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.124.3.1. Executing ABC.

3.124.4. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8779$abc$7451$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1565, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.124.4.1. Executing ABC.

3.124.5. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8787$abc$7459$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1568, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.124.5.1. Executing ABC.

3.124.6. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8795$abc$7467$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1571, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.124.6.1. Executing ABC.

3.124.7. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8803$abc$7475$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1538, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.124.7.1. Executing ABC.

3.124.8. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8811$abc$7491$abc$6575$auto$opt_dff.cc:219:make_patterns_logic$1430, asynchronously reset by \reset
Extracted 16 gates and 28 wires to a netlist network with 12 inputs and 4 outputs.

3.124.8.1. Executing ABC.

3.124.9. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1303, asynchronously reset by \reset
Extracted 31 gates and 59 wires to a netlist network with 28 inputs and 29 outputs.

3.124.9.1. Executing ABC.

3.124.10. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8866$abc$7545$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1535, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.124.10.1. Executing ABC.

3.124.11. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8874$abc$7553$abc$6653$auto$opt_dff.cc:219:make_patterns_logic$1490, asynchronously reset by \reset
Extracted 29 gates and 57 wires to a netlist network with 28 inputs and 4 outputs.

3.124.11.1. Executing ABC.

3.124.12. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8906$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1589, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.124.12.1. Executing ABC.

3.124.13. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8914$abc$7646$abc$6544$auto$opt_dff.cc:219:make_patterns_logic$1345, asynchronously reset by \reset
Extracted 17 gates and 35 wires to a netlist network with 18 inputs and 4 outputs.

3.124.13.1. Executing ABC.

3.124.14. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8933$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1550, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.124.14.1. Executing ABC.

3.124.15. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1541, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.124.15.1. Executing ABC.

3.124.16. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1583, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.124.16.1. Executing ABC.

3.124.17. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8948$abc$7679$abc$6698$auto$opt_dff.cc:219:make_patterns_logic$1511, asynchronously reset by \reset
Extracted 117 gates and 142 wires to a netlist network with 25 inputs and 13 outputs.

3.124.17.1. Executing ABC.

3.124.18. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1514, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.18.1. Executing ABC.

3.124.19. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1556, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.124.19.1. Executing ABC.

3.124.20. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$9085$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1559, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.124.20.1. Executing ABC.

3.124.21. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$9093$abc$7483$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1547, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.21.1. Executing ABC.

3.124.22. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1592, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.22.1. Executing ABC.

3.124.23. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$8830$abc$7824$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1553, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.23.1. Executing ABC.

3.124.24. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1577, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.24.1. Executing ABC.

3.124.25. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1544, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.25.1. Executing ABC.

3.124.26. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1532, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.26.1. Executing ABC.

3.124.27. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1529, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.27.1. Executing ABC.

3.124.28. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1526, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.28.1. Executing ABC.

3.124.29. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1523, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.29.1. Executing ABC.

3.124.30. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1520, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.30.1. Executing ABC.

3.124.31. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1517, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.31.1. Executing ABC.

3.124.32. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1607, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.32.1. Executing ABC.

3.124.33. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1604, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.33.1. Executing ABC.

3.124.34. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1601, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.34.1. Executing ABC.

3.124.35. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1598, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.35.1. Executing ABC.

3.124.36. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$8830$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1595, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.36.1. Executing ABC.

3.124.37. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$9206$abc$7980$abc$6591$auto$opt_dff.cc:219:make_patterns_logic$1328, asynchronously reset by \reset
Extracted 62 gates and 98 wires to a netlist network with 36 inputs and 30 outputs.

3.124.37.1. Executing ABC.

3.124.38. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$9274$abc$7839$abc$6817$auto$opt_dff.cc:219:make_patterns_logic$1640, asynchronously reset by \reset
Extracted 62 gates and 87 wires to a netlist network with 25 inputs and 24 outputs.

3.124.38.1. Executing ABC.

3.124.39. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$9336$abc$8048$abc$7301$auto$opt_dff.cc:219:make_patterns_logic$1386, asynchronously reset by \reset
Extracted 68 gates and 107 wires to a netlist network with 39 inputs and 25 outputs.

3.124.39.1. Executing ABC.

3.124.40. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$8830$abc$8122$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1574, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.40.1. Executing ABC.

3.124.41. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$9412$abc$8467$abc$6558$auto$opt_dff.cc:219:make_patterns_logic$1655, asynchronously reset by \reset
Extracted 11 gates and 23 wires to a netlist network with 12 inputs and 7 outputs.

3.124.41.1. Executing ABC.

3.124.42. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$9428$abc$8296$abc$6065$auto$opt_dff.cc:219:make_patterns_logic$1676, asynchronously reset by \reset
Extracted 157 gates and 198 wires to a netlist network with 41 inputs and 22 outputs.

3.124.42.1. Executing ABC.

3.124.43. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10136$abc$9586$abc$7507$abc$6018$auto$opt_dff.cc:219:make_patterns_logic$1580, asynchronously reset by \reset
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.124.43.1. Executing ABC.

3.124.44. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$9594$abc$8130$abc$6320$auto$opt_dff.cc:219:make_patterns_logic$1697, asynchronously reset by \reset
Extracted 158 gates and 242 wires to a netlist network with 84 inputs and 46 outputs.

3.124.44.1. Executing ABC.

3.124.45. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 203 gates and 240 wires to a netlist network with 37 inputs and 39 outputs.

3.124.45.1. Executing ABC.

3.124.46. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$9964$abc$7591$abc$6260$auto$opt_dff.cc:219:make_patterns_logic$1413, asynchronously reset by \reset
Extracted 44 gates and 67 wires to a netlist network with 23 inputs and 15 outputs.

3.124.46.1. Executing ABC.

3.124.47. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$10021$abc$8721$abc$7399$auto$opt_dff.cc:219:make_patterns_logic$1461, asynchronously reset by \reset
Extracted 49 gates and 84 wires to a netlist network with 35 inputs and 10 outputs.

3.124.47.1. Executing ABC.

yosys> opt_ffinv

3.125. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.126. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~23 debug messages>

yosys> opt_merge -nomux

3.127. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~51 debug messages>
Removed a total of 17 cells.

yosys> opt_muxtree

3.128. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.129. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.130. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.131. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.132. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.133. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 6822 unused wires.
<suppressed ~42 debug messages>

yosys> opt_expr

3.134. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 1

yosys> bmuxmap

3.135. Executing BMUXMAP pass.

yosys> demuxmap

3.136. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_ByGCLa/abc_tmp_1.scr

3.137. Executing ABC pass (technology mapping using ABC).

3.137.1. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Extracted 1016 gates and 1138 wires to a netlist network with 122 inputs and 100 outputs.

3.137.1.1. Executing ABC.
DE:   #PIs = 122  #Luts =   315  Max Lvl =   4  Avg Lvl =   2.04  [   0.25 sec. at Pass 0]{firstMap}
DE:   #PIs = 122  #Luts =   232  Max Lvl =   7  Avg Lvl =   3.04  [   1.36 sec. at Pass 1]{initMapFlow}
DE:   #PIs = 122  #Luts =   225  Max Lvl =   7  Avg Lvl =   2.98  [   0.43 sec. at Pass 2]{map}
DE:   #PIs = 122  #Luts =   225  Max Lvl =   6  Avg Lvl =   2.63  [   1.37 sec. at Pass 3]{postMap}
DE:   #PIs = 122  #Luts =   223  Max Lvl =   8  Avg Lvl =   2.95  [   0.78 sec. at Pass 4]{map}
DE:   #PIs = 122  #Luts =   220  Max Lvl =   6  Avg Lvl =   2.54  [   1.74 sec. at Pass 5]{postMap}
DE:   #PIs = 122  #Luts =   218  Max Lvl =   7  Avg Lvl =   2.84  [   0.96 sec. at Pass 6]{map}
DE:   #PIs = 122  #Luts =   216  Max Lvl =   7  Avg Lvl =   2.88  [   1.53 sec. at Pass 7]{postMap}
DE:   #PIs = 122  #Luts =   215  Max Lvl =   7  Avg Lvl =   2.86  [   1.05 sec. at Pass 8]{map}
DE:   #PIs = 122  #Luts =   211  Max Lvl =   7  Avg Lvl =   2.84  [   1.41 sec. at Pass 9]{postMap}
DE:   #PIs = 122  #Luts =   211  Max Lvl =   7  Avg Lvl =   2.84  [   0.46 sec. at Pass 10]{map}
DE:   #PIs = 122  #Luts =   208  Max Lvl =   7  Avg Lvl =   2.86  [   1.20 sec. at Pass 11]{postMap}
DE:   #PIs = 122  #Luts =   206  Max Lvl =   9  Avg Lvl =   3.18  [   0.58 sec. at Pass 12]{map}
DE:   #PIs = 122  #Luts =   205  Max Lvl =   8  Avg Lvl =   2.89  [   1.06 sec. at Pass 13]{postMap}
DE:   #PIs = 122  #Luts =   205  Max Lvl =   7  Avg Lvl =   2.81  [   0.39 sec. at Pass 14]{map}
DE:   #PIs = 122  #Luts =   205  Max Lvl =   7  Avg Lvl =   2.81  [   1.25 sec. at Pass 15]{postMap}
DE:   #PIs = 122  #Luts =   204  Max Lvl =   8  Avg Lvl =   3.15  [   0.74 sec. at Pass 16]{map}
DE:   #PIs = 122  #Luts =   202  Max Lvl =   7  Avg Lvl =   2.76  [   1.58 sec. at Pass 17]{postMap}
DE:   #PIs = 122  #Luts =   201  Max Lvl =   8  Avg Lvl =   3.12  [   1.02 sec. at Pass 18]{map}
DE:   #PIs = 122  #Luts =   201  Max Lvl =   7  Avg Lvl =   2.79  [   1.62 sec. at Pass 19]{postMap}
DE:   #PIs = 122  #Luts =   201  Max Lvl =   7  Avg Lvl =   2.79  [   0.91 sec. at Pass 20]{map}
DE:   #PIs = 122  #Luts =   200  Max Lvl =   7  Avg Lvl =   2.83  [   2.02 sec. at Pass 21]{postMap}
DE:   #PIs = 122  #Luts =   200  Max Lvl =   7  Avg Lvl =   2.83  [   1.27 sec. at Pass 22]{map}
DE:   #PIs = 122  #Luts =   200  Max Lvl =   7  Avg Lvl =   2.83  [   1.83 sec. at Pass 23]{postMap}
DE:   #PIs = 122  #Luts =   198  Max Lvl =   7  Avg Lvl =   2.80  [   0.50 sec. at Pass 24]{map}
DE:   #PIs = 122  #Luts =   198  Max Lvl =   7  Avg Lvl =   2.80  [   1.45 sec. at Pass 25]{postMap}
DE:   #PIs = 122  #Luts =   198  Max Lvl =   7  Avg Lvl =   2.80  [   0.67 sec. at Pass 26]{map}
DE:   #PIs = 122  #Luts =   198  Max Lvl =   7  Avg Lvl =   2.80  [   1.59 sec. at Pass 27]{postMap}
DE:   #PIs = 122  #Luts =   197  Max Lvl =   6  Avg Lvl =   2.44  [   4.32 sec. at Pass 28]{pushMap}
DE:   #PIs = 122  #Luts =   197  Max Lvl =   6  Avg Lvl =   2.44  [   0.42 sec. at Pass 29]{map}
DE:   #PIs = 122  #Luts =   197  Max Lvl =   6  Avg Lvl =   2.44  [   0.87 sec. at Pass 30]{postMap}
DE:   #PIs = 122  #Luts =   197  Max Lvl =   6  Avg Lvl =   2.44  [   0.39 sec. at Pass 31]{map}
DE:   #PIs = 122  #Luts =   196  Max Lvl =   6  Avg Lvl =   2.44  [   5.24 sec. at Pass 32]{pushMap}
DE:   #PIs = 122  #Luts =   196  Max Lvl =   6  Avg Lvl =   2.44  [   1.33 sec. at Pass 33]{postMap}
DE:   #PIs = 122  #Luts =   196  Max Lvl =   6  Avg Lvl =   2.44  [   0.96 sec. at Pass 34]{map}
DE:   #PIs = 122  #Luts =   196  Max Lvl =   6  Avg Lvl =   2.44  [   1.69 sec. at Pass 35]{postMap}
DE:   #PIs = 122  #Luts =   195  Max Lvl =   6  Avg Lvl =   2.44  [   4.78 sec. at Pass 36]{pushMap}
DE:   #PIs = 122  #Luts =   195  Max Lvl =   6  Avg Lvl =   2.44  [   0.33 sec. at Pass 37]{map}
DE:   #PIs = 122  #Luts =   195  Max Lvl =   6  Avg Lvl =   2.44  [   1.02 sec. at Pass 38]{postMap}
DE:   #PIs = 122  #Luts =   195  Max Lvl =   6  Avg Lvl =   2.44  [   0.40 sec. at Pass 39]{map}
DE:   #PIs = 122  #Luts =   195  Max Lvl =   6  Avg Lvl =   2.44  [   6.70 sec. at Pass 40]{pushMap}
DE:   #PIs = 122  #Luts =   195  Max Lvl =   6  Avg Lvl =   2.44  [   0.38 sec. at Pass 41]{finalMap}

yosys> opt_expr

3.138. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.139. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_muxtree

3.140. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.141. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.142. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.143. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.144. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.145. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 1099 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.146. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.147. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.148. Printing statistics.

=== b12 ===

   Number of wires:                313
   Number of wire bits:            332
   Number of public wires:          14
   Number of public wire bits:      33
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                312
     $_DFFE_PP0P_                  105
     $_DFF_PP0_                     14
     $lut                          193


yosys> shregmap -minlen 8 -maxlen 20

3.149. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.150. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.151. Printing statistics.

=== b12 ===

   Number of wires:                313
   Number of wire bits:            332
   Number of public wires:          14
   Number of public wire bits:      33
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                312
     $_DFFE_PP0P_                  105
     $_DFF_PP0_                     14
     $lut                          193


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.152. Executing TECHMAP pass (map to technology primitives).

3.152.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.152.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.152.3. Continuing TECHMAP pass.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~567 debug messages>

yosys> opt_expr -mux_undef

3.153. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~7764 debug messages>

yosys> simplemap

3.154. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.155. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge

3.156. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
<suppressed ~1758 debug messages>
Removed a total of 586 cells.

yosys> opt_dff -nodffe -nosdff

3.157. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.158. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 1089 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.159. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
<suppressed ~91 debug messages>

yosys> opt_merge -nomux

3.160. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.161. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.162. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.163. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.164. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.165. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.166. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.167. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_ByGCLa/abc_tmp_2.scr

3.168. Executing ABC pass (technology mapping using ABC).

3.168.1. Extracting gate netlist of module `\b12' to `<abc-temp-dir>/input.blif'..
Extracted 1205 gates and 1328 wires to a netlist network with 121 inputs and 99 outputs.

3.168.1.1. Executing ABC.
DE:   #PIs = 121  #Luts =   200  Max Lvl =   4  Avg Lvl =   1.98  [   0.06 sec. at Pass 0]{firstMap}
DE:   #PIs = 121  #Luts =   200  Max Lvl =   4  Avg Lvl =   1.98  [   1.44 sec. at Pass 1]{initMapFlow}
DE:   #PIs = 121  #Luts =   198  Max Lvl =   7  Avg Lvl =   2.69  [   0.48 sec. at Pass 2]{map}
DE:   #PIs = 121  #Luts =   197  Max Lvl =   6  Avg Lvl =   2.36  [   1.38 sec. at Pass 3]{postMap}
DE:   #PIs = 121  #Luts =   194  Max Lvl =   7  Avg Lvl =   2.68  [   0.72 sec. at Pass 4]{map}
DE:   #PIs = 121  #Luts =   194  Max Lvl =   7  Avg Lvl =   2.68  [   1.92 sec. at Pass 5]{postMap}
DE:   #PIs = 121  #Luts =   194  Max Lvl =   7  Avg Lvl =   2.68  [   0.85 sec. at Pass 6]{map}
DE:   #PIs = 121  #Luts =   194  Max Lvl =   7  Avg Lvl =   2.68  [   1.60 sec. at Pass 7]{postMap}
DE:   #PIs = 121  #Luts =   194  Max Lvl =   6  Avg Lvl =   2.36  [   5.59 sec. at Pass 8]{pushMap}
DE:   #PIs = 121  #Luts =   194  Max Lvl =   6  Avg Lvl =   2.36  [   0.48 sec. at Pass 9]{map}
DE:   #PIs = 121  #Luts =   194  Max Lvl =   6  Avg Lvl =   2.36  [   0.83 sec. at Pass 10]{postMap}
DE:   #PIs = 121  #Luts =   194  Max Lvl =   6  Avg Lvl =   2.36  [   0.23 sec. at Pass 11]{map}
DE:   #PIs = 121  #Luts =   194  Max Lvl =   6  Avg Lvl =   2.36  [   3.99 sec. at Pass 12]{pushMap}
DE:   #PIs = 121  #Luts =   194  Max Lvl =   6  Avg Lvl =   2.36  [   0.22 sec. at Pass 13]{finalMap}

yosys> opt_expr

3.169. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.

yosys> opt_merge -nomux

3.170. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.171. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.172. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b12.
Performed a total of 0 changes.

yosys> opt_merge

3.173. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b12'.
Removed a total of 0 cells.

yosys> opt_share

3.174. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.175. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.176. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 941 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.177. Executing OPT_EXPR pass (perform const folding).
Optimizing module b12.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.178. Executing HIERARCHY pass (managing design hierarchy).

3.178.1. Analyzing design hierarchy..
Top module:  \b12

3.178.2. Analyzing design hierarchy..
Top module:  \b12
Removed 0 unused modules.

yosys> stat

3.179. Printing statistics.

=== b12 ===

   Number of wires:                314
   Number of wire bits:            333
   Number of public wires:          14
   Number of public wire bits:      33
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                313
     $lut                          194
     dffsre                        119


yosys> opt_clean -purge

3.180. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b12..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.181. Executing Verilog backend.
Dumping module `\b12'.

End of script. Logfile hash: bdba85294b, CPU: user 5.61s system 0.12s, MEM: 53.84 MB peak
Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)
Time spent: 99% 6x abc (502 sec), 0% 41x opt_expr (1 sec), ...
real 116.70
user 479.53
sys 27.93
