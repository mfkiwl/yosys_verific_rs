
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.92
 Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k rgb2ycrcb.v

yosys> verific -vlog2k rgb2ycrcb.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'rgb2ycrcb.v'

yosys> synth_rs -top top -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.79

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top top

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] rgb2ycrcb.v:57: compiling module 'top'
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:100: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:101: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:102: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:104: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:113: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:114: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:115: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:117: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:126: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:127: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:128: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:130: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:140: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:143: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] rgb2ycrcb.v:146: delay control is not supported for synthesis
Importing module top.

3.4.1. Analyzing design hierarchy..
Top module:  \top

3.4.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> bmuxmap

3.6. Executing BMUXMAP pass.

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).

yosys> bmuxmap

3.9. Executing BMUXMAP pass.

yosys> demuxmap

3.10. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.11. Executing TRIBUF pass.

yosys> deminout

3.12. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

yosys> opt_clean

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 18 unused wires.
<suppressed ~16 debug messages>

yosys> check

3.15. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

yosys> opt_expr

3.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.18. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

yosys> opt_reduce

3.19. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.20. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.21. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.22. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$yr_reg$rgb2ycrcb.v:105$77 ($aldff) from module top.
Removing never-active async load on $verific$yg_reg$rgb2ycrcb.v:105$78 ($aldff) from module top.
Removing never-active async load on $verific$yb_reg$rgb2ycrcb.v:105$79 ($aldff) from module top.
Removing never-active async load on $verific$y_reg$rgb2ycrcb.v:147$127 ($aldff) from module top.
Removing never-active async load on $verific$y1_reg$rgb2ycrcb.v:105$80 ($aldff) from module top.
Removing never-active async load on $verific$crr_reg$rgb2ycrcb.v:118$93 ($aldff) from module top.
Removing never-active async load on $verific$crg_reg$rgb2ycrcb.v:118$94 ($aldff) from module top.
Removing never-active async load on $verific$crb_reg$rgb2ycrcb.v:118$95 ($aldff) from module top.
Removing never-active async load on $verific$cr_reg$rgb2ycrcb.v:147$128 ($aldff) from module top.
Removing never-active async load on $verific$cr1_reg$rgb2ycrcb.v:118$96 ($aldff) from module top.
Removing never-active async load on $verific$cbr_reg$rgb2ycrcb.v:131$109 ($aldff) from module top.
Removing never-active async load on $verific$cbg_reg$rgb2ycrcb.v:131$110 ($aldff) from module top.
Removing never-active async load on $verific$cbb_reg$rgb2ycrcb.v:131$111 ($aldff) from module top.
Removing never-active async load on $verific$cb_reg$rgb2ycrcb.v:147$129 ($aldff) from module top.
Removing never-active async load on $verific$cb1_reg$rgb2ycrcb.v:131$112 ($aldff) from module top.

yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
MAX OPT ITERATION = 1

yosys> fsm -encoding binary

3.25. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.25.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> fsm_opt

3.25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.28. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

yosys> opt_reduce

3.29. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.30. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.31. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.32. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$yr_reg$rgb2ycrcb.v:105$77 ($dff) from module top (D = { 1'0 $verific$n25$13 [18:1] 1'0 }, Q = \yr).
Adding EN signal on $verific$yg_reg$rgb2ycrcb.v:105$78 ($dff) from module top (D = $verific$n46$14, Q = \yg).
Adding EN signal on $verific$yb_reg$rgb2ycrcb.v:105$79 ($dff) from module top (D = { 3'000 $verific$n106$17 [16:2] 2'00 }, Q = \yb).
Adding EN signal on $verific$y_reg$rgb2ycrcb.v:147$127 ($dff) from module top (D = $verific$n1067$50, Q = \y).
Adding EN signal on $verific$y1_reg$rgb2ycrcb.v:105$80 ($dff) from module top (D = { $verific$n149$5 $verific$n150$19 }, Q = \y1).
Adding EN signal on $verific$crr_reg$rgb2ycrcb.v:118$93 ($dff) from module top (D = { 1'0 \r 9'000000000 }, Q = \crr).
Adding EN signal on $verific$crg_reg$rgb2ycrcb.v:118$94 ($dff) from module top (D = { 1'0 $verific$n389$26 }, Q = \crg).
Adding EN signal on $verific$crb_reg$rgb2ycrcb.v:118$95 ($dff) from module top (D = { 3'000 $verific$n430$28 }, Q = \crb).
Adding EN signal on $verific$cr_reg$rgb2ycrcb.v:147$128 ($dff) from module top (D = $verific$n1103$53, Q = \cr).
Adding EN signal on $verific$cr1_reg$rgb2ycrcb.v:118$96 ($dff) from module top (D = $verific$n491$31, Q = \cr1).
Adding EN signal on $verific$cbr_reg$rgb2ycrcb.v:131$109 ($dff) from module top (D = { 2'00 $verific$n710$37 }, Q = \cbr).
Adding EN signal on $verific$cbg_reg$rgb2ycrcb.v:131$110 ($dff) from module top (D = { 1'0 $verific$n750$39 }, Q = \cbg).
Adding EN signal on $verific$cbb_reg$rgb2ycrcb.v:131$111 ($dff) from module top (D = { 1'0 \b 9'000000000 }, Q = \cbb).
Adding EN signal on $verific$cb_reg$rgb2ycrcb.v:147$129 ($dff) from module top (D = $verific$n1139$56, Q = \cb).
Adding EN signal on $verific$cb1_reg$rgb2ycrcb.v:131$112 ($dff) from module top (D = $verific$n834$43, Q = \cb1).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$143 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$142 ($dffe) from module top.
Setting constant 0-bit at position 18 on $auto$ff.cc:262:slice$141 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$141 ($dffe) from module top.
Setting constant 0-bit at position 17 on $auto$ff.cc:262:slice$138 ($dffe) from module top.
Setting constant 0-bit at position 18 on $auto$ff.cc:262:slice$138 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$138 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$137 ($dffe) from module top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$136 ($dffe) from module top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$133 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$133 ($dffe) from module top.
Setting constant 0-bit at position 17 on $auto$ff.cc:262:slice$133 ($dffe) from module top.
Setting constant 0-bit at position 18 on $auto$ff.cc:262:slice$133 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$133 ($dffe) from module top.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$131 ($dffe) from module top.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$131 ($dffe) from module top.

yosys> opt_clean

3.33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 15 unused cells and 15 unused wires.
<suppressed ~16 debug messages>

yosys> opt_expr

3.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_muxtree

3.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.38. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.39. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
MAX OPT ITERATION = 2

yosys> wreduce -keepdc

3.42. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 20) from port A of cell top.$verific$add_10$rgb2ycrcb.v:104$70 ($add).
Removed top 4 bits (of 21) from port B of cell top.$verific$add_11$rgb2ycrcb.v:104$71 ($add).
Removed top 2 bits (of 21) from port A of cell top.$verific$sub_27$rgb2ycrcb.v:117$86 ($sub).
Removed top 2 bits (of 21) from port B of cell top.$verific$sub_27$rgb2ycrcb.v:117$86 ($sub).
Removed top 1 bits (of 21) from port Y of cell top.$verific$sub_27$rgb2ycrcb.v:117$86 ($sub).
Removed top 5 bits (of 22) from port B of cell top.$verific$sub_28$rgb2ycrcb.v:117$87 ($sub).
Removed top 2 bits (of 21) from port A of cell top.$verific$sub_44$rgb2ycrcb.v:130$102 ($sub).
Removed top 3 bits (of 21) from port B of cell top.$verific$sub_44$rgb2ycrcb.v:130$102 ($sub).
Removed top 1 bits (of 21) from port Y of cell top.$verific$sub_44$rgb2ycrcb.v:130$102 ($sub).
Removed top 3 bits (of 22) from port B of cell top.$verific$sub_45$rgb2ycrcb.v:130$103 ($sub).
Removed top 3 bits (of 20) from wire top.$verific$n106$17.
Removed top 1 bits (of 20) from wire top.$verific$n25$13.
Removed top 1 bits (of 20) from wire top.cbb.
Removed top 1 bits (of 20) from wire top.cbg.
Removed top 2 bits (of 20) from wire top.cbr.
Removed top 3 bits (of 20) from wire top.crb.
Removed top 1 bits (of 20) from wire top.crg.
Removed top 1 bits (of 20) from wire top.crr.
Removed top 3 bits (of 20) from wire top.yb.
Removed top 1 bits (of 20) from wire top.yr.

yosys> peepopt

3.43. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.45. Executing BMUXMAP pass.

yosys> demuxmap

3.46. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.47. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $verific$add_10$rgb2ycrcb.v:104$70 ($add).
  creating $macc model for $verific$add_11$rgb2ycrcb.v:104$71 ($add).
  creating $macc model for $verific$mult_23$rgb2ycrcb.v:114$82 ($mul).
  creating $macc model for $verific$mult_25$rgb2ycrcb.v:115$84 ($mul).
  creating $macc model for $verific$mult_39$rgb2ycrcb.v:126$97 ($mul).
  creating $macc model for $verific$mult_4$rgb2ycrcb.v:100$64 ($mul).
  creating $macc model for $verific$mult_41$rgb2ycrcb.v:127$99 ($mul).
  creating $macc model for $verific$mult_6$rgb2ycrcb.v:101$66 ($mul).
  creating $macc model for $verific$mult_8$rgb2ycrcb.v:102$68 ($mul).
  creating $macc model for $verific$sub_27$rgb2ycrcb.v:117$86 ($sub).
  creating $macc model for $verific$sub_28$rgb2ycrcb.v:117$87 ($sub).
  creating $macc model for $verific$sub_44$rgb2ycrcb.v:130$102 ($sub).
  creating $macc model for $verific$sub_45$rgb2ycrcb.v:130$103 ($sub).
  merging $macc model for $verific$add_10$rgb2ycrcb.v:104$70 into $verific$add_11$rgb2ycrcb.v:104$71.
  creating $alu model for $macc $verific$sub_44$rgb2ycrcb.v:130$102.
  creating $alu model for $macc $verific$sub_28$rgb2ycrcb.v:117$87.
  creating $alu model for $macc $verific$sub_27$rgb2ycrcb.v:117$86.
  creating $alu model for $macc $verific$sub_45$rgb2ycrcb.v:130$103.
  creating $macc cell for $verific$mult_6$rgb2ycrcb.v:101$66: $auto$alumacc.cc:365:replace_macc$164
  creating $macc cell for $verific$mult_41$rgb2ycrcb.v:127$99: $auto$alumacc.cc:365:replace_macc$165
  creating $macc cell for $verific$mult_4$rgb2ycrcb.v:100$64: $auto$alumacc.cc:365:replace_macc$166
  creating $macc cell for $verific$mult_39$rgb2ycrcb.v:126$97: $auto$alumacc.cc:365:replace_macc$167
  creating $macc cell for $verific$mult_25$rgb2ycrcb.v:115$84: $auto$alumacc.cc:365:replace_macc$168
  creating $macc cell for $verific$mult_23$rgb2ycrcb.v:114$82: $auto$alumacc.cc:365:replace_macc$169
  creating $macc cell for $verific$add_11$rgb2ycrcb.v:104$71: $auto$alumacc.cc:365:replace_macc$170
  creating $macc cell for $verific$mult_8$rgb2ycrcb.v:102$68: $auto$alumacc.cc:365:replace_macc$171
  creating $alu cell for $verific$sub_45$rgb2ycrcb.v:130$103: $auto$alumacc.cc:485:replace_alu$172
  creating $alu cell for $verific$sub_27$rgb2ycrcb.v:117$86: $auto$alumacc.cc:485:replace_alu$175
  creating $alu cell for $verific$sub_28$rgb2ycrcb.v:117$87: $auto$alumacc.cc:485:replace_alu$178
  creating $alu cell for $verific$sub_44$rgb2ycrcb.v:130$102: $auto$alumacc.cc:485:replace_alu$181
  created 4 $alu and 8 $macc cells.

yosys> opt_expr

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.49. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.50. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.51. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.52. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.53. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.54. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.56. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_muxtree

3.57. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.58. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.59. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.60. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.61. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.62. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.63. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
MAX OPT ITERATION = 2

yosys> stat

3.64. Printing statistics.

=== top ===

   Number of wires:                 53
   Number of wire bits:            770
   Number of public wires:          20
   Number of public wire bits:     295
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     $alu                            4
     $and                            3
     $dffe                          15
     $macc                           8
     $not                            3
     $or                             3


yosys> memory -nomap

3.65. Executing MEMORY pass.

yosys> opt_mem

3.65.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.65.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.65.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.65.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.65.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.65.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_share

3.65.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.65.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.65.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> memory_collect

3.65.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.66. Printing statistics.

=== top ===

   Number of wires:                 53
   Number of wire bits:            770
   Number of public wires:          20
   Number of public wire bits:     295
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     $alu                            4
     $and                            3
     $dffe                          15
     $macc                           8
     $not                            3
     $or                             3


yosys> muxpack

3.67. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.

yosys> opt_clean

3.68. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> pmuxtree

3.69. Executing PMUXTREE pass.

yosys> muxpack

3.70. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.

yosys> memory_map

3.71. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.72. Printing statistics.

=== top ===

   Number of wires:                 53
   Number of wire bits:            770
   Number of public wires:          20
   Number of public wire bits:     295
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     $alu                            4
     $and                            3
     $dffe                          15
     $macc                           8
     $not                            3
     $or                             3


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.73. Executing TECHMAP pass (map to technology primitives).

3.73.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.73.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.73.3. Continuing TECHMAP pass.
Using extmapper maccmap for cells of type $macc.
  add 10'1001011001 * \g (10x10 bits, unsigned)
  add \r * 8'10101101 (10x8 bits, unsigned)
  add \g * 9'101010011 (10x9 bits, unsigned)
Using template $paramod$3f130b1307126b2ad59695abd14050e58a80d0ee\_90_alu for cells of type $alu.
Using template $paramod$654c17c720ba40d72484cc48023d39b49a94f78f\_80_rs_alu for cells of type $alu.
  add \b * 5'11101 (10x5 bits, unsigned)
Using extmapper simplemap for cells of type $dffe.
  add { \yr [18:1] 1'0 } (19 bits, unsigned)
  add { \yb [16:2] 2'00 } (17 bits, unsigned)
  add \yg (20 bits, unsigned)
  add \g * 9'110101101 (10x9 bits, unsigned)
Using template $paramod$aac77111ec976962096d49169906492758c7e4cd\_90_alu for cells of type $alu.
Using template $paramod$3ff358d115fdd9adcc51c74aa28caa356ff045b5\_80_rs_alu for cells of type $alu.
  add \b * 7'1010011 (10x7 bits, unsigned)
  add \r * 8'10011001 (10x8 bits, unsigned)
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010100 for cells of type $fa.
Using template $paramod$6fc37af1c109ae54e8aed83fcd995c12d378ce93\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010010 for cells of type $fa.
Using template $paramod$12350b8c8422a70d10b7db4eaae1202a7148b784\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010011 for cells of type $fa.
Using template $paramod$4e6ee5eb737cf7428f8e246e911ae1dac9ae2979\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000001111 for cells of type $fa.
Using template $paramod$67e8f4b8dba01cd3d8fc718acd02276257d102de\_90_alu for cells of type $alu.
Using template $paramod$e161c1674351796cd6dd381e70ff05458bfe7755\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010001 for cells of type $fa.
Using template $paramod$3bb72ad0665cdca279bbc49ed6a39f403f16497f\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
No more expansions possible.
<suppressed ~2973 debug messages>

yosys> stat

3.74. Printing statistics.

=== top ===

   Number of wires:               1632
   Number of wire bits:          29791
   Number of public wires:          20
   Number of public wire bits:     295
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               7174
     $_AND_                       3265
     $_DFFE_PP_                    242
     $_MUX_                        236
     $_NOT_                        235
     $_OR_                        1134
     $_XOR_                       2018
     adder_carry                    44


yosys> opt_expr

3.75. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~4565 debug messages>

yosys> opt_merge -nomux

3.76. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~492 debug messages>
Removed a total of 164 cells.

yosys> opt_muxtree

3.77. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.78. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.79. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.80. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.81. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$831 ($_DFFE_PP_) from module top.

yosys> opt_clean

3.82. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 188 unused cells and 1082 unused wires.
<suppressed ~189 debug messages>

yosys> opt_expr

3.83. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~12 debug messages>

yosys> opt_muxtree

3.84. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.85. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.86. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.87. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.88. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.89. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.90. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
MAX OPT ITERATION = 2

yosys> opt_expr -full

3.91. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~30 debug messages>

yosys> techmap -map +/techmap.v

3.92. Executing TECHMAP pass (map to technology primitives).

3.92.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.92.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.93. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.94. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.95. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.96. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.97. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.98. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.99. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

yosys> opt_expr

3.100. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
MAX OPT ITERATION = 1

yosys> abc -dff

3.101. Executing ABC pass (technology mapping using ABC).

3.101.1. Summary of detected clock domains:
  2257 cells in clk=\clk, en=\ena, arst={ }, srst={ }

3.101.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \ena
Extracted 2213 gates and 2265 wires to a netlist network with 52 inputs and 110 outputs.

3.101.2.1. Executing ABC.

yosys> abc -dff

3.102. Executing ABC pass (technology mapping using ABC).

3.102.1. Summary of detected clock domains:
  1821 cells in clk=\clk, en=\ena, arst={ }, srst={ }

3.102.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \ena
Extracted 1777 gates and 1829 wires to a netlist network with 52 inputs and 110 outputs.

3.102.2.1. Executing ABC.

yosys> abc -dff

3.103. Executing ABC pass (technology mapping using ABC).

3.103.1. Summary of detected clock domains:
  1784 cells in clk=\clk, en=\ena, arst={ }, srst={ }

3.103.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \ena
Extracted 1740 gates and 1792 wires to a netlist network with 52 inputs and 110 outputs.

3.103.2.1. Executing ABC.

yosys> abc -dff

3.104. Executing ABC pass (technology mapping using ABC).

3.104.1. Summary of detected clock domains:
  1781 cells in clk=\clk, en=\ena, arst={ }, srst={ }

3.104.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \ena
Extracted 1737 gates and 1789 wires to a netlist network with 52 inputs and 110 outputs.

3.104.2.1. Executing ABC.

yosys> opt_ffinv

3.105. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.106. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

yosys> opt_merge -nomux

3.107. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.108. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.109. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.110. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.111. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.112. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.113. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 6469 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.114. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
MAX OPT ITERATION = 1

yosys> bmuxmap

3.115. Executing BMUXMAP pass.

yosys> demuxmap

3.116. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_WbXeyP/abc_tmp_1.scr

3.117. Executing ABC pass (technology mapping using ABC).

3.117.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1642 gates and 1694 wires to a netlist network with 52 inputs and 108 outputs.

3.117.1.1. Executing ABC.
DE:   #PIs =  52  #Luts =   511  Max Lvl =   9  Avg Lvl =   5.81  [   0.10 sec. at Pass 0]{firstMap}
DE:   #PIs =  52  #Luts =   464  Max Lvl =  18  Avg Lvl =  10.29  [   9.56 sec. at Pass 1]{initMapFlow}
DE:   #PIs =  52  #Luts =   436  Max Lvl =  16  Avg Lvl =   9.35  [   2.10 sec. at Pass 2]{map}
DE:   #PIs =  52  #Luts =   425  Max Lvl =  14  Avg Lvl =   8.65  [   7.79 sec. at Pass 3]{postMap}
DE:   #PIs =  52  #Luts =   424  Max Lvl =  14  Avg Lvl =   8.63  [   2.67 sec. at Pass 4]{map}
DE:   #PIs =  52  #Luts =   424  Max Lvl =  14  Avg Lvl =   8.63  [   8.58 sec. at Pass 5]{postMap}
DE:   #PIs =  52  #Luts =   420  Max Lvl =  16  Avg Lvl =   9.01  [   2.33 sec. at Pass 6]{map}
DE:   #PIs =  52  #Luts =   419  Max Lvl =  16  Avg Lvl =   8.84  [   7.45 sec. at Pass 7]{postMap}
DE:   #PIs =  52  #Luts =   414  Max Lvl =  16  Avg Lvl =   8.63  [   2.24 sec. at Pass 8]{map}
DE:   #PIs =  52  #Luts =   414  Max Lvl =  16  Avg Lvl =   8.63  [   6.17 sec. at Pass 9]{postMap}
DE:   #PIs =  52  #Luts =   414  Max Lvl =  16  Avg Lvl =   8.63  [   2.44 sec. at Pass 10]{map}
DE:   #PIs =  52  #Luts =   413  Max Lvl =  15  Avg Lvl =   8.68  [   7.08 sec. at Pass 11]{postMap}
DE:   #PIs =  52  #Luts =   411  Max Lvl =  14  Avg Lvl =   8.39  [   2.41 sec. at Pass 12]{map}
DE:   #PIs =  52  #Luts =   411  Max Lvl =  14  Avg Lvl =   8.39  [   6.55 sec. at Pass 13]{postMap}
DE:   #PIs =  52  #Luts =   411  Max Lvl =  14  Avg Lvl =   8.39  [   2.24 sec. at Pass 14]{map}
DE:   #PIs =  52  #Luts =   411  Max Lvl =  14  Avg Lvl =   8.39  [   8.17 sec. at Pass 15]{postMap}
DE:   #PIs =  52  #Luts =   409  Max Lvl =  17  Avg Lvl =   9.32  [  33.69 sec. at Pass 16]{pushMap}
DE:   #PIs =  52  #Luts =   408  Max Lvl =  16  Avg Lvl =   9.32  [   2.58 sec. at Pass 17]{map}
DE:   #PIs =  52  #Luts =   407  Max Lvl =  14  Avg Lvl =   8.60  [   4.92 sec. at Pass 18]{postMap}
DE:   #PIs =  52  #Luts =   405  Max Lvl =  14  Avg Lvl =   8.00  [   1.46 sec. at Pass 19]{map}
DE:   #PIs =  52  #Luts =   405  Max Lvl =  14  Avg Lvl =   8.00  [   7.56 sec. at Pass 20]{postMap}
DE:   #PIs =  52  #Luts =   405  Max Lvl =  14  Avg Lvl =   8.00  [   2.06 sec. at Pass 21]{map}
DE:   #PIs =  52  #Luts =   405  Max Lvl =  14  Avg Lvl =   8.00  [   6.35 sec. at Pass 22]{postMap}
DE:   #PIs =  52  #Luts =   405  Max Lvl =  14  Avg Lvl =   8.00  [  34.32 sec. at Pass 23]{pushMap}
DE:   #PIs =  52  #Luts =   405  Max Lvl =  14  Avg Lvl =   8.00  [   0.66 sec. at Pass 24]{finalMap}

yosys> opt_expr

3.118. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.119. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.120. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.121. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.122. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.123. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.124. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.125. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1694 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.126. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.127. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.128. Printing statistics.

=== top ===

   Number of wires:                416
   Number of wire bits:            878
   Number of public wires:          20
   Number of public wire bits:     295
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                539
     $_DFFE_PP_                     90
     $lut                          405
     adder_carry                    44


yosys> shregmap -minlen 8 -maxlen 20

3.129. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.130. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.131. Printing statistics.

=== top ===

   Number of wires:                416
   Number of wire bits:            878
   Number of public wires:          20
   Number of public wire bits:     295
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                539
     $_DFFE_PP0P_                   90
     $lut                          405
     adder_carry                    44


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.132. Executing TECHMAP pass (map to technology primitives).

3.132.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.132.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.132.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~721 debug messages>

yosys> opt_expr -mux_undef

3.133. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~8409 debug messages>

yosys> simplemap

3.134. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.135. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge

3.136. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~8763 debug messages>
Removed a total of 2921 cells.

yosys> opt_dff -nodffe -nosdff

3.137. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.138. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1249 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.139. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~82 debug messages>

yosys> opt_merge -nomux

3.140. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_muxtree

3.141. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.142. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.143. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.144. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.145. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.146. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.147. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_WbXeyP/abc_tmp_2.scr

3.148. Executing ABC pass (technology mapping using ABC).

3.148.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 3446 gates and 3500 wires to a netlist network with 52 inputs and 108 outputs.

3.148.1.1. Executing ABC.
DE:   #PIs =  52  #Luts =   413  Max Lvl =  12  Avg Lvl =   7.03  [   0.25 sec. at Pass 0]{firstMap}
DE:   #PIs =  52  #Luts =   413  Max Lvl =  12  Avg Lvl =   7.03  [   6.61 sec. at Pass 1]{initMapFlow}
DE:   #PIs =  52  #Luts =   403  Max Lvl =  15  Avg Lvl =   8.33  [   2.93 sec. at Pass 2]{map}
DE:   #PIs =  52  #Luts =   403  Max Lvl =  15  Avg Lvl =   8.33  [   6.93 sec. at Pass 3]{postMap}
DE:   #PIs =  52  #Luts =   403  Max Lvl =  15  Avg Lvl =   8.33  [   2.63 sec. at Pass 4]{map}
DE:   #PIs =  52  #Luts =   403  Max Lvl =  15  Avg Lvl =   8.33  [  10.22 sec. at Pass 5]{postMap}
DE:   #PIs =  52  #Luts =   403  Max Lvl =  15  Avg Lvl =   8.33  [  44.45 sec. at Pass 6]{pushMap}
DE:   #PIs =  52  #Luts =   403  Max Lvl =  15  Avg Lvl =   8.33  [   0.57 sec. at Pass 7]{finalMap}

yosys> opt_expr

3.149. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

yosys> opt_merge -nomux

3.150. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.151. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.152. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

yosys> opt_merge

3.153. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

yosys> opt_share

3.154. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.155. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.156. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1638 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.157. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.158. Executing HIERARCHY pass (managing design hierarchy).

3.158.1. Analyzing design hierarchy..
Top module:  \top

3.158.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

yosys> stat

3.159. Printing statistics.

=== top ===

   Number of wires:                414
   Number of wire bits:            876
   Number of public wires:          20
   Number of public wire bits:     295
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                537
     $lut                          403
     adder_carry                    44
     dffsre                         90


yosys> opt_clean -purge

3.160. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 10 unused wires.
<suppressed ~10 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.161. Executing Verilog backend.
Dumping module `\top'.

Warnings: 15 unique messages, 15 total
End of script. Logfile hash: 024cef0a6c, CPU: user 5.50s system 0.04s, MEM: 65.41 MB peak
Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)
Time spent: 99% 6x abc (1344 sec), 0% 38x opt_expr (2 sec), ...
real 263.65
user 1304.87
sys 44.86
