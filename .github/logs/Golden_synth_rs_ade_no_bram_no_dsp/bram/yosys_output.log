
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.92
 Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k bram_v2.v bram_v1.v

yosys> verific -vlog2k bram_v2.v bram_v1.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'bram_v2.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'bram_v1.v'
VERIFIC-WARNING [VERI-1206] bram_v1.v:39: overwriting previous definition of module 'BRAM'
VERIFIC-INFO [VERI-2142] bram_v2.v:39: previous definition of design element 'BRAM' is here
VERIFIC-WARNING [VERI-1206] bram_v1.v:71: overwriting previous definition of module 'BRAM_32x512'
VERIFIC-INFO [VERI-2142] bram_v2.v:71: previous definition of design element 'BRAM_32x512' is here
VERIFIC-WARNING [VERI-1206] bram_v1.v:104: overwriting previous definition of module 'BRAM_16x1024'
VERIFIC-INFO [VERI-2142] bram_v2.v:104: previous definition of design element 'BRAM_16x1024' is here
VERIFIC-WARNING [VERI-1206] bram_v1.v:137: overwriting previous definition of module 'BRAM_8x2048'
VERIFIC-INFO [VERI-2142] bram_v2.v:137: previous definition of design element 'BRAM_8x2048' is here
VERIFIC-WARNING [VERI-1206] bram_v1.v:169: overwriting previous definition of module 'BRAM_4x4096'
VERIFIC-INFO [VERI-2142] bram_v2.v:169: previous definition of design element 'BRAM_4x4096' is here

yosys> synth_rs -top BRAM -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.79

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top BRAM

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] bram_v1.v:1: compiling module 'BRAM'
VERIFIC-INFO [VERI-2571] bram_v1.v:22: extracting RAM for identifier 'memory'
Importing module BRAM.

3.4.1. Analyzing design hierarchy..
Top module:  \BRAM

3.4.2. Analyzing design hierarchy..
Top module:  \BRAM
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.6. Executing BMUXMAP pass.

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).

yosys> bmuxmap

3.9. Executing BMUXMAP pass.

yosys> demuxmap

3.10. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.11. Executing TRIBUF pass.

yosys> deminout

3.12. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_clean

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 1 unused cells and 6 unused wires.
<suppressed ~4 debug messages>

yosys> check

3.15. Executing CHECK pass (checking for obvious problems).
Checking module BRAM...
Found and reported 0 problems.

yosys> opt_expr

3.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.18. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.19. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.20. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_share

3.21. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.22. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$rq_reg$bram_v1.v:30$36 ($aldff) from module BRAM.

yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
MAX OPT ITERATION = 1

yosys> fsm -encoding binary

3.25. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.25.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> fsm_opt

3.25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.28. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.29. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.30. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_share

3.31. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.32. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$rq_reg$bram_v1.v:30$36 ($dff) from module BRAM (D = $verific$n39$16, Q = \rq).

yosys> opt_clean

3.33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_muxtree

3.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_share

3.38. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.39. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
MAX OPT ITERATION = 2

yosys> wreduce -keepdc

3.42. Executing WREDUCE pass (reducing word size of cells).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v1.v:22$10 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v1.v:22$11 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v1.v:22$4 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v1.v:22$5 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v1.v:22$6 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v1.v:22$7 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v1.v:22$8 (memory).
Removed top 28 address bits (of 32) from memory init port BRAM.$verific$memory$bram_v1.v:22$9 (memory).

yosys> peepopt

3.43. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> bmuxmap

3.45. Executing BMUXMAP pass.

yosys> demuxmap

3.46. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.47. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module BRAM:
  created 0 $alu and 0 $macc cells.

yosys> opt_expr

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.49. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.50. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.51. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.52. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_share

3.53. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.54. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.55. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.56. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
MAX OPT ITERATION = 1

yosys> stat

3.57. Printing statistics.

=== BRAM ===

   Number of wires:                 14
   Number of wire bits:            185
   Number of public wires:           8
   Number of public wire bits:     117
   Number of memories:               1
   Number of memory bits:          288
   Number of processes:              0
   Number of cells:                 16
     $and                            1
     $dffe                           1
     $meminit                        8
     $memrd_v2                       1
     $memwr_v2                       1
     $mux                            1
     $not                            1
     $reduce_or                      2


yosys> memory -nomap

3.58. Executing MEMORY pass.

yosys> opt_mem

3.58.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.58.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.58.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing BRAM.memory write port 0.

yosys> memory_bmux2rom

3.58.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.58.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\memory'[0] in module `\BRAM': merging output FF to cell.
    Write port 0: non-transparent.

yosys> opt_clean

3.58.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 3 unused cells and 35 unused wires.
<suppressed ~4 debug messages>

yosys> memory_share

3.58.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.58.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.58.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> memory_collect

3.58.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.59. Printing statistics.

=== BRAM ===

   Number of wires:                 11
   Number of wire bits:            120
   Number of public wires:           8
   Number of public wire bits:     117
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $and                            1
     $mem_v2                         1
     $not                            1
     $reduce_or                      1


yosys> muxpack

3.60. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.

yosys> opt_clean

3.61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> pmuxtree

3.62. Executing PMUXTREE pass.

yosys> muxpack

3.63. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.

yosys> memory_map

3.64. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \memory in module \BRAM:
  created 9 $dff cells and 0 static cells of width 32.
Extracted data FF from read port 0 of BRAM.memory: $\memory$rdreg[0]
  read interface: 1 $dff and 15 $mux cells.
  write interface: 9 write mux blocks.

yosys> stat

3.65. Printing statistics.

=== BRAM ===

   Number of wires:                102
   Number of wire bits:           2009
   Number of public wires:          17
   Number of public wire bits:     405
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 70
     $and                           26
     $dff                            9
     $dffe                           1
     $eq                             8
     $mux                           24
     $not                            1
     $reduce_or                      1


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.66. Executing TECHMAP pass (map to technology primitives).

3.66.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.66.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.66.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $eq.
No more expansions possible.
<suppressed ~141 debug messages>

yosys> stat

3.67. Printing statistics.

=== BRAM ===

   Number of wires:                121
   Number of wire bits:           2029
   Number of public wires:          17
   Number of public wire bits:     405
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1135
     $_AND_                         26
     $_DFFE_PP_                     32
     $_DFF_P_                      288
     $_MUX_                        768
     $_NOT_                          9
     $_OR_                           4
     $_XOR_                          8


yosys> opt_expr

3.68. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
<suppressed ~12 debug messages>

yosys> opt_merge -nomux

3.69. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_muxtree

3.70. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.71. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.72. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_share

3.73. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.74. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.75. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 43 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.76. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
MAX OPT ITERATION = 1

yosys> opt_expr -full

3.77. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
<suppressed ~273 debug messages>

yosys> techmap -map +/techmap.v

3.78. Executing TECHMAP pass (map to technology primitives).

3.78.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.78.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.79. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.80. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.81. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.82. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.83. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.84. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.85. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.86. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
MAX OPT ITERATION = 1

yosys> abc -dff

3.87. Executing ABC pass (technology mapping using ABC).

3.87.1. Summary of detected clock domains:
  32 cells in clk=\clk, en=\rce, arst={ }, srst={ }
  867 cells in clk=\clk, en={ }, arst={ }, srst={ }

3.87.2. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \rce
Extracted 32 gates and 64 wires to a netlist network with 32 inputs and 32 outputs.

3.87.2.1. Executing ABC.

3.87.3. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 867 gates and 913 wires to a netlist network with 46 inputs and 32 outputs.

3.87.3.1. Executing ABC.

yosys> abc -dff

3.88. Executing ABC pass (technology mapping using ABC).

3.88.1. Summary of detected clock domains:
  160 cells in clk=\clk, en=\rce, arst={ }, srst={ }
  727 cells in clk=\clk, en={ }, arst={ }, srst={ }

3.88.2. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \rce
Extracted 160 gates and 324 wires to a netlist network with 164 inputs and 32 outputs.

3.88.2.1. Executing ABC.

3.88.3. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 727 gates and 771 wires to a netlist network with 44 inputs and 160 outputs.

3.88.3.1. Executing ABC.

yosys> abc -dff

3.89. Executing ABC pass (technology mapping using ABC).

3.89.1. Summary of detected clock domains:
  160 cells in clk=\clk, en=\rce, arst={ }, srst={ }
  727 cells in clk=\clk, en={ }, arst={ }, srst={ }

3.89.2. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \rce
Extracted 160 gates and 324 wires to a netlist network with 164 inputs and 32 outputs.

3.89.2.1. Executing ABC.

3.89.3. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 727 gates and 771 wires to a netlist network with 44 inputs and 160 outputs.

3.89.3.1. Executing ABC.

yosys> abc -dff

3.90. Executing ABC pass (technology mapping using ABC).

3.90.1. Summary of detected clock domains:
  160 cells in clk=\clk, en=\rce, arst={ }, srst={ }
  727 cells in clk=\clk, en={ }, arst={ }, srst={ }

3.90.2. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by \rce
Extracted 160 gates and 324 wires to a netlist network with 164 inputs and 32 outputs.

3.90.2.1. Executing ABC.

3.90.3. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 727 gates and 771 wires to a netlist network with 44 inputs and 160 outputs.

3.90.3.1. Executing ABC.

yosys> opt_ffinv

3.91. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.92. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.93. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.94. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.95. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.96. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_share

3.97. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.98. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4905 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[31], Q = $abc$4617$lo287).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4904 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[30], Q = $abc$4617$lo286).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4903 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[29], Q = $abc$4617$lo285).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4902 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[28], Q = $abc$4617$lo284).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4901 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[27], Q = $abc$4617$lo283).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4900 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[26], Q = $abc$4617$lo282).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4899 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[25], Q = $abc$4617$lo281).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4898 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[24], Q = $abc$4617$lo280).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4897 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[23], Q = $abc$4617$lo279).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4896 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[22], Q = $abc$4617$lo278).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4895 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[21], Q = $abc$4617$lo277).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4894 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[20], Q = $abc$4617$lo276).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4893 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[19], Q = $abc$4617$lo275).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4892 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[18], Q = $abc$4617$lo274).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4891 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[17], Q = $abc$4617$lo273).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4890 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[16], Q = $abc$4617$lo272).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4889 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[15], Q = $abc$4617$lo271).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4888 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[14], Q = $abc$4617$lo270).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4887 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[13], Q = $abc$4617$lo269).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4886 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[12], Q = $abc$4617$lo268).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4885 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[11], Q = $abc$4617$lo267).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4884 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[10], Q = $abc$4617$lo266).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4883 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[9], Q = $abc$4617$lo265).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4882 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[8], Q = $abc$4617$lo264).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4881 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[7], Q = $abc$4617$lo263).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4880 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[6], Q = $abc$4617$lo262).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4879 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[5], Q = $abc$4617$lo261).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4878 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[4], Q = $abc$4617$lo260).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4877 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[3], Q = $abc$4617$lo259).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4876 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[2], Q = $abc$4617$lo258).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4875 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[1], Q = $abc$4617$lo257).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4874 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[0], Q = $abc$4617$lo256).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4873 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[31], Q = $abc$4617$lo255).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4872 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[30], Q = $abc$4617$lo254).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4871 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[29], Q = $abc$4617$lo253).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4870 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[28], Q = $abc$4617$lo252).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4869 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[27], Q = $abc$4617$lo251).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4868 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[26], Q = $abc$4617$lo250).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4867 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[25], Q = $abc$4617$lo249).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4866 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[24], Q = $abc$4617$lo248).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4865 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[23], Q = $abc$4617$lo247).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4864 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[22], Q = $abc$4617$lo246).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4863 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[21], Q = $abc$4617$lo245).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4862 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[20], Q = $abc$4617$lo244).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4861 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[19], Q = $abc$4617$lo243).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4860 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[18], Q = $abc$4617$lo242).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4859 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[17], Q = $abc$4617$lo241).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4858 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[16], Q = $abc$4617$lo240).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4857 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[15], Q = $abc$4617$lo239).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4856 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[14], Q = $abc$4617$lo238).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4855 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[13], Q = $abc$4617$lo237).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4854 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[12], Q = $abc$4617$lo236).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4853 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[11], Q = $abc$4617$lo235).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4852 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[10], Q = $abc$4617$lo234).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4851 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[9], Q = $abc$4617$lo233).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4850 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[8], Q = $abc$4617$lo232).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4849 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[7], Q = $abc$4617$lo231).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4848 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[6], Q = $abc$4617$lo230).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4847 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[5], Q = $abc$4617$lo229).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4846 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[4], Q = $abc$4617$lo228).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4845 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[3], Q = $abc$4617$lo227).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4844 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[2], Q = $abc$4617$lo226).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4843 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[1], Q = $abc$4617$lo225).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4842 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[0], Q = $abc$4617$lo224).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4841 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[31], Q = $abc$4617$lo223).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4840 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[30], Q = $abc$4617$lo222).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4839 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[29], Q = $abc$4617$lo221).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4838 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[28], Q = $abc$4617$lo220).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4837 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[27], Q = $abc$4617$lo219).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4836 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[26], Q = $abc$4617$lo218).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4835 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[25], Q = $abc$4617$lo217).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4834 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[24], Q = $abc$4617$lo216).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4833 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[23], Q = $abc$4617$lo215).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4832 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[22], Q = $abc$4617$lo214).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4831 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[21], Q = $abc$4617$lo213).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4830 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[20], Q = $abc$4617$lo212).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4829 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[19], Q = $abc$4617$lo211).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4828 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[18], Q = $abc$4617$lo210).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4827 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[17], Q = $abc$4617$lo209).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4826 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[16], Q = $abc$4617$lo208).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4825 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[15], Q = $abc$4617$lo207).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4824 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[14], Q = $abc$4617$lo206).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4823 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[13], Q = $abc$4617$lo205).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4822 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[12], Q = $abc$4617$lo204).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4821 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[11], Q = $abc$4617$lo203).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4820 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[10], Q = $abc$4617$lo202).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4819 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[9], Q = $abc$4617$lo201).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4818 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[8], Q = $abc$4617$lo200).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4817 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[7], Q = $abc$4617$lo199).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4816 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[6], Q = $abc$4617$lo198).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4815 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[5], Q = $abc$4617$lo197).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4814 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[4], Q = $abc$4617$lo196).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4813 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[3], Q = $abc$4617$lo195).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4812 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[2], Q = $abc$4617$lo194).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4811 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[1], Q = $abc$4617$lo193).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4810 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[0], Q = $abc$4617$lo192).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4809 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[31], Q = $abc$4617$lo191).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4808 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[30], Q = $abc$4617$lo190).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4807 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[29], Q = $abc$4617$lo189).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4806 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[28], Q = $abc$4617$lo188).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4805 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[27], Q = $abc$4617$lo187).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4804 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[26], Q = $abc$4617$lo186).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4803 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[25], Q = $abc$4617$lo185).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4802 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[24], Q = $abc$4617$lo184).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4801 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[23], Q = $abc$4617$lo183).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4800 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[22], Q = $abc$4617$lo182).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4799 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[21], Q = $abc$4617$lo181).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4798 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[20], Q = $abc$4617$lo180).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4797 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[19], Q = $abc$4617$lo179).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4796 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[18], Q = $abc$4617$lo178).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4795 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[17], Q = $abc$4617$lo177).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4794 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[16], Q = $abc$4617$lo176).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4793 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[15], Q = $abc$4617$lo175).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4792 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[14], Q = $abc$4617$lo174).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4791 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[13], Q = $abc$4617$lo173).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4790 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[12], Q = $abc$4617$lo172).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4789 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[11], Q = $abc$4617$lo171).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4788 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[10], Q = $abc$4617$lo170).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4787 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[9], Q = $abc$4617$lo169).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4786 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[8], Q = $abc$4617$lo168).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4785 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[7], Q = $abc$4617$lo167).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4784 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[6], Q = $abc$4617$lo166).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4783 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[5], Q = $abc$4617$lo165).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4782 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[4], Q = $abc$4617$lo164).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4781 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[3], Q = $abc$4617$lo163).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4780 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[2], Q = $abc$4617$lo162).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4779 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[1], Q = $abc$4617$lo161).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4778 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[0], Q = $abc$4617$lo160).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4777 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[31], Q = $abc$4617$lo159).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4776 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[30], Q = $abc$4617$lo158).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4775 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[29], Q = $abc$4617$lo157).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4774 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[28], Q = $abc$4617$lo156).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4773 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[27], Q = $abc$4617$lo155).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4772 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[26], Q = $abc$4617$lo154).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4771 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[25], Q = $abc$4617$lo153).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4770 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[24], Q = $abc$4617$lo152).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4769 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[23], Q = $abc$4617$lo151).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4768 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[22], Q = $abc$4617$lo150).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4767 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[21], Q = $abc$4617$lo149).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4766 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[20], Q = $abc$4617$lo148).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4765 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[19], Q = $abc$4617$lo147).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4764 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[18], Q = $abc$4617$lo146).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4763 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[17], Q = $abc$4617$lo145).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4762 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[16], Q = $abc$4617$lo144).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4761 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[15], Q = $abc$4617$lo143).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4760 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[14], Q = $abc$4617$lo142).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4759 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[13], Q = $abc$4617$lo141).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4758 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[12], Q = $abc$4617$lo140).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4757 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[11], Q = $abc$4617$lo139).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4756 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[10], Q = $abc$4617$lo138).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4755 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[9], Q = $abc$4617$lo137).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4754 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[8], Q = $abc$4617$lo136).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4753 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[7], Q = $abc$4617$lo135).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4752 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[6], Q = $abc$4617$lo134).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4751 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[5], Q = $abc$4617$lo133).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4750 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[4], Q = $abc$4617$lo132).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4749 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[3], Q = $abc$4617$lo131).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4748 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[2], Q = $abc$4617$lo130).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4747 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[1], Q = $abc$4617$lo129).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4746 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[0], Q = $abc$4617$lo128).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4745 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[31], Q = $abc$4617$lo127).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4744 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[30], Q = $abc$4617$lo126).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4743 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[29], Q = $abc$4617$lo125).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4742 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[28], Q = $abc$4617$lo124).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4741 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[27], Q = $abc$4617$lo123).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4740 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[26], Q = $abc$4617$lo122).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4739 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[25], Q = $abc$4617$lo121).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4738 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[24], Q = $abc$4617$lo120).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4737 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[23], Q = $abc$4617$lo119).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4736 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[22], Q = $abc$4617$lo118).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4735 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[21], Q = $abc$4617$lo117).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4734 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[20], Q = $abc$4617$lo116).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4733 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[19], Q = $abc$4617$lo115).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4732 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[18], Q = $abc$4617$lo114).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4731 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[17], Q = $abc$4617$lo113).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4730 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[16], Q = $abc$4617$lo112).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4729 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[15], Q = $abc$4617$lo111).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4728 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[14], Q = $abc$4617$lo110).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4727 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[13], Q = $abc$4617$lo109).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4726 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[12], Q = $abc$4617$lo108).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4725 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[11], Q = $abc$4617$lo107).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4724 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[10], Q = $abc$4617$lo106).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4723 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[9], Q = $abc$4617$lo105).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4722 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[8], Q = $abc$4617$lo104).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4721 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[7], Q = $abc$4617$lo103).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4720 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[6], Q = $abc$4617$lo102).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4719 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[5], Q = $abc$4617$lo101).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4718 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[4], Q = $abc$4617$lo100).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4717 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[3], Q = $abc$4617$lo099).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4716 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[2], Q = $abc$4617$lo098).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4715 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[1], Q = $abc$4617$lo097).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4714 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[0], Q = $abc$4617$lo096).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4713 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[31], Q = $abc$4617$lo095).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4712 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[30], Q = $abc$4617$lo094).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4711 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[29], Q = $abc$4617$lo093).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4710 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[28], Q = $abc$4617$lo092).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4709 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[27], Q = $abc$4617$lo091).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4708 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[26], Q = $abc$4617$lo090).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4707 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[25], Q = $abc$4617$lo089).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4706 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[24], Q = $abc$4617$lo088).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4705 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[23], Q = $abc$4617$lo087).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4704 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[22], Q = $abc$4617$lo086).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4703 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[21], Q = $abc$4617$lo085).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4702 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[20], Q = $abc$4617$lo084).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4701 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[19], Q = $abc$4617$lo083).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4700 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[18], Q = $abc$4617$lo082).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4699 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[17], Q = $abc$4617$lo081).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4698 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[16], Q = $abc$4617$lo080).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4697 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[15], Q = $abc$4617$lo079).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4696 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[14], Q = $abc$4617$lo078).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4695 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[13], Q = $abc$4617$lo077).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4694 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[12], Q = $abc$4617$lo076).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4693 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[11], Q = $abc$4617$lo075).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4692 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[10], Q = $abc$4617$lo074).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4691 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[9], Q = $abc$4617$lo073).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4690 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[8], Q = $abc$4617$lo072).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4689 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[7], Q = $abc$4617$lo071).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4688 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[6], Q = $abc$4617$lo070).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4687 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[5], Q = $abc$4617$lo069).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4686 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[4], Q = $abc$4617$lo068).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4685 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[3], Q = $abc$4617$lo067).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4684 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[2], Q = $abc$4617$lo066).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4683 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[1], Q = $abc$4617$lo065).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4682 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[0], Q = $abc$4617$lo064).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4681 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[31], Q = $abc$4617$lo063).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4680 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[30], Q = $abc$4617$lo062).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4679 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[29], Q = $abc$4617$lo061).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4678 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[28], Q = $abc$4617$lo060).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4677 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[27], Q = $abc$4617$lo059).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4676 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[26], Q = $abc$4617$lo058).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4675 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[25], Q = $abc$4617$lo057).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4674 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[24], Q = $abc$4617$lo056).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4673 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[23], Q = $abc$4617$lo055).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4672 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[22], Q = $abc$4617$lo054).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4671 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[21], Q = $abc$4617$lo053).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4670 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[20], Q = $abc$4617$lo052).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4669 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[19], Q = $abc$4617$lo051).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4668 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[18], Q = $abc$4617$lo050).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4667 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[17], Q = $abc$4617$lo049).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4666 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[16], Q = $abc$4617$lo048).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4665 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[15], Q = $abc$4617$lo047).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4664 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[14], Q = $abc$4617$lo046).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4663 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[13], Q = $abc$4617$lo045).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4662 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[12], Q = $abc$4617$lo044).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4661 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[11], Q = $abc$4617$lo043).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4660 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[10], Q = $abc$4617$lo042).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4659 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[9], Q = $abc$4617$lo041).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4658 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[8], Q = $abc$4617$lo040).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4657 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[7], Q = $abc$4617$lo039).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4656 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[6], Q = $abc$4617$lo038).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4655 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[5], Q = $abc$4617$lo037).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4654 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[4], Q = $abc$4617$lo036).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4653 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[3], Q = $abc$4617$lo035).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4652 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[2], Q = $abc$4617$lo034).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4651 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[1], Q = $abc$4617$lo033).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4650 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[0], Q = $abc$4617$lo032).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4649 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[31], Q = $abc$4617$lo031).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4648 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[30], Q = $abc$4617$lo030).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4647 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[29], Q = $abc$4617$lo029).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4646 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[28], Q = $abc$4617$lo028).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4645 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[27], Q = $abc$4617$lo027).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4644 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[26], Q = $abc$4617$lo026).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4643 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[25], Q = $abc$4617$lo025).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4642 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[24], Q = $abc$4617$lo024).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4641 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[23], Q = $abc$4617$lo023).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4640 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[22], Q = $abc$4617$lo022).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4639 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[21], Q = $abc$4617$lo021).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4638 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[20], Q = $abc$4617$lo020).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4637 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[19], Q = $abc$4617$lo019).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4636 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[18], Q = $abc$4617$lo018).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4635 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[17], Q = $abc$4617$lo017).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4634 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[16], Q = $abc$4617$lo016).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4633 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[15], Q = $abc$4617$lo015).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4632 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[14], Q = $abc$4617$lo014).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4631 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[13], Q = $abc$4617$lo013).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4630 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[12], Q = $abc$4617$lo012).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4629 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[11], Q = $abc$4617$lo011).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4628 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[10], Q = $abc$4617$lo010).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4627 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[9], Q = $abc$4617$lo009).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4626 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[8], Q = $abc$4617$lo008).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4625 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[7], Q = $abc$4617$lo007).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4624 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[6], Q = $abc$4617$lo006).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4623 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[5], Q = $abc$4617$lo005).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4622 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[4], Q = $abc$4617$lo004).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4621 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[3], Q = $abc$4617$lo003).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4620 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[2], Q = $abc$4617$lo002).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4619 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[1], Q = $abc$4617$lo001).
Adding EN signal on $abc$4617$auto$blifparse.cc:362:parse_blif$4618 ($_DFF_P_) from module BRAM (D = $abc$4617$wd[0], Q = $abc$4617$lo000).

yosys> opt_clean

3.99. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 288 unused cells and 3999 unused wires.
<suppressed ~298 debug messages>

yosys> opt_expr

3.100. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_muxtree

3.101. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.102. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.103. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_share

3.104. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.105. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.106. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..

yosys> opt_expr

3.107. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
MAX OPT ITERATION = 2

yosys> bmuxmap

3.108. Executing BMUXMAP pass.

yosys> demuxmap

3.109. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_vagwV2/abc_tmp_1.scr

3.110. Executing ABC pass (technology mapping using ABC).

3.110.1. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Extracted 279 gates and 581 wires to a netlist network with 302 inputs and 41 outputs.

3.110.1.1. Executing ABC.
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.18 sec. at Pass 0]{firstMap}
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   1.25 sec. at Pass 1]{initMapFlow}
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.60 sec. at Pass 2]{map}
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.90 sec. at Pass 3]{postMap}
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.65 sec. at Pass 4]{map}
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.97 sec. at Pass 5]{postMap}
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   1.98 sec. at Pass 6]{pushMap}
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.55 sec. at Pass 7]{finalMap}

yosys> opt_expr

3.111. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.112. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.113. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.114. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.115. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_share

3.116. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.117. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.118. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 581 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.119. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.120. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.121. Printing statistics.

=== BRAM ===

   Number of wires:                402
   Number of wire bits:            511
   Number of public wires:           8
   Number of public wire bits:     117
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                426
     $_DFFE_PN_                    288
     $_DFFE_PP_                     32
     $lut                          106


yosys> shregmap -minlen 8 -maxlen 20

3.122. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.123. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.124. Printing statistics.

=== BRAM ===

   Number of wires:                402
   Number of wire bits:            511
   Number of public wires:           8
   Number of public wire bits:     117
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                426
     $_DFFE_PP0N_                  288
     $_DFFE_PP0P_                   32
     $lut                          106


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.125. Executing TECHMAP pass (map to technology primitives).

3.125.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.125.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.125.3. Continuing TECHMAP pass.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFFE_PP0N_ for cells of type $_DFFE_PP0N_.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~1170 debug messages>

yosys> opt_expr -mux_undef

3.126. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
<suppressed ~3404 debug messages>

yosys> simplemap

3.127. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.128. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge

3.129. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
<suppressed ~4404 debug messages>
Removed a total of 1468 cells.

yosys> opt_dff -nodffe -nosdff

3.130. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.131. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 2319 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.132. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
<suppressed ~480 debug messages>

yosys> opt_merge -nomux

3.133. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.134. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.135. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.136. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_share

3.137. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.138. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.139. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 34 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.140. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_vagwV2/abc_tmp_2.scr

3.141. Executing ABC pass (technology mapping using ABC).

3.141.1. Extracting gate netlist of module `\BRAM' to `<abc-temp-dir>/input.blif'..
Extracted 622 gates and 926 wires to a netlist network with 302 inputs and 41 outputs.

3.141.1.1. Executing ABC.
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.20 sec. at Pass 0]{firstMap}
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   1.63 sec. at Pass 1]{initMapFlow}
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.45 sec. at Pass 2]{map}
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.91 sec. at Pass 3]{postMap}
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.97 sec. at Pass 4]{map}
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   1.39 sec. at Pass 5]{postMap}
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   2.53 sec. at Pass 6]{pushMap}
DE:   #PIs = 302  #Luts =   106  Max Lvl =   2  Avg Lvl =   2.00  [   0.58 sec. at Pass 7]{finalMap}

yosys> opt_expr

3.142. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.

yosys> opt_merge -nomux

3.143. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.144. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BRAM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.145. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BRAM.
Performed a total of 0 changes.

yosys> opt_merge

3.146. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BRAM'.
Removed a total of 0 cells.

yosys> opt_share

3.147. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.148. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.149. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 858 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.150. Executing OPT_EXPR pass (perform const folding).
Optimizing module BRAM.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.151. Executing HIERARCHY pass (managing design hierarchy).

3.151.1. Analyzing design hierarchy..
Top module:  \BRAM

3.151.2. Analyzing design hierarchy..
Top module:  \BRAM
Removed 0 unused modules.

yosys> stat

3.152. Printing statistics.

=== BRAM ===

   Number of wires:                402
   Number of wire bits:            511
   Number of public wires:           8
   Number of public wire bits:     117
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                426
     $lut                          106
     dffsre                        320


yosys> opt_clean -purge

3.153. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BRAM..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.154. Executing Verilog backend.
Dumping module `\BRAM'.

Warnings: 5 unique messages, 5 total
End of script. Logfile hash: 8351acef73, CPU: user 2.14s system 0.03s, MEM: 52.09 MB peak
Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)
Time spent: 94% 6x abc (32 sec), 1% 25x opt_expr (0 sec), ...
real 25.68
user 31.35
sys 3.52
