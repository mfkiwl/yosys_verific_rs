
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.92
 Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b05.vhd

yosys> verific -vhdl b05.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b05.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b05.vhd:1: analyzing entity 'b05'
VERIFIC-INFO [VHDL-1010] b05.vhd:12: analyzing architecture 'behav'

yosys> synth_rs -top b05 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.79

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b05

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b05.vhd:1: processing 'b05(BEHAV)'
VERIFIC-WARNING [VHDL-1840] b05.vhd:242: latch inferred for net 'TN[8]'
Importing module b05.

3.4.1. Analyzing design hierarchy..
Top module:  \b05

3.4.2. Analyzing design hierarchy..
Top module:  \b05
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~26 debug messages>

yosys> bmuxmap

3.6. Executing BMUXMAP pass.

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).

yosys> bmuxmap

3.9. Executing BMUXMAP pass.

yosys> demuxmap

3.10. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.11. Executing TRIBUF pass.

yosys> deminout

3.12. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~14 debug messages>

yosys> opt_clean

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 5 unused cells and 65 unused wires.
<suppressed ~28 debug messages>

yosys> check

3.15. Executing CHECK pass (checking for obvious problems).
Checking module b05...
Found and reported 0 problems.

yosys> opt_expr

3.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_merge -nomux

3.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.18. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $verific$i361$b05.vhd:284$340: \FLAG -> 1'0
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

yosys> opt_reduce

3.19. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
  Optimizing cells in module \b05.
Performed a total of 1 changes.

yosys> opt_merge

3.20. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_share

3.21. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.22. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$TEMP_reg$b05.vhd:308$369 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$STATO_reg$b05.vhd:308$364 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$RES_DISP_reg$b05.vhd:308$365 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$NUM_reg$b05.vhd:308$367 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$MAX_reg$b05.vhd:308$370 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$MAR_reg$b05.vhd:308$368 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$FLAG_reg$b05.vhd:308$371 ($aldff) from module b05.
Changing const-value async load to async reset on $verific$EN_DISP_reg$b05.vhd:308$366 ($aldff) from module b05.

yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_muxtree

3.25. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

yosys> opt_reduce

3.26. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.28. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.29. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

yosys> opt_expr

3.31. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
MAX OPT ITERATION = 2

yosys> fsm -encoding binary

3.32. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.32.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking b05.MAX as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking b05.TEMP as FSM state register:
    Users of register don't seem to benefit from recoding.

yosys> fsm_extract

3.32.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.32.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

yosys> fsm_opt

3.32.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.32.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.32.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.32.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_merge -nomux

3.34. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

yosys> opt_reduce

3.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.38. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.39. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$TEMP_reg$b05.vhd:308$369 ($adff) from module b05 (D = $auto$bmuxmap.cc:58:execute$481, Q = \TEMP).
Adding EN signal on $verific$RES_DISP_reg$b05.vhd:308$365 ($adff) from module b05 (D = $auto$bmuxmap.cc:58:execute$416, Q = \RES_DISP).
Adding EN signal on $verific$NUM_reg$b05.vhd:308$367 ($adff) from module b05 (D = $auto$bmuxmap.cc:58:execute$446, Q = \NUM).
Adding EN signal on $verific$MAX_reg$b05.vhd:308$370 ($adff) from module b05 (D = $auto$bmuxmap.cc:58:execute$471, Q = \MAX).
Adding EN signal on $verific$MAR_reg$b05.vhd:308$368 ($adff) from module b05 (D = $auto$bmuxmap.cc:58:execute$456, Q = \MAR).
Adding EN signal on $verific$FLAG_reg$b05.vhd:308$371 ($adff) from module b05 (D = $auto$bmuxmap.cc:58:execute$461, Q = \FLAG).
Adding EN signal on $verific$EN_DISP_reg$b05.vhd:308$366 ($adff) from module b05 (D = $auto$bmuxmap.cc:58:execute$426, Q = \EN_DISP).

yosys> opt_clean

3.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

yosys> opt_expr

3.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~13 debug messages>

yosys> opt_muxtree

3.42. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

yosys> opt_reduce

3.43. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.44. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

yosys> opt_share

3.45. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.46. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 12 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_muxtree

3.49. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

yosys> opt_reduce

3.50. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.52. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.53. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

yosys> opt_expr

3.55. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
MAX OPT ITERATION = 3

yosys> wreduce -keepdc

3.56. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port B of cell b05.$auto$opt_dff.cc:195:make_patterns_logic$576 ($ne).
Removed top 1 bits (of 2) from port B of cell b05.$auto$opt_dff.cc:195:make_patterns_logic$532 ($ne).
Removed top 1 bits (of 5) from port B of cell b05.$auto$opt_dff.cc:195:make_patterns_logic$552 ($ne).
Removed top 1 bits (of 4) from port B of cell b05.$auto$opt_dff.cc:195:make_patterns_logic$556 ($ne).
Removed top 1 bits (of 5) from port B of cell b05.$auto$opt_dff.cc:195:make_patterns_logic$539 ($ne).
Removed top 1 bits (of 4) from port B of cell b05.$auto$opt_dff.cc:195:make_patterns_logic$541 ($ne).
Removed top 1 bits (of 3) from port B of cell b05.$auto$opt_dff.cc:195:make_patterns_logic$547 ($ne).
Removed top 1 bits (of 6) from port B of cell b05.$auto$opt_dff.cc:195:make_patterns_logic$554 ($ne).
Removed top 1 bits (of 10) from port Y of cell b05.$verific$sub_4$b05.vhd:60$175 ($sub).
Removed top 1 bits (of 10) from port A of cell b05.$verific$sub_4$b05.vhd:60$175 ($sub).
Removed top 1 bits (of 10) from port B of cell b05.$verific$sub_4$b05.vhd:60$175 ($sub).
Removed top 1 bits (of 9) from port A of cell b05.$verific$LessThan_6$b05.vhd:61$178 ($lt).
Removed top 1 bits (of 10) from port Y of cell b05.$verific$sub_19$b05.vhd:73$186 ($sub).
Removed top 1 bits (of 10) from port A of cell b05.$verific$sub_19$b05.vhd:73$186 ($sub).
Removed top 1 bits (of 10) from port B of cell b05.$verific$sub_19$b05.vhd:73$186 ($sub).
Removed top 1 bits (of 9) from port A of cell b05.$verific$LessThan_21$b05.vhd:74$189 ($lt).
Removed top 1 bits (of 9) from port A of cell b05.$verific$LessThan_39$b05.vhd:101$201 ($lt).
Removed top 1 bits (of 6) from port A of cell b05.$verific$unary_minus_41$b05.vhd:103$202 ($neg).
Removed top 2 bits (of 4) from port B of cell b05.$auto$opt_dff.cc:195:make_patterns_logic$528 ($ne).
Removed top 2 bits (of 18) from mux cell b05.$auto$bmuxmap.cc:60:execute$384 ($mux).
Removed top 1 bits (of 18) from mux cell b05.$auto$bmuxmap.cc:60:execute$383 ($mux).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_47$b05.vhd:108$212 ($lt).
Removed top 1 bits (of 8) from port B of cell b05.$verific$sub_49$b05.vhd:110$213 ($sub).
Removed top 2 bits (of 18) from mux cell b05.$auto$bmuxmap.cc:60:execute$382 ($mux).
Removed top 1 bits (of 7) from mux cell b05.$verific$mux_52$b05.vhd:113$216 ($mux).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_54$b05.vhd:114$218 ($lt).
Removed top 2 bits (of 9) from port B of cell b05.$verific$sub_56$b05.vhd:116$220 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_58$b05.vhd:118$222 ($lt).
Removed top 2 bits (of 9) from port B of cell b05.$verific$sub_60$b05.vhd:120$224 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_62$b05.vhd:122$226 ($lt).
Removed top 3 bits (of 18) from mux cell b05.$auto$bmuxmap.cc:60:execute$379 ($mux).
Removed top 2 bits (of 9) from port B of cell b05.$verific$sub_64$b05.vhd:124$228 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_66$b05.vhd:126$230 ($lt).
Removed top 3 bits (of 9) from port B of cell b05.$verific$sub_68$b05.vhd:128$232 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_70$b05.vhd:130$234 ($lt).
Removed top 2 bits (of 18) from mux cell b05.$auto$bmuxmap.cc:60:execute$377 ($mux).
Removed top 3 bits (of 9) from port B of cell b05.$verific$sub_72$b05.vhd:132$236 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_74$b05.vhd:134$238 ($lt).
Removed top 2 bits (of 18) from mux cell b05.$auto$bmuxmap.cc:60:execute$376 ($mux).
Removed top 3 bits (of 9) from port B of cell b05.$verific$sub_76$b05.vhd:136$240 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_78$b05.vhd:138$242 ($lt).
Removed top 4 bits (of 9) from port B of cell b05.$verific$sub_80$b05.vhd:140$244 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_82$b05.vhd:142$246 ($lt).
Removed top 1 bits (of 18) from mux cell b05.$auto$bmuxmap.cc:60:execute$374 ($mux).
Removed top 4 bits (of 9) from port B of cell b05.$verific$sub_84$b05.vhd:144$248 ($sub).
Removed top 1 bits (of 8) from port B of cell b05.$verific$LessThan_86$b05.vhd:146$250 ($lt).
Removed top 5 bits (of 9) from port B of cell b05.$verific$sub_88$b05.vhd:148$251 ($sub).
Removed top 1 bits (of 7) from mux cell b05.$verific$mux_91$b05.vhd:151$253 ($mux).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_109$b05.vhd:160$271 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_111$b05.vhd:163$272 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_113$b05.vhd:166$273 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_115$b05.vhd:169$274 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_117$b05.vhd:172$275 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_119$b05.vhd:175$276 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_121$b05.vhd:178$277 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_123$b05.vhd:181$278 ($lt).
Removed top 1 bits (of 9) from port B of cell b05.$verific$LessThan_125$b05.vhd:184$279 ($lt).
Removed top 1 bits (of 7) from mux cell b05.$verific$mux_128$b05.vhd:188$280 ($mux).
Removed top 1 bits (of 5) from port A of cell b05.$verific$LessThan_137$b05.vhd:197$289 ($lt).
Removed top 1 bits (of 6) from port A of cell b05.$verific$sub_139$b05.vhd:199$290 ($sub).
Removed top 2 bits (of 6) from port B of cell b05.$verific$sub_139$b05.vhd:199$290 ($sub).
Removed top 1 bits (of 7) from mux cell b05.$verific$mux_142$b05.vhd:202$291 ($mux).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_144$b05.vhd:203$293 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_146$b05.vhd:206$294 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_148$b05.vhd:209$295 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_150$b05.vhd:212$296 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_152$b05.vhd:215$297 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_154$b05.vhd:218$298 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_156$b05.vhd:221$299 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_158$b05.vhd:224$300 ($lt).
Removed top 1 bits (of 6) from port B of cell b05.$verific$LessThan_160$b05.vhd:227$301 ($lt).
Removed top 1 bits (of 7) from mux cell b05.$verific$mux_163$b05.vhd:231$303 ($mux).
Removed top 4 bits (of 18) from mux cell b05.$auto$bmuxmap.cc:60:execute$373 ($mux).
Removed top 4 bits (of 5) from port B of cell b05.$verific$add_358$b05.vhd:283$337 ($add).
Removed top 1 bits (of 6) from port Y of cell b05.$verific$add_358$b05.vhd:283$337 ($add).
Removed top 4 bits (of 5) from port B of cell b05.$verific$add_376$b05.vhd:304$350 ($add).
Removed top 1 bits (of 6) from port Y of cell b05.$verific$add_376$b05.vhd:304$350 ($add).
Removed top 1 bits (of 18) from mux cell b05.$auto$bmuxmap.cc:60:execute$395 ($mux).
Removed top 3 bits (of 18) from mux cell b05.$auto$bmuxmap.cc:60:execute$397 ($mux).
Removed top 1 bits (of 3) from mux cell b05.$auto$bmuxmap.cc:60:execute$429 ($mux).
Removed top 4 bits (of 9) from mux cell b05.$auto$bmuxmap.cc:60:execute$484 ($mux).
Removed top 1 bits (of 9) from mux cell b05.$auto$bmuxmap.cc:60:execute$485 ($mux).
Removed top 2 bits (of 9) from mux cell b05.$auto$bmuxmap.cc:60:execute$487 ($mux).
Removed top 2 bits (of 9) from mux cell b05.$auto$bmuxmap.cc:60:execute$488 ($mux).
Removed top 3 bits (of 9) from mux cell b05.$auto$bmuxmap.cc:60:execute$490 ($mux).
Removed top 2 bits (of 9) from mux cell b05.$auto$bmuxmap.cc:60:execute$493 ($mux).
Removed top 1 bits (of 9) from mux cell b05.$auto$bmuxmap.cc:60:execute$494 ($mux).
Removed top 2 bits (of 9) from mux cell b05.$auto$bmuxmap.cc:60:execute$495 ($mux).
Removed top 1 bits (of 9) from mux cell b05.$auto$bmuxmap.cc:60:execute$501 ($mux).
Removed top 1 bits (of 9) from mux cell b05.$auto$bmuxmap.cc:60:execute$506 ($mux).
Removed top 3 bits (of 9) from mux cell b05.$auto$bmuxmap.cc:60:execute$508 ($mux).
Removed top 21 bits (of 288) from wire b05.$auto$bmuxmap.cc:58:execute$372.
Removed top 3 bits (of 144) from wire b05.$auto$bmuxmap.cc:58:execute$389.
Removed top 2 bits (of 4) from wire b05.$auto$bmuxmap.cc:58:execute$408.
Removed top 1 bits (of 2) from wire b05.$auto$bmuxmap.cc:58:execute$413.
Removed top 1 bits (of 4) from wire b05.$auto$bmuxmap.cc:58:execute$418.
Removed top 3 bits (of 12) from wire b05.$auto$bmuxmap.cc:58:execute$428.
Removed top 10 bits (of 20) from wire b05.$auto$bmuxmap.cc:58:execute$438.
Removed top 5 bits (of 10) from wire b05.$auto$bmuxmap.cc:58:execute$443.
Removed top 5 bits (of 20) from wire b05.$auto$bmuxmap.cc:58:execute$448.
Removed top 18 bits (of 36) from wire b05.$auto$bmuxmap.cc:58:execute$463.
Removed top 9 bits (of 18) from wire b05.$auto$bmuxmap.cc:58:execute$468.
Removed top 18 bits (of 36) from wire b05.$auto$bmuxmap.cc:58:execute$473.
Removed top 9 bits (of 18) from wire b05.$auto$bmuxmap.cc:58:execute$478.
Removed top 12 bits (of 144) from wire b05.$auto$bmuxmap.cc:58:execute$483.
Removed top 3 bits (of 72) from wire b05.$auto$bmuxmap.cc:58:execute$500.
Removed top 5 bits (of 7) from wire b05.$verific$n1039$138.
Removed top 1 bits (of 7) from wire b05.$verific$n239$70.
Removed top 1 bits (of 7) from wire b05.$verific$n525$100.
Removed top 1 bits (of 7) from wire b05.$verific$n776$118.
Removed top 1 bits (of 7) from wire b05.$verific$n879$129.
Removed top 1 bits (of 7) from wire b05.$verific$n983$131.

yosys> peepopt

3.57. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 25 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.59. Executing BMUXMAP pass.

yosys> demuxmap

3.60. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.61. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b05:
  creating $macc model for $verific$add_358$b05.vhd:283$337 ($add).
  creating $macc model for $verific$add_376$b05.vhd:304$350 ($add).
  creating $macc model for $verific$sub_139$b05.vhd:199$290 ($sub).
  creating $macc model for $verific$sub_19$b05.vhd:73$186 ($sub).
  creating $macc model for $verific$sub_4$b05.vhd:60$175 ($sub).
  creating $macc model for $verific$sub_49$b05.vhd:110$213 ($sub).
  creating $macc model for $verific$sub_56$b05.vhd:116$220 ($sub).
  creating $macc model for $verific$sub_60$b05.vhd:120$224 ($sub).
  creating $macc model for $verific$sub_64$b05.vhd:124$228 ($sub).
  creating $macc model for $verific$sub_68$b05.vhd:128$232 ($sub).
  creating $macc model for $verific$sub_72$b05.vhd:132$236 ($sub).
  creating $macc model for $verific$sub_76$b05.vhd:136$240 ($sub).
  creating $macc model for $verific$sub_80$b05.vhd:140$244 ($sub).
  creating $macc model for $verific$sub_84$b05.vhd:144$248 ($sub).
  creating $macc model for $verific$sub_88$b05.vhd:148$251 ($sub).
  creating $macc model for $verific$unary_minus_41$b05.vhd:103$202 ($neg).
  creating $alu model for $macc $verific$unary_minus_41$b05.vhd:103$202.
  creating $alu model for $macc $verific$sub_88$b05.vhd:148$251.
  creating $alu model for $macc $verific$sub_84$b05.vhd:144$248.
  creating $alu model for $macc $verific$sub_80$b05.vhd:140$244.
  creating $alu model for $macc $verific$sub_76$b05.vhd:136$240.
  creating $alu model for $macc $verific$sub_72$b05.vhd:132$236.
  creating $alu model for $macc $verific$sub_68$b05.vhd:128$232.
  creating $alu model for $macc $verific$sub_64$b05.vhd:124$228.
  creating $alu model for $macc $verific$sub_60$b05.vhd:120$224.
  creating $alu model for $macc $verific$sub_56$b05.vhd:116$220.
  creating $alu model for $macc $verific$sub_49$b05.vhd:110$213.
  creating $alu model for $macc $verific$sub_4$b05.vhd:60$175.
  creating $alu model for $macc $verific$sub_19$b05.vhd:73$186.
  creating $alu model for $macc $verific$sub_139$b05.vhd:199$290.
  creating $alu model for $macc $verific$add_376$b05.vhd:304$350.
  creating $alu model for $macc $verific$add_358$b05.vhd:283$337.
  creating $alu model for $verific$LessThan_109$b05.vhd:160$271 ($lt): new $alu
  creating $alu model for $verific$LessThan_111$b05.vhd:163$272 ($lt): new $alu
  creating $alu model for $verific$LessThan_113$b05.vhd:166$273 ($lt): new $alu
  creating $alu model for $verific$LessThan_115$b05.vhd:169$274 ($lt): new $alu
  creating $alu model for $verific$LessThan_117$b05.vhd:172$275 ($lt): new $alu
  creating $alu model for $verific$LessThan_119$b05.vhd:175$276 ($lt): new $alu
  creating $alu model for $verific$LessThan_121$b05.vhd:178$277 ($lt): new $alu
  creating $alu model for $verific$LessThan_123$b05.vhd:181$278 ($lt): new $alu
  creating $alu model for $verific$LessThan_125$b05.vhd:184$279 ($lt): new $alu
  creating $alu model for $verific$LessThan_137$b05.vhd:197$289 ($lt): new $alu
  creating $alu model for $verific$LessThan_144$b05.vhd:203$293 ($lt): new $alu
  creating $alu model for $verific$LessThan_146$b05.vhd:206$294 ($lt): new $alu
  creating $alu model for $verific$LessThan_148$b05.vhd:209$295 ($lt): new $alu
  creating $alu model for $verific$LessThan_150$b05.vhd:212$296 ($lt): new $alu
  creating $alu model for $verific$LessThan_152$b05.vhd:215$297 ($lt): new $alu
  creating $alu model for $verific$LessThan_154$b05.vhd:218$298 ($lt): new $alu
  creating $alu model for $verific$LessThan_156$b05.vhd:221$299 ($lt): new $alu
  creating $alu model for $verific$LessThan_158$b05.vhd:224$300 ($lt): new $alu
  creating $alu model for $verific$LessThan_160$b05.vhd:227$301 ($lt): new $alu
  creating $alu model for $verific$LessThan_21$b05.vhd:74$189 ($lt): new $alu
  creating $alu model for $verific$LessThan_39$b05.vhd:101$201 ($lt): new $alu
  creating $alu model for $verific$LessThan_47$b05.vhd:108$212 ($lt): new $alu
  creating $alu model for $verific$LessThan_54$b05.vhd:114$218 ($lt): new $alu
  creating $alu model for $verific$LessThan_58$b05.vhd:118$222 ($lt): new $alu
  creating $alu model for $verific$LessThan_6$b05.vhd:61$178 ($lt): new $alu
  creating $alu model for $verific$LessThan_62$b05.vhd:122$226 ($lt): new $alu
  creating $alu model for $verific$LessThan_66$b05.vhd:126$230 ($lt): new $alu
  creating $alu model for $verific$LessThan_70$b05.vhd:130$234 ($lt): new $alu
  creating $alu model for $verific$LessThan_74$b05.vhd:134$238 ($lt): new $alu
  creating $alu model for $verific$LessThan_78$b05.vhd:138$242 ($lt): new $alu
  creating $alu model for $verific$LessThan_82$b05.vhd:142$246 ($lt): new $alu
  creating $alu model for $verific$LessThan_86$b05.vhd:146$250 ($lt): new $alu
  creating $alu cell for $verific$LessThan_86$b05.vhd:146$250: $auto$alumacc.cc:485:replace_alu$647
  creating $alu cell for $verific$LessThan_82$b05.vhd:142$246: $auto$alumacc.cc:485:replace_alu$658
  creating $alu cell for $verific$LessThan_78$b05.vhd:138$242: $auto$alumacc.cc:485:replace_alu$669
  creating $alu cell for $verific$LessThan_74$b05.vhd:134$238: $auto$alumacc.cc:485:replace_alu$680
  creating $alu cell for $verific$LessThan_70$b05.vhd:130$234: $auto$alumacc.cc:485:replace_alu$691
  creating $alu cell for $verific$LessThan_66$b05.vhd:126$230: $auto$alumacc.cc:485:replace_alu$702
  creating $alu cell for $verific$LessThan_62$b05.vhd:122$226: $auto$alumacc.cc:485:replace_alu$713
  creating $alu cell for $verific$LessThan_6$b05.vhd:61$178: $auto$alumacc.cc:485:replace_alu$724
  creating $alu cell for $verific$LessThan_58$b05.vhd:118$222: $auto$alumacc.cc:485:replace_alu$729
  creating $alu cell for $verific$LessThan_54$b05.vhd:114$218: $auto$alumacc.cc:485:replace_alu$740
  creating $alu cell for $verific$LessThan_47$b05.vhd:108$212: $auto$alumacc.cc:485:replace_alu$751
  creating $alu cell for $verific$LessThan_39$b05.vhd:101$201: $auto$alumacc.cc:485:replace_alu$762
  creating $alu cell for $verific$LessThan_21$b05.vhd:74$189: $auto$alumacc.cc:485:replace_alu$767
  creating $alu cell for $verific$LessThan_160$b05.vhd:227$301: $auto$alumacc.cc:485:replace_alu$772
  creating $alu cell for $verific$LessThan_158$b05.vhd:224$300: $auto$alumacc.cc:485:replace_alu$783
  creating $alu cell for $verific$LessThan_156$b05.vhd:221$299: $auto$alumacc.cc:485:replace_alu$794
  creating $alu cell for $verific$LessThan_154$b05.vhd:218$298: $auto$alumacc.cc:485:replace_alu$805
  creating $alu cell for $verific$LessThan_152$b05.vhd:215$297: $auto$alumacc.cc:485:replace_alu$816
  creating $alu cell for $verific$LessThan_150$b05.vhd:212$296: $auto$alumacc.cc:485:replace_alu$827
  creating $alu cell for $verific$LessThan_148$b05.vhd:209$295: $auto$alumacc.cc:485:replace_alu$838
  creating $alu cell for $verific$LessThan_146$b05.vhd:206$294: $auto$alumacc.cc:485:replace_alu$849
  creating $alu cell for $verific$LessThan_144$b05.vhd:203$293: $auto$alumacc.cc:485:replace_alu$860
  creating $alu cell for $verific$LessThan_137$b05.vhd:197$289: $auto$alumacc.cc:485:replace_alu$871
  creating $alu cell for $verific$LessThan_125$b05.vhd:184$279: $auto$alumacc.cc:485:replace_alu$876
  creating $alu cell for $verific$LessThan_123$b05.vhd:181$278: $auto$alumacc.cc:485:replace_alu$887
  creating $alu cell for $verific$LessThan_121$b05.vhd:178$277: $auto$alumacc.cc:485:replace_alu$898
  creating $alu cell for $verific$LessThan_119$b05.vhd:175$276: $auto$alumacc.cc:485:replace_alu$909
  creating $alu cell for $verific$LessThan_117$b05.vhd:172$275: $auto$alumacc.cc:485:replace_alu$920
  creating $alu cell for $verific$LessThan_115$b05.vhd:169$274: $auto$alumacc.cc:485:replace_alu$931
  creating $alu cell for $verific$LessThan_113$b05.vhd:166$273: $auto$alumacc.cc:485:replace_alu$942
  creating $alu cell for $verific$LessThan_111$b05.vhd:163$272: $auto$alumacc.cc:485:replace_alu$953
  creating $alu cell for $verific$LessThan_109$b05.vhd:160$271: $auto$alumacc.cc:485:replace_alu$964
  creating $alu cell for $verific$add_358$b05.vhd:283$337: $auto$alumacc.cc:485:replace_alu$975
  creating $alu cell for $verific$add_376$b05.vhd:304$350: $auto$alumacc.cc:485:replace_alu$978
  creating $alu cell for $verific$sub_139$b05.vhd:199$290: $auto$alumacc.cc:485:replace_alu$981
  creating $alu cell for $verific$sub_19$b05.vhd:73$186: $auto$alumacc.cc:485:replace_alu$984
  creating $alu cell for $verific$sub_4$b05.vhd:60$175: $auto$alumacc.cc:485:replace_alu$987
  creating $alu cell for $verific$sub_49$b05.vhd:110$213: $auto$alumacc.cc:485:replace_alu$990
  creating $alu cell for $verific$sub_56$b05.vhd:116$220: $auto$alumacc.cc:485:replace_alu$993
  creating $alu cell for $verific$sub_60$b05.vhd:120$224: $auto$alumacc.cc:485:replace_alu$996
  creating $alu cell for $verific$sub_64$b05.vhd:124$228: $auto$alumacc.cc:485:replace_alu$999
  creating $alu cell for $verific$sub_68$b05.vhd:128$232: $auto$alumacc.cc:485:replace_alu$1002
  creating $alu cell for $verific$sub_72$b05.vhd:132$236: $auto$alumacc.cc:485:replace_alu$1005
  creating $alu cell for $verific$sub_76$b05.vhd:136$240: $auto$alumacc.cc:485:replace_alu$1008
  creating $alu cell for $verific$sub_80$b05.vhd:140$244: $auto$alumacc.cc:485:replace_alu$1011
  creating $alu cell for $verific$sub_84$b05.vhd:144$248: $auto$alumacc.cc:485:replace_alu$1014
  creating $alu cell for $verific$sub_88$b05.vhd:148$251: $auto$alumacc.cc:485:replace_alu$1017
  creating $alu cell for $verific$unary_minus_41$b05.vhd:103$202: $auto$alumacc.cc:485:replace_alu$1020
  created 48 $alu and 0 $macc cells.

yosys> opt_expr

3.62. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~49 debug messages>

yosys> opt_merge -nomux

3.63. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.64. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

yosys> opt_reduce

3.65. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.66. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.67. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.68. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.69. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 32 unused cells and 64 unused wires.
<suppressed ~33 debug messages>

yosys> opt_expr

3.70. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_muxtree

3.71. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

yosys> opt_reduce

3.72. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.73. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.74. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.75. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.76. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

yosys> opt_expr

3.77. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
MAX OPT ITERATION = 2

yosys> stat

3.78. Printing statistics.

=== b05 ===

   Number of wires:                371
   Number of wire bits:           2670
   Number of public wires:          23
   Number of public wire bits:     100
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                325
     $adff                           1
     $adffe                          7
     $alu                           48
     $eq                             1
     $logic_not                      1
     $mux                          158
     $ne                            14
     $not                           29
     $or                            28
     $reduce_and                    35
     $reduce_bool                    3


yosys> memory -nomap

3.79. Executing MEMORY pass.

yosys> opt_mem

3.79.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.79.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.79.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.79.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.79.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.79.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

yosys> memory_share

3.79.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.79.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.79.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

yosys> memory_collect

3.79.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.80. Printing statistics.

=== b05 ===

   Number of wires:                371
   Number of wire bits:           2670
   Number of public wires:          23
   Number of public wire bits:     100
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                325
     $adff                           1
     $adffe                          7
     $alu                           48
     $eq                             1
     $logic_not                      1
     $mux                          158
     $ne                            14
     $not                           29
     $or                            28
     $reduce_and                    35
     $reduce_bool                    3


yosys> muxpack

3.81. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~145 debug messages>

yosys> opt_clean

3.82. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

yosys> pmuxtree

3.83. Executing PMUXTREE pass.

yosys> muxpack

3.84. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~145 debug messages>

yosys> memory_map

3.85. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.86. Printing statistics.

=== b05 ===

   Number of wires:                371
   Number of wire bits:           2670
   Number of public wires:          23
   Number of public wire bits:     100
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                325
     $adff                           1
     $adffe                          7
     $alu                           48
     $eq                             1
     $logic_not                      1
     $mux                          158
     $ne                            14
     $not                           29
     $or                            28
     $reduce_and                    35
     $reduce_bool                    3


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.87. Executing TECHMAP pass (map to technology primitives).

3.87.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.87.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.87.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $or.
Using template $paramod$befd47b1c77b68561d11d0cb61a0fae29b79f34c\_90_alu for cells of type $alu.
Using template $paramod$dfca81329cbbac01700318224209a5f2318c7128\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$d2fa05d38998afabc6d4f34471305d0af4b8b2df\_90_alu for cells of type $alu.
Using template $paramod$e04283ca12514baf3d204c6994bec8f178dd89f8\_90_alu for cells of type $alu.
Using template $paramod$78464f9f65d57061f7490f3fe5dd257e4a61e2b7\_90_alu for cells of type $alu.
Using template $paramod$22b95c1bfeece9a7c6bf4fcd9399e4ee87091e97\_90_alu for cells of type $alu.
Using template $paramod$5d7bf89bead63599a0c4fbe7617ae2af1a7c16a5\_90_alu for cells of type $alu.
Using template $paramod$3fe4bdf8d597404bdd222c1fea42f692fdc77de4\_90_alu for cells of type $alu.
Using template $paramod$8f00ca5ffae7aacb4fd127c662dabcdb3ad72531\_90_alu for cells of type $alu.
Using template $paramod$9f3f81d189a6b1d5c738a580270bbb92e45c5c71\_90_alu for cells of type $alu.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$83dd457849c736323edf2edb15923eb27f99c683\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$ebede46804337da78e06a77b9ffdc3717e8d42eb\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
No more expansions possible.
<suppressed ~4496 debug messages>

yosys> stat

3.88. Printing statistics.

=== b05 ===

   Number of wires:               2594
   Number of wire bits:          63331
   Number of public wires:          23
   Number of public wire bits:     100
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4867
     $_AND_                       1281
     $_DFFE_PP0P_                   31
     $_DFF_PP0_                      3
     $_MUX_                       1667
     $_NOT_                        407
     $_OR_                         620
     $_XOR_                        858


yosys> opt_expr

3.89. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~2594 debug messages>

yosys> opt_merge -nomux

3.90. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
<suppressed ~3240 debug messages>
Removed a total of 1080 cells.

yosys> opt_muxtree

3.91. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.92. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.93. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.94. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.95. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.96. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 397 unused cells and 2435 unused wires.
<suppressed ~398 debug messages>

yosys> opt_expr

3.97. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~18 debug messages>

yosys> opt_muxtree

3.98. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.99. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.100. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.101. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.102. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.103. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.104. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
MAX OPT ITERATION = 2

yosys> opt_expr -full

3.105. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~191 debug messages>

yosys> techmap -map +/techmap.v

3.106. Executing TECHMAP pass (map to technology primitives).

3.106.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.106.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.107. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_merge -nomux

3.108. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.109. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.110. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.111. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.112. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.113. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 28 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.114. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
MAX OPT ITERATION = 1

yosys> abc -dff

3.115. Executing ABC pass (technology mapping using ABC).

3.115.1. Summary of detected clock domains:
  31 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$592, arst=\RESET, srst={ }
  88 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$572, arst=\RESET, srst={ }
  531 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$533, arst=\RESET, srst={ }
  76 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$583, arst=\RESET, srst={ }
  150 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$561, arst=\RESET, srst={ }
  50 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$548, arst=\RESET, srst={ }
  55 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }
  20 cells in clk=\CLOCK, en=$auto$opt_dff.cc:219:make_patterns_logic$524, arst=\RESET, srst={ }

3.115.2. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$592, asynchronously reset by \RESET
Extracted 31 gates and 64 wires to a netlist network with 32 inputs and 27 outputs.

3.115.2.1. Executing ABC.

3.115.3. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$572, asynchronously reset by \RESET
Extracted 88 gates and 96 wires to a netlist network with 6 inputs and 15 outputs.

3.115.3.1. Executing ABC.

3.115.4. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$533, asynchronously reset by \RESET
Extracted 531 gates and 564 wires to a netlist network with 31 inputs and 34 outputs.

3.115.4.1. Executing ABC.

3.115.5. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$583, asynchronously reset by \RESET
Extracted 76 gates and 100 wires to a netlist network with 23 inputs and 10 outputs.

3.115.5.1. Executing ABC.

3.115.6. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$561, asynchronously reset by \RESET
Extracted 150 gates and 173 wires to a netlist network with 22 inputs and 16 outputs.

3.115.6.1. Executing ABC.

3.115.7. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$548, asynchronously reset by \RESET
Extracted 50 gates and 60 wires to a netlist network with 9 inputs and 11 outputs.

3.115.7.1. Executing ABC.

3.115.8. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 55 gates and 76 wires to a netlist network with 19 inputs and 23 outputs.

3.115.8.1. Executing ABC.

3.115.9. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$524, asynchronously reset by \RESET
Extracted 20 gates and 32 wires to a netlist network with 12 inputs and 11 outputs.

3.115.9.1. Executing ABC.

yosys> abc -dff

3.116. Executing ABC pass (technology mapping using ABC).

3.116.1. Summary of detected clock domains:
  19 cells in clk=\CLOCK, en=$abc$7748$auto$opt_dff.cc:219:make_patterns_logic$583, arst=\RESET, srst={ }
  70 cells in clk=\CLOCK, en=$abc$7441$auto$opt_dff.cc:219:make_patterns_logic$572, arst=\RESET, srst={ }
  37 cells in clk=\CLOCK, en=$abc$7880$auto$opt_dff.cc:219:make_patterns_logic$548, arst=\RESET, srst={ }
  77 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }
  168 cells in clk=\CLOCK, en=$abc$7558$auto$opt_dff.cc:219:make_patterns_logic$533, arst=\RESET, srst={ }
  115 cells in clk=\CLOCK, en=$abc$7791$auto$opt_dff.cc:219:make_patterns_logic$561, arst=\RESET, srst={ }
  57 cells in clk=\CLOCK, en=$abc$7409$auto$opt_dff.cc:219:make_patterns_logic$592, arst=\RESET, srst={ }
  20 cells in clk=\CLOCK, en=$abc$7977$auto$opt_dff.cc:219:make_patterns_logic$524, arst=\RESET, srst={ }

3.116.2. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$7748$auto$opt_dff.cc:219:make_patterns_logic$583, asynchronously reset by \RESET
Extracted 19 gates and 34 wires to a netlist network with 15 inputs and 7 outputs.

3.116.2.1. Executing ABC.

3.116.3. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$7441$auto$opt_dff.cc:219:make_patterns_logic$572, asynchronously reset by \RESET
Extracted 70 gates and 81 wires to a netlist network with 11 inputs and 40 outputs.

3.116.3.1. Executing ABC.

3.116.4. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$7880$auto$opt_dff.cc:219:make_patterns_logic$548, asynchronously reset by \RESET
Extracted 37 gates and 51 wires to a netlist network with 14 inputs and 15 outputs.

3.116.4.1. Executing ABC.

3.116.5. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 77 gates and 109 wires to a netlist network with 32 inputs and 32 outputs.

3.116.5.1. Executing ABC.

3.116.6. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$7558$auto$opt_dff.cc:219:make_patterns_logic$533, asynchronously reset by \RESET
Extracted 168 gates and 194 wires to a netlist network with 26 inputs and 46 outputs.

3.116.6.1. Executing ABC.

3.116.7. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$7791$auto$opt_dff.cc:219:make_patterns_logic$561, asynchronously reset by \RESET
Extracted 115 gates and 160 wires to a netlist network with 45 inputs and 20 outputs.

3.116.7.1. Executing ABC.

3.116.8. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$7409$auto$opt_dff.cc:219:make_patterns_logic$592, asynchronously reset by \RESET
Extracted 57 gates and 105 wires to a netlist network with 48 inputs and 28 outputs.

3.116.8.1. Executing ABC.

3.116.9. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$7977$auto$opt_dff.cc:219:make_patterns_logic$524, asynchronously reset by \RESET
Extracted 20 gates and 32 wires to a netlist network with 12 inputs and 11 outputs.

3.116.9.1. Executing ABC.

yosys> abc -dff

3.117. Executing ABC pass (technology mapping using ABC).

3.117.1. Summary of detected clock domains:
  65 cells in clk=\CLOCK, en=$abc$8474$abc$7409$auto$opt_dff.cc:219:make_patterns_logic$592, arst=\RESET, srst={ }
  30 cells in clk=\CLOCK, en=$abc$8007$abc$7748$auto$opt_dff.cc:219:make_patterns_logic$583, arst=\RESET, srst={ }
  84 cells in clk=\CLOCK, en=$abc$8347$abc$7791$auto$opt_dff.cc:219:make_patterns_logic$561, arst=\RESET, srst={ }
  69 cells in clk=\CLOCK, en=$abc$8029$abc$7441$auto$opt_dff.cc:219:make_patterns_logic$572, arst=\RESET, srst={ }
  36 cells in clk=\CLOCK, en=$abc$8107$abc$7880$auto$opt_dff.cc:219:make_patterns_logic$548, arst=\RESET, srst={ }
  58 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }
  112 cells in clk=\CLOCK, en=$abc$8224$abc$7558$auto$opt_dff.cc:219:make_patterns_logic$533, arst=\RESET, srst={ }
  72 cells in clk=\CLOCK, en=$abc$8533$abc$7977$auto$opt_dff.cc:219:make_patterns_logic$524, arst=\RESET, srst={ }

3.117.2. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$8474$abc$7409$auto$opt_dff.cc:219:make_patterns_logic$592, asynchronously reset by \RESET
Extracted 65 gates and 118 wires to a netlist network with 53 inputs and 37 outputs.

3.117.2.1. Executing ABC.

3.117.3. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$8007$abc$7748$auto$opt_dff.cc:219:make_patterns_logic$583, asynchronously reset by \RESET
Extracted 30 gates and 53 wires to a netlist network with 23 inputs and 9 outputs.

3.117.3.1. Executing ABC.

3.117.4. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$8347$abc$7791$auto$opt_dff.cc:219:make_patterns_logic$561, asynchronously reset by \RESET
Extracted 84 gates and 118 wires to a netlist network with 34 inputs and 13 outputs.

3.117.4.1. Executing ABC.

3.117.5. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$8029$abc$7441$auto$opt_dff.cc:219:make_patterns_logic$572, asynchronously reset by \RESET
Extracted 69 gates and 78 wires to a netlist network with 9 inputs and 41 outputs.

3.117.5.1. Executing ABC.

3.117.6. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$8107$abc$7880$auto$opt_dff.cc:219:make_patterns_logic$548, asynchronously reset by \RESET
Extracted 36 gates and 50 wires to a netlist network with 14 inputs and 15 outputs.

3.117.6.1. Executing ABC.

3.117.7. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 58 gates and 87 wires to a netlist network with 29 inputs and 31 outputs.

3.117.7.1. Executing ABC.

3.117.8. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$8224$abc$7558$auto$opt_dff.cc:219:make_patterns_logic$533, asynchronously reset by \RESET
Extracted 112 gates and 141 wires to a netlist network with 29 inputs and 40 outputs.

3.117.8.1. Executing ABC.

3.117.9. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$8533$abc$7977$auto$opt_dff.cc:219:make_patterns_logic$524, asynchronously reset by \RESET
Extracted 72 gates and 111 wires to a netlist network with 39 inputs and 31 outputs.

3.117.9.1. Executing ABC.

yosys> abc -dff

3.118. Executing ABC pass (technology mapping using ABC).

3.118.1. Summary of detected clock domains:
  89 cells in clk=\CLOCK, en=$abc$8919$abc$8224$abc$7558$auto$opt_dff.cc:219:make_patterns_logic$533, arst=\RESET, srst={ }
  73 cells in clk=\CLOCK, en=$abc$8563$abc$8474$abc$7409$auto$opt_dff.cc:219:make_patterns_logic$592, arst=\RESET, srst={ }
  31 cells in clk=\CLOCK, en=$abc$8629$abc$8007$abc$7748$auto$opt_dff.cc:219:make_patterns_logic$583, arst=\RESET, srst={ }
  96 cells in clk=\CLOCK, en=$abc$8661$abc$8347$abc$7791$auto$opt_dff.cc:219:make_patterns_logic$561, arst=\RESET, srst={ }
  64 cells in clk=\CLOCK, en=$abc$8747$abc$8029$abc$7441$auto$opt_dff.cc:219:make_patterns_logic$572, arst=\RESET, srst={ }
  36 cells in clk=\CLOCK, en=$abc$8814$abc$8107$abc$7880$auto$opt_dff.cc:219:make_patterns_logic$548, arst=\RESET, srst={ }
  65 cells in clk=\CLOCK, en={ }, arst=\RESET, srst={ }
  73 cells in clk=\CLOCK, en=$abc$9028$abc$8533$abc$7977$auto$opt_dff.cc:219:make_patterns_logic$524, arst=\RESET, srst={ }

3.118.2. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$8919$abc$8224$abc$7558$auto$opt_dff.cc:219:make_patterns_logic$533, asynchronously reset by \RESET
Extracted 89 gates and 124 wires to a netlist network with 35 inputs and 43 outputs.

3.118.2.1. Executing ABC.

3.118.3. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$8563$abc$8474$abc$7409$auto$opt_dff.cc:219:make_patterns_logic$592, asynchronously reset by \RESET
Extracted 73 gates and 122 wires to a netlist network with 49 inputs and 35 outputs.

3.118.3.1. Executing ABC.

3.118.4. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$8629$abc$8007$abc$7748$auto$opt_dff.cc:219:make_patterns_logic$583, asynchronously reset by \RESET
Extracted 31 gates and 55 wires to a netlist network with 24 inputs and 9 outputs.

3.118.4.1. Executing ABC.

3.118.5. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$8661$abc$8347$abc$7791$auto$opt_dff.cc:219:make_patterns_logic$561, asynchronously reset by \RESET
Extracted 96 gates and 132 wires to a netlist network with 36 inputs and 22 outputs.

3.118.5.1. Executing ABC.

3.118.6. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$8747$abc$8029$abc$7441$auto$opt_dff.cc:219:make_patterns_logic$572, asynchronously reset by \RESET
Extracted 64 gates and 74 wires to a netlist network with 10 inputs and 41 outputs.

3.118.6.1. Executing ABC.

3.118.7. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$8814$abc$8107$abc$7880$auto$opt_dff.cc:219:make_patterns_logic$548, asynchronously reset by \RESET
Extracted 36 gates and 50 wires to a netlist network with 14 inputs and 15 outputs.

3.118.7.1. Executing ABC.

3.118.8. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, asynchronously reset by \RESET
Extracted 65 gates and 98 wires to a netlist network with 33 inputs and 33 outputs.

3.118.8.1. Executing ABC.

3.118.9. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK, enabled by $abc$9028$abc$8533$abc$7977$auto$opt_dff.cc:219:make_patterns_logic$524, asynchronously reset by \RESET
Extracted 73 gates and 114 wires to a netlist network with 41 inputs and 30 outputs.

3.118.9.1. Executing ABC.

yosys> opt_ffinv

3.119. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.120. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~7 debug messages>

yosys> opt_merge -nomux

3.121. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
<suppressed ~51 debug messages>
Removed a total of 17 cells.

yosys> opt_muxtree

3.122. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.123. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.124. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.125. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.126. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.127. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 2 unused cells and 3028 unused wires.
<suppressed ~12 debug messages>

yosys> opt_expr

3.128. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_muxtree

3.129. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.130. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.131. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.132. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.133. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.134. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..

yosys> opt_expr

3.135. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
MAX OPT ITERATION = 2

yosys> bmuxmap

3.136. Executing BMUXMAP pass.

yosys> demuxmap

3.137. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_XSjKZy/abc_tmp_1.scr

3.138. Executing ABC pass (technology mapping using ABC).

3.138.1. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Extracted 472 gates and 507 wires to a netlist network with 35 inputs and 59 outputs.

3.138.1.1. Executing ABC.
DE:   #PIs =  35  #Luts =   108  Max Lvl =   6  Avg Lvl =   1.71  [   0.13 sec. at Pass 0]{firstMap}
DE:   #PIs =  35  #Luts =    77  Max Lvl =   6  Avg Lvl =   1.83  [   0.98 sec. at Pass 1]{initMapFlow}
DE:   #PIs =  35  #Luts =    76  Max Lvl =   6  Avg Lvl =   1.83  [   0.16 sec. at Pass 2]{map}
DE:   #PIs =  35  #Luts =    76  Max Lvl =   6  Avg Lvl =   1.83  [   0.53 sec. at Pass 3]{postMap}
DE:   #PIs =  35  #Luts =    76  Max Lvl =   6  Avg Lvl =   1.83  [   0.25 sec. at Pass 4]{map}
DE:   #PIs =  35  #Luts =    76  Max Lvl =   6  Avg Lvl =   1.83  [   0.96 sec. at Pass 5]{postMap}
DE:   #PIs =  35  #Luts =    76  Max Lvl =   6  Avg Lvl =   1.83  [   7.15 sec. at Pass 6]{pushMap}
DE:   #PIs =  35  #Luts =    76  Max Lvl =   6  Avg Lvl =   1.83  [   1.47 sec. at Pass 7]{finalMap}

yosys> opt_expr

3.139. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_merge -nomux

3.140. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.141. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.142. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.143. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.144. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.145. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.146. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 503 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.147. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.148. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.149. Printing statistics.

=== b05 ===

   Number of wires:                 85
   Number of wire bits:            138
   Number of public wires:          12
   Number of public wire bits:      57
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                105
     $_DFFE_PP0P_                   31
     $_DFF_PP0_                      3
     $lut                           71


yosys> shregmap -minlen 8 -maxlen 20

3.150. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.151. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.152. Printing statistics.

=== b05 ===

   Number of wires:                 85
   Number of wire bits:            138
   Number of public wires:          12
   Number of public wire bits:      57
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                105
     $_DFFE_PP0P_                   31
     $_DFF_PP0_                      3
     $lut                           71


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.153. Executing TECHMAP pass (map to technology primitives).

3.153.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.153.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.153.3. Continuing TECHMAP pass.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~275 debug messages>

yosys> opt_expr -mux_undef

3.154. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~1908 debug messages>

yosys> simplemap

3.155. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.156. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_merge

3.157. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
<suppressed ~891 debug messages>
Removed a total of 297 cells.

yosys> opt_dff -nodffe -nosdff

3.158. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.159. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 330 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.160. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
<suppressed ~22 debug messages>

yosys> opt_merge -nomux

3.161. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.162. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.163. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.164. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.165. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.166. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.167. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.168. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_XSjKZy/abc_tmp_2.scr

3.169. Executing ABC pass (technology mapping using ABC).

3.169.1. Extracting gate netlist of module `\b05' to `<abc-temp-dir>/input.blif'..
Extracted 451 gates and 489 wires to a netlist network with 36 inputs and 55 outputs.

3.169.1.1. Executing ABC.
DE:   #PIs =  36  #Luts =    73  Max Lvl =   6  Avg Lvl =   1.76  [   0.14 sec. at Pass 0]{firstMap}
DE:   #PIs =  36  #Luts =    72  Max Lvl =   6  Avg Lvl =   1.87  [   2.38 sec. at Pass 1]{initMapFlow}
DE:   #PIs =  36  #Luts =    72  Max Lvl =   6  Avg Lvl =   1.87  [   0.59 sec. at Pass 2]{map}
DE:   #PIs =  36  #Luts =    72  Max Lvl =   6  Avg Lvl =   1.87  [   0.95 sec. at Pass 3]{postMap}
DE:   #PIs =  36  #Luts =    72  Max Lvl =   6  Avg Lvl =   1.87  [   0.90 sec. at Pass 4]{map}
DE:   #PIs =  36  #Luts =    72  Max Lvl =   6  Avg Lvl =   1.87  [   1.60 sec. at Pass 5]{postMap}
DE:   #PIs =  36  #Luts =    72  Max Lvl =   6  Avg Lvl =   1.87  [   7.06 sec. at Pass 6]{pushMap}
DE:   #PIs =  36  #Luts =    72  Max Lvl =   6  Avg Lvl =   1.87  [   1.68 sec. at Pass 7]{finalMap}

yosys> opt_expr

3.170. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.

yosys> opt_merge -nomux

3.171. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.172. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b05..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.173. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b05.
Performed a total of 0 changes.

yosys> opt_merge

3.174. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b05'.
Removed a total of 0 cells.

yosys> opt_share

3.175. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.176. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.177. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 319 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.178. Executing OPT_EXPR pass (perform const folding).
Optimizing module b05.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.179. Executing HIERARCHY pass (managing design hierarchy).

3.179.1. Analyzing design hierarchy..
Top module:  \b05

3.179.2. Analyzing design hierarchy..
Top module:  \b05
Removed 0 unused modules.

yosys> stat

3.180. Printing statistics.

=== b05 ===

   Number of wires:                 86
   Number of wire bits:            139
   Number of public wires:          12
   Number of public wire bits:      57
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                106
     $lut                           72
     dffsre                         34


yosys> opt_clean -purge

3.181. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b05..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.182. Executing Verilog backend.
Dumping module `\b05'.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 4fe883c700, CPU: user 3.76s system 0.09s, MEM: 73.45 MB peak
Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)
Time spent: 97% 6x abc (166 sec), 0% 37x opt_expr (1 sec), ...
real 40.13
user 162.03
sys 7.88
