
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.92
 Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k registers.v spi_master_top.v ql_mux2_x2.v serializer_deserializer.v baud_generator.v ql_clkgate_x4.v

yosys> verific -vlog2k registers.v spi_master_top.v ql_mux2_x2.v serializer_deserializer.v baud_generator.v ql_clkgate_x4.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'registers.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'spi_master_top.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'ql_mux2_x2.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'serializer_deserializer.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'baud_generator.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'ql_clkgate_x4.v'

yosys> synth_rs -top spi_master_top -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.79

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top spi_master_top

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] spi_master_top.v:26: compiling module 'spi_master_top'
VERIFIC-WARNING [VERI-2371] spi_master_top.v:109: delay control is not supported for synthesis
VERIFIC-INFO [VERI-1018] registers.v:15: compiling module 'registers'
VERIFIC-WARNING [VERI-1209] registers.v:104: expression size 8 truncated to fit in target size 3
VERIFIC-WARNING [VERI-2371] registers.v:205: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:206: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:207: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:208: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:209: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:210: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:211: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:221: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:224: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:229: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:234: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:241: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:244: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:249: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:254: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:261: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:264: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:269: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:274: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:282: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:285: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:290: delay control is not supported for synthesis
VERIFIC-WARNING [VERI-2371] registers.v:295: delay control is not supported for synthesis
VERIFIC-INFO [VERI-1018] serializer_deserializer.v:16: compiling module 'serializer_deserializer'
VERIFIC-INFO [VERI-1018] ql_mux2_x2.v:1: compiling module 'ql_mux2_x2'
VERIFIC-INFO [VERI-1018] ql_clkgate_x4.v:1: compiling module 'ql_clkgate_x4'
VERIFIC-INFO [VERI-1018] baud_generator.v:14: compiling module 'baud_generator'
VERIFIC-WARNING [VERI-1209] baud_generator.v:45: expression size 18 truncated to fit in target size 17
VERIFIC-WARNING [VERI-1209] serializer_deserializer.v:130: expression size 4 truncated to fit in target size 3
Importing module spi_master_top.
Importing module registers.
Importing module serializer_deserializer.
Importing module baud_generator.
Importing module ql_clkgate_x4.
Importing module ql_mux2_x2.

3.4.1. Analyzing design hierarchy..
Top module:  \spi_master_top
Used module:     \serializer_deserializer
Used module:         \baud_generator
Used module:         \ql_clkgate_x4
Used module:         \ql_mux2_x2
Used module:     \registers

3.4.2. Analyzing design hierarchy..
Top module:  \spi_master_top
Used module:     \serializer_deserializer
Used module:         \baud_generator
Used module:         \ql_clkgate_x4
Used module:         \ql_mux2_x2
Used module:     \registers
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module ql_mux2_x2.
Optimizing module ql_clkgate_x4.
Optimizing module baud_generator.
<suppressed ~2 debug messages>
Optimizing module serializer_deserializer.
<suppressed ~10 debug messages>
Optimizing module registers.
<suppressed ~4 debug messages>
Optimizing module spi_master_top.

yosys> bmuxmap

3.6. Executing BMUXMAP pass.

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).
Deleting now unused module baud_generator.
Deleting now unused module ql_clkgate_x4.
Deleting now unused module ql_mux2_x2.
Deleting now unused module registers.
Deleting now unused module serializer_deserializer.
<suppressed ~5 debug messages>

yosys> bmuxmap

3.9. Executing BMUXMAP pass.

yosys> demuxmap

3.10. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.11. Executing TRIBUF pass.

yosys> deminout

3.12. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~25 debug messages>

yosys> opt_clean

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 298 unused wires.
<suppressed ~86 debug messages>

yosys> check

3.15. Executing CHECK pass (checking for obvious problems).
Checking module spi_master_top...
Found and reported 0 problems.

yosys> opt_expr

3.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

yosys> opt_merge -nomux

3.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.18. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

yosys> opt_reduce

3.19. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.20. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_share

3.21. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.22. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$wb_ack_i_reg$spi_master_top.v:109$19 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$tx_reg_reg$registers.v:214$362 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$ss_reg_reg$registers.v:214$363 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$spi_ctrl_reg_reg$registers.v:214$364 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$spi_clk_cnt_reg_reg$registers.v:214$365 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$irq_wr2_reg$registers.v:132$309 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$irq_wr1_reg$registers.v:132$308 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$irq_rd2_reg$registers.v:132$307 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$irq_rd1_reg$registers.v:132$306 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$cmd_reg7_reg$registers.v:296$396 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$cmd_reg32_reg$registers.v:275$387 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$cmd_reg1_reg$registers.v:255$380 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$cmd_reg0_reg$registers.v:235$374 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$TIP_reg$registers.v:174$328 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$SPICR1_reg$registers.v:214$361 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$SPIBR_reg$registers.v:214$360 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$INTR_write_reg$registers.v:163$324 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\spi_register.$verific$INTR_read_reg$registers.v:149$320 ($aldff) from module spi_master_top.
Removing never-active async load on $flatten\spi_register.$verific$Data_out_r_reg$registers.v:316$399 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.\BG.$verific$count16_reg$baud_generator.v:46$691 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.\BG.$verific$Baud_Rate_r_reg$baud_generator.v:62$698 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$trnsfer_done_reg$serializer_deserializer.v:196$606 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$bit_count_reg$serializer_deserializer.v:132$562 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$Shift_Reg_reg$serializer_deserializer.v:302$643 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$SS_bar_reg$serializer_deserializer.v:153$572 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$SPI_Read_Data_reg$serializer_deserializer.v:338$662 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$IRQ_read_reg$serializer_deserializer.v:179$602 ($aldff) from module spi_master_top.
Changing const-value async load to async reset on $flatten\ser_des.$verific$FSM_spi_state_reg$serializer_deserializer.v:283$636 ($aldff) from module spi_master_top.

yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
MAX OPT ITERATION = 1

yosys> fsm -encoding binary

3.25. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.25.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register spi_master_top.ser_des.FSM_spi_state.

yosys> fsm_extract

3.25.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\ser_des.FSM_spi_state' from module `\spi_master_top'.
  found $adff cell for state register: $flatten\ser_des.$verific$FSM_spi_state_reg$serializer_deserializer.v:283$636
  root of input selection tree: $flatten\ser_des.$verific$n285$499
  found reset state: 3'000 (from async reset)
  found ctrl input: \wb_rst_i
  found ctrl input: \ser_des.FSM_spi_state [2]
  found ctrl input: \ser_des.FSM_spi_state [1]
  found ctrl input: \ser_des.FSM_spi_state [0]
  found ctrl input: \ser_des.start
  found ctrl input: \ser_des.stop
  found state code: 3'010
  found state code: 3'001
  found ctrl input: \spi_register.cmd_reg32 [0]
  found ctrl input: \spi_register.cmd_reg32 [1]
  found state code: 3'101
  found state code: 3'011
  found ctrl input: \spi_register.spi_clk_cnt_reg [7]
  found state code: 3'111
  found ctrl input: $flatten\ser_des.$verific$n129$440
  found state code: 3'100
  found state code: 3'110
  found ctrl input: $flatten\ser_des.$verific$n268$454
  found ctrl output: $flatten\ser_des.$verific$n32$406
  found ctrl output: $flatten\ser_des.$verific$n33$407
  found ctrl output: $flatten\ser_des.$verific$n35$409
  found ctrl output: $flatten\ser_des.$verific$n46$411
  found ctrl output: \spi_register.trnfer_cmplte_i
  found ctrl output: \spi_register.IRQ_write_i
  found ctrl output: $flatten\ser_des.$verific$n122$437
  found ctrl output: $flatten\ser_des.$verific$n138$444
  ctrl inputs: { \ser_des.stop \ser_des.start \ser_des.FSM_spi_state $flatten\ser_des.$verific$n268$454 $flatten\ser_des.$verific$n129$440 \spi_register.spi_clk_cnt_reg [7] \spi_register.cmd_reg32 \wb_rst_i }
  ctrl outputs: { $flatten\ser_des.$verific$n46$411 $flatten\ser_des.$verific$n35$409 $flatten\ser_des.$verific$n33$407 $flatten\ser_des.$verific$n32$406 $flatten\ser_des.$verific$n285$499 $flatten\ser_des.$verific$n138$444 $flatten\ser_des.$verific$n122$437 \spi_register.trnfer_cmplte_i \spi_register.IRQ_write_i }
  transition:      3'000 11'00000-----0 ->      3'000 11'10000000000
  transition:      3'000 11'10000-----0 ->      3'010 11'10000100000
  transition:      3'000 11'-1000-----0 ->      3'001 11'10000010000
  transition:      3'000 11'--000-----1 ->      3'000 11'10000000000
  transition:      3'100 11'00100-----0 ->      3'000 11'00000000001
  transition:      3'100 11'10100-----0 ->      3'000 11'00000000001
  transition:      3'100 11'-1100-----0 ->      3'100 11'00001000001
  transition:      3'100 11'--100-----1 ->      3'000 11'00000000001
  transition:      3'010 11'--010--0--0 ->      3'000 11'00000000010
  transition:      3'010 11'--010--1--0 ->      3'111 11'00001110010
  transition:      3'010 11'--010-----1 ->      3'000 11'00000000010
  transition:      3'110 11'00110-----0 ->      3'000 11'00000000100
  transition:      3'110 11'10110-----0 ->      3'000 11'00000000100
  transition:      3'110 11'-1110-----0 ->      3'110 11'00001100100
  transition:      3'110 11'--110-----1 ->      3'000 11'00000000100
  transition:      3'001 11'--001---000 ->      3'000 11'00000001000
  transition:      3'001 11'--001---100 ->      3'101 11'00001011000
  transition:      3'001 11'--001----10 ->      3'011 11'00000111000
  transition:      3'001 11'--001-----1 ->      3'000 11'00000001000
  transition:      3'101 11'--101-0---0 ->      3'101 11'00101010000
  transition:      3'101 11'--101-1---0 ->      3'110 11'00101100000
  transition:      3'101 11'--101-----1 ->      3'000 11'00100000000
  transition:      3'011 11'--011-0---0 ->      3'011 11'00010110000
  transition:      3'011 11'--011-1---0 ->      3'100 11'00011000000
  transition:      3'011 11'--011-----1 ->      3'000 11'00010000000
  transition:      3'111 11'--1110----0 ->      3'111 11'01001110000
  transition:      3'111 11'--1111----0 ->      3'000 11'01000000000
  transition:      3'111 11'--111-----1 ->      3'000 11'01000000000

yosys> fsm_opt

3.25.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\ser_des.FSM_spi_state$788' from module `\spi_master_top'.
  Merging pattern 11'00100-----0 and 11'10100-----0 from group (1 0 11'00000000001).
  Merging pattern 11'10100-----0 and 11'00100-----0 from group (1 0 11'00000000001).
  Merging pattern 11'00110-----0 and 11'10110-----0 from group (3 0 11'00000000100).
  Merging pattern 11'10110-----0 and 11'00110-----0 from group (3 0 11'00000000100).

yosys> opt_clean

3.25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 23 unused cells and 22 unused wires.
<suppressed ~24 debug messages>

yosys> fsm_opt

3.25.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\ser_des.FSM_spi_state$788' from module `\spi_master_top'.

yosys> fsm_recode -encoding binary

3.25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\ser_des.FSM_spi_state$788' from module `\spi_master_top' using `auto' encoding:
  mapping auto encoding to `binary` for this FSM.
  existing encoding is already a packed binary encoding.

yosys> fsm_info

3.25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\ser_des.FSM_spi_state$788' from module `spi_master_top':
-------------------------------------

  Information on FSM $fsm$\ser_des.FSM_spi_state$788 (\ser_des.FSM_spi_state):

  Number of input signals:   11
  Number of output signals:  11
  Number of state bits:       3

  Input signals:
    0: \wb_rst_i
    1: \spi_register.cmd_reg32 [0]
    2: \spi_register.cmd_reg32 [1]
    3: \spi_register.spi_clk_cnt_reg [7]
    4: $flatten\ser_des.$verific$n129$440
    5: $flatten\ser_des.$verific$n268$454
    6: $fsm$oldstate\ser_des.FSM_spi_state [0]
    7: $fsm$oldstate\ser_des.FSM_spi_state [1]
    8: $fsm$oldstate\ser_des.FSM_spi_state [2]
    9: \ser_des.start
   10: \ser_des.stop

  Output signals:
    0: \spi_register.IRQ_write_i
    1: \spi_register.trnfer_cmplte_i
    2: $flatten\ser_des.$verific$n122$437
    3: $flatten\ser_des.$verific$n138$444
    4: $flatten\ser_des.$verific$n285$499 [0]
    5: $flatten\ser_des.$verific$n285$499 [1]
    6: $flatten\ser_des.$verific$n285$499 [2]
    7: $flatten\ser_des.$verific$n32$406
    8: $flatten\ser_des.$verific$n33$407
    9: $flatten\ser_des.$verific$n35$409
   10: $flatten\ser_des.$verific$n46$411

  State encoding:
    0:      3'000  <RESET STATE>
    1:      3'100
    2:      3'010
    3:      3'110
    4:      3'001
    5:      3'101
    6:      3'011
    7:      3'111

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 11'00000-----0   ->     0 11'10000000000
      1:     0 11'--000-----1   ->     0 11'10000000000
      2:     0 11'10000-----0   ->     2 11'10000100000
      3:     0 11'-1000-----0   ->     4 11'10000010000
      4:     1 11'-0100-----0   ->     0 11'00000000001
      5:     1 11'--100-----1   ->     0 11'00000000001
      6:     1 11'-1100-----0   ->     1 11'00001000001
      7:     2 11'--010--0--0   ->     0 11'00000000010
      8:     2 11'--010-----1   ->     0 11'00000000010
      9:     2 11'--010--1--0   ->     7 11'00001110010
     10:     3 11'-0110-----0   ->     0 11'00000000100
     11:     3 11'--110-----1   ->     0 11'00000000100
     12:     3 11'-1110-----0   ->     3 11'00001100100
     13:     4 11'--001---000   ->     0 11'00000001000
     14:     4 11'--001-----1   ->     0 11'00000001000
     15:     4 11'--001---100   ->     5 11'00001011000
     16:     4 11'--001----10   ->     6 11'00000111000
     17:     5 11'--101-----1   ->     0 11'00100000000
     18:     5 11'--101-1---0   ->     3 11'00101100000
     19:     5 11'--101-0---0   ->     5 11'00101010000
     20:     6 11'--011-----1   ->     0 11'00010000000
     21:     6 11'--011-1---0   ->     1 11'00011000000
     22:     6 11'--011-0---0   ->     6 11'00010110000
     23:     7 11'--1111----0   ->     0 11'01000000000
     24:     7 11'--111-----1   ->     0 11'01000000000
     25:     7 11'--1110----0   ->     7 11'01001110000

-------------------------------------

yosys> fsm_map

3.25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\ser_des.FSM_spi_state$788' from module `\spi_master_top'.

yosys> opt_expr

3.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~2 debug messages>

yosys> opt_merge -nomux

3.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
<suppressed ~132 debug messages>
Removed a total of 44 cells.

yosys> opt_muxtree

3.28. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

yosys> opt_reduce

3.29. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.30. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_share

3.31. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.32. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\spi_register.$verific$tx_reg_reg$registers.v:214$362 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n439$256, Q = \spi_register.tx_reg).
Adding EN signal on $flatten\spi_register.$verific$ss_reg_reg$registers.v:214$363 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n448$257, Q = \spi_register.ss_reg).
Adding EN signal on $flatten\spi_register.$verific$spi_ctrl_reg_reg$registers.v:214$364 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n457$258, Q = \spi_register.spi_ctrl_reg).
Adding EN signal on $flatten\spi_register.$verific$spi_clk_cnt_reg_reg$registers.v:214$365 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n461$259, Q = \spi_register.spi_clk_cnt_reg).
Adding EN signal on $flatten\spi_register.$verific$cmd_reg7_reg$registers.v:296$396 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n596$232, Q = \spi_register.cmd_reg7).
Adding EN signal on $flatten\spi_register.$verific$cmd_reg32_reg$registers.v:275$387 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n577$265, Q = \spi_register.cmd_reg32).
Adding EN signal on $flatten\spi_register.$verific$cmd_reg1_reg$registers.v:255$380 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n550$224, Q = \spi_register.cmd_reg1).
Adding EN signal on $flatten\spi_register.$verific$cmd_reg0_reg$registers.v:235$374 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n538$219, Q = \spi_register.cmd_reg0).
Adding EN signal on $flatten\spi_register.$verific$SPICR1_reg$registers.v:214$361 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n430$255, Q = \spi_register.SPICR1).
Adding EN signal on $flatten\spi_register.$verific$SPIBR_reg$registers.v:214$360 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [15:8], Q = \spi_register.SPIBR [15:8]).
Adding EN signal on $flatten\spi_register.$verific$SPIBR_reg$registers.v:214$360 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n413$254 [7:0], Q = \spi_register.SPIBR [7:0]).
Adding EN signal on $flatten\spi_register.$verific$INTR_write_reg$registers.v:163$324 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n112$205, Q = \spi_register.INTR_write).
Adding EN signal on $flatten\spi_register.$verific$INTR_read_reg$registers.v:149$320 ($adff) from module spi_master_top (D = $flatten\spi_register.$verific$n103$202, Q = \spi_register.INTR_read).
Adding EN signal on $flatten\ser_des.\BG.$verific$Baud_Rate_r_reg$baud_generator.v:62$698 ($adff) from module spi_master_top (D = $flatten\ser_des.\BG.$verific$n162$674, Q = \ser_des.BG.Baud_Rate_r).
Adding EN signal on $flatten\ser_des.$verific$bit_count_reg$serializer_deserializer.v:132$562 ($adff) from module spi_master_top (D = $flatten\ser_des.$verific$n59$469, Q = \ser_des.bit_count).
Adding EN signal on $flatten\ser_des.$verific$SS_bar_reg$serializer_deserializer.v:153$572 ($adff) from module spi_master_top (D = $flatten\ser_des.$verific$n90$419, Q = \ser_des.SS_bar).
Adding EN signal on $flatten\ser_des.$verific$SPI_Read_Data_reg$serializer_deserializer.v:338$662 ($adff) from module spi_master_top (D = $flatten\ser_des.$verific$n473$512, Q = \ser_des.SPI_Read_Data).
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$1084 ($adffe) from module spi_master_top.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$1045 ($adffe) from module spi_master_top.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$1045 ($adffe) from module spi_master_top.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$1045 ($adffe) from module spi_master_top.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$1045 ($adffe) from module spi_master_top.

yosys> opt_clean

3.33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 29 unused cells and 78 unused wires.
<suppressed ~30 debug messages>

yosys> opt_expr

3.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~17 debug messages>

yosys> opt_muxtree

3.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

yosys> opt_reduce

3.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
<suppressed ~63 debug messages>
Removed a total of 21 cells.

yosys> opt_share

3.38. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.39. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 21 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

yosys> opt_muxtree

3.42. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

yosys> opt_reduce

3.43. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.44. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_share

3.45. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.46. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> opt_expr

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
MAX OPT ITERATION = 3

yosys> wreduce -keepdc

3.49. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 6) from port B of cell spi_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$980 ($eq).
Removed top 1 bits (of 5) from port B of cell spi_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$984 ($eq).
Removed top 1 bits (of 5) from port B of cell spi_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$996 ($eq).
Removed top 2 bits (of 5) from port B of cell spi_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$951 ($eq).
Removed top 1 bits (of 5) from port B of cell spi_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$959 ($eq).
Removed top 1 bits (of 3) from port B of cell spi_master_top.$auto$fsm_map.cc:215:map_fsm$807 ($eq).
Removed top 1 bits (of 3) from port B of cell spi_master_top.$auto$fsm_map.cc:215:map_fsm$803 ($eq).
Removed top 2 bits (of 3) from port B of cell spi_master_top.$auto$fsm_map.cc:215:map_fsm$805 ($eq).
Removed top 1 bits (of 17) from port B of cell spi_master_top.$flatten\ser_des.\BG.$verific$equal_20$baud_generator.v:58$693 ($eq).
Removed top 16 bits (of 17) from port B of cell spi_master_top.$flatten\ser_des.\BG.$verific$add_12$baud_generator.v:45$689 ($add).
Removed top 2 bits (of 3) from port B of cell spi_master_top.$flatten\ser_des.$verific$add_19$serializer_deserializer.v:130$556 ($add).

yosys> peepopt

3.50. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.51. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> bmuxmap

3.52. Executing BMUXMAP pass.

yosys> demuxmap

3.53. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.54. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module spi_master_top:
  creating $macc model for $flatten\ser_des.$verific$add_19$serializer_deserializer.v:130$556 ($add).
  creating $macc model for $flatten\ser_des.\BG.$verific$add_12$baud_generator.v:45$689 ($add).
  creating $alu model for $macc $flatten\ser_des.\BG.$verific$add_12$baud_generator.v:45$689.
  creating $alu model for $macc $flatten\ser_des.$verific$add_19$serializer_deserializer.v:130$556.
  creating $alu cell for $flatten\ser_des.$verific$add_19$serializer_deserializer.v:130$556: $auto$alumacc.cc:485:replace_alu$1137
  creating $alu cell for $flatten\ser_des.\BG.$verific$add_12$baud_generator.v:45$689: $auto$alumacc.cc:485:replace_alu$1140
  created 2 $alu and 0 $macc cells.

yosys> opt_expr

3.55. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

yosys> opt_merge -nomux

3.56. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.57. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

yosys> opt_reduce

3.58. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.59. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_share

3.60. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.61. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.62. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> opt_expr

3.63. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
MAX OPT ITERATION = 1

yosys> stat

3.64. Printing statistics.

=== spi_master_top ===

   Number of wires:                361
   Number of wire bits:           1247
   Number of public wires:         170
   Number of public wire bits:     463
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                254
     $adff                          12
     $adffe                         17
     $alu                            2
     $and                           37
     $dff                            1
     $eq                            24
     $logic_not                      2
     $mux                           88
     $ne                            14
     $not                           15
     $or                            12
     $pmux                           1
     $reduce_and                    10
     $reduce_bool                   10
     $reduce_or                      8
     $xor                            1


yosys> memory -nomap

3.65. Executing MEMORY pass.

yosys> opt_mem

3.65.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.65.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.65.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.65.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.65.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.65.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> memory_share

3.65.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.65.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.65.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> memory_collect

3.65.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.66. Printing statistics.

=== spi_master_top ===

   Number of wires:                361
   Number of wire bits:           1247
   Number of public wires:         170
   Number of public wire bits:     463
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                254
     $adff                          12
     $adffe                         17
     $alu                            2
     $and                           37
     $dff                            1
     $eq                            24
     $logic_not                      2
     $mux                           88
     $ne                            14
     $not                           15
     $or                            12
     $pmux                           1
     $reduce_and                    10
     $reduce_bool                   10
     $reduce_or                      8
     $xor                            1


yosys> muxpack

3.67. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~81 debug messages>

yosys> opt_clean

3.68. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> pmuxtree

3.69. Executing PMUXTREE pass.

yosys> muxpack

3.70. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~87 debug messages>

yosys> memory_map

3.71. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.72. Printing statistics.

=== spi_master_top ===

   Number of wires:                373
   Number of wire bits:           1273
   Number of public wires:         170
   Number of public wire bits:     463
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                265
     $adff                          12
     $adffe                         17
     $alu                            2
     $and                           37
     $dff                            1
     $eq                            24
     $logic_not                      2
     $mux                           95
     $ne                            14
     $not                           16
     $or                            14
     $reduce_and                    10
     $reduce_bool                   10
     $reduce_or                     10
     $xor                            1


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.73. Executing TECHMAP pass (map to technology primitives).

3.73.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.73.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.73.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$18205a5da979f93ffab44671dcc4a48cf14e25e2\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
No more expansions possible.
<suppressed ~876 debug messages>

yosys> stat

3.74. Printing statistics.

=== spi_master_top ===

   Number of wires:                698
   Number of wire bits:           4320
   Number of public wires:         170
   Number of public wire bits:     463
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1250
     $_AND_                        123
     $_DFFE_PP0P_                   62
     $_DFFE_PP1P_                    4
     $_DFF_PP0_                     39
     $_DFF_P_                        8
     $_MUX_                        464
     $_NOT_                         62
     $_OR_                         259
     $_XOR_                        229


yosys> opt_expr

3.75. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~296 debug messages>

yosys> opt_merge -nomux

3.76. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
<suppressed ~444 debug messages>
Removed a total of 148 cells.

yosys> opt_muxtree

3.77. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.78. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.79. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_share

3.80. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.81. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.82. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 34 unused cells and 277 unused wires.
<suppressed ~35 debug messages>

yosys> opt_expr

3.83. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

yosys> opt_muxtree

3.84. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.85. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.86. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_share

3.87. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.88. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.89. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..

yosys> opt_expr

3.90. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
MAX OPT ITERATION = 2

yosys> opt_expr -full

3.91. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~193 debug messages>

yosys> techmap -map +/techmap.v

3.92. Executing TECHMAP pass (map to technology primitives).

3.92.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.92.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.93. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

yosys> opt_merge -nomux

3.94. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
<suppressed ~105 debug messages>
Removed a total of 35 cells.

yosys> opt_muxtree

3.95. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.96. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.97. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.98. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.99. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 37 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.100. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
MAX OPT ITERATION = 1

yosys> abc -dff

3.101. Executing ABC pass (technology mapping using ABC).

3.101.1. Summary of detected clock domains:
  23 cells in clk=\ser_des.Baud_Rate, en=$auto$opt_dff.cc:194:make_patterns_logic$1130, arst=\arst_i, srst={ }
  34 cells in clk=\ser_des.Baud_Rate, en=$auto$opt_dff.cc:194:make_patterns_logic$1133, arst=\arst_i, srst={ }
  42 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$1093, arst=\arst_i, srst={ }
  24 cells in clk=\ser_des.Baud_Rate, en=$auto$opt_dff.cc:194:make_patterns_logic$1127, arst=\arst_i, srst={ }
  168 cells in clk=\ser_des.Baud_Rate, en={ }, arst=\arst_i, srst={ }
  28 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$1032, arst=\arst_i, srst={ }
  18 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$1043, arst=\arst_i, srst={ }
  8 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$1061, arst=\arst_i, srst={ }
  9 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$1075, arst=\arst_i, srst={ }
  16 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$1068, arst=\arst_i, srst={ }
  11 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$1054, arst=\arst_i, srst={ }
  29 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$1104, arst=\arst_i, srst={ }
  5 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:194:make_patterns_logic$1118, arst=\arst_i, srst={ }
  4 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:194:make_patterns_logic$1121, arst=\arst_i, srst={ }
  27 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:194:make_patterns_logic$1124, arst=\arst_i, srst={ }
  32 cells in clk=\wb_clk_i, en={ }, arst={ }, srst={ }
  24 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$1021, arst=\arst_i, srst={ }
  19 cells in clk=\wb_clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$1115, arst=\arst_i, srst={ }
  147 cells in clk=\wb_clk_i, en={ }, arst=\arst_i, srst={ }

3.101.2. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \ser_des.Baud_Rate, enabled by $auto$opt_dff.cc:194:make_patterns_logic$1130, asynchronously reset by \arst_i
Extracted 23 gates and 36 wires to a netlist network with 12 inputs and 10 outputs.

3.101.2.1. Executing ABC.

3.101.3. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \ser_des.Baud_Rate, enabled by $auto$opt_dff.cc:194:make_patterns_logic$1133, asynchronously reset by \arst_i
Extracted 34 gates and 48 wires to a netlist network with 13 inputs and 9 outputs.

3.101.3.1. Executing ABC.

3.101.4. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1093, asynchronously reset by \arst_i
Extracted 42 gates and 69 wires to a netlist network with 26 inputs and 27 outputs.

3.101.4.1. Executing ABC.

3.101.5. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \ser_des.Baud_Rate, enabled by $auto$opt_dff.cc:194:make_patterns_logic$1127, asynchronously reset by \arst_i
Extracted 24 gates and 36 wires to a netlist network with 11 inputs and 8 outputs.

3.101.5.1. Executing ABC.

3.101.6. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \ser_des.Baud_Rate, asynchronously reset by \arst_i
Extracted 168 gates and 204 wires to a netlist network with 35 inputs and 23 outputs.

3.101.6.1. Executing ABC.

3.101.7. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1032, asynchronously reset by \arst_i
Extracted 28 gates and 49 wires to a netlist network with 20 inputs and 21 outputs.

3.101.7.1. Executing ABC.

3.101.8. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1043, asynchronously reset by \arst_i
Extracted 18 gates and 33 wires to a netlist network with 15 inputs and 12 outputs.

3.101.8.1. Executing ABC.

3.101.9. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1061, asynchronously reset by \arst_i
Extracted 8 gates and 15 wires to a netlist network with 6 inputs and 2 outputs.

3.101.9.1. Executing ABC.

3.101.10. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1075, asynchronously reset by \arst_i
Extracted 9 gates and 16 wires to a netlist network with 6 inputs and 5 outputs.

3.101.10.1. Executing ABC.

3.101.11. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1068, asynchronously reset by \arst_i
Extracted 16 gates and 24 wires to a netlist network with 7 inputs and 6 outputs.

3.101.11.1. Executing ABC.

3.101.12. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1054, asynchronously reset by \arst_i
Extracted 11 gates and 22 wires to a netlist network with 11 inputs and 6 outputs.

3.101.12.1. Executing ABC.

3.101.13. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1104, asynchronously reset by \arst_i
Extracted 29 gates and 52 wires to a netlist network with 23 inputs and 26 outputs.

3.101.13.1. Executing ABC.

3.101.14. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:194:make_patterns_logic$1118, asynchronously reset by \arst_i
Extracted 5 gates and 10 wires to a netlist network with 4 inputs and 4 outputs.

3.101.14.1. Executing ABC.

3.101.15. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:194:make_patterns_logic$1121, asynchronously reset by \arst_i
Extracted 4 gates and 8 wires to a netlist network with 3 inputs and 3 outputs.

3.101.15.1. Executing ABC.

3.101.16. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:194:make_patterns_logic$1124, asynchronously reset by \arst_i
Extracted 27 gates and 53 wires to a netlist network with 26 inputs and 3 outputs.

3.101.16.1. Executing ABC.

3.101.17. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i
Extracted 32 gates and 63 wires to a netlist network with 30 inputs and 8 outputs.

3.101.17.1. Executing ABC.

3.101.18. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1021, asynchronously reset by \arst_i
Extracted 24 gates and 48 wires to a netlist network with 24 inputs and 12 outputs.

3.101.18.1. Executing ABC.

3.101.19. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1115, asynchronously reset by \arst_i
Extracted 19 gates and 34 wires to a netlist network with 15 inputs and 14 outputs.

3.101.19.1. Executing ABC.

3.101.20. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, asynchronously reset by \arst_i
Extracted 147 gates and 174 wires to a netlist network with 25 inputs and 23 outputs.

3.101.20.1. Executing ABC.

yosys> abc -dff

3.102. Executing ABC pass (technology mapping using ABC).

3.102.1. Summary of detected clock domains:
  8 cells in clk=\wb_clk_i, en=$abc$3467$auto$opt_dff.cc:219:make_patterns_logic$1061, arst=\arst_i, srst={ }
  50 cells in clk=\wb_clk_i, en=$abc$3580$auto$opt_dff.cc:194:make_patterns_logic$1124, arst=\arst_i, srst={ }
  6 cells in clk=\wb_clk_i, en=$abc$3574$auto$opt_dff.cc:194:make_patterns_logic$1121, arst=\arst_i, srst={ }
  9 cells in clk=\wb_clk_i, en=$abc$3476$auto$opt_dff.cc:219:make_patterns_logic$1075, arst=\arst_i, srst={ }
  4 cells in clk=\wb_clk_i, en=$abc$3567$auto$opt_dff.cc:194:make_patterns_logic$1118, arst=\arst_i, srst={ }
  20 cells in clk=\wb_clk_i, en=$abc$3502$auto$opt_dff.cc:219:make_patterns_logic$1054, arst=\arst_i, srst={ }
  14 cells in clk=\wb_clk_i, en=$abc$3486$auto$opt_dff.cc:219:make_patterns_logic$1068, arst=\arst_i, srst={ }
  37 cells in clk=\wb_clk_i, en={ }, arst={ }, srst={ }
  71 cells in clk=\wb_clk_i, en=$abc$3213$auto$opt_dff.cc:219:make_patterns_logic$1093, arst=\arst_i, srst={ }
  43 cells in clk=\wb_clk_i, en=$abc$3521$auto$opt_dff.cc:219:make_patterns_logic$1104, arst=\arst_i, srst={ }
  27 cells in clk=\wb_clk_i, en=$abc$3653$auto$opt_dff.cc:219:make_patterns_logic$1021, arst=\arst_i, srst={ }
  9 cells in clk=\ser_des.Baud_Rate, en=$abc$3157$auto$opt_dff.cc:194:make_patterns_logic$1130, arst=\arst_i, srst={ }
  18 cells in clk=\wb_clk_i, en=$abc$3444$auto$opt_dff.cc:219:make_patterns_logic$1043, arst=\arst_i, srst={ }
  19 cells in clk=\ser_des.Baud_Rate, en=$abc$3267$auto$opt_dff.cc:194:make_patterns_logic$1127, arst=\arst_i, srst={ }
  29 cells in clk=\wb_clk_i, en=$abc$3399$auto$opt_dff.cc:219:make_patterns_logic$1032, arst=\arst_i, srst={ }
  49 cells in clk=\wb_clk_i, en=$abc$3686$auto$opt_dff.cc:219:make_patterns_logic$1115, arst=\arst_i, srst={ }
  95 cells in clk=\ser_des.Baud_Rate, en={ }, arst=\arst_i, srst={ }
  23 cells in clk=\ser_des.Baud_Rate, en=$abc$3173$auto$opt_dff.cc:194:make_patterns_logic$1133, arst=\arst_i, srst={ }
  103 cells in clk=\wb_clk_i, en={ }, arst=\arst_i, srst={ }

3.102.2. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3467$auto$opt_dff.cc:219:make_patterns_logic$1061, asynchronously reset by \arst_i
Extracted 8 gates and 14 wires to a netlist network with 6 inputs and 2 outputs.

3.102.2.1. Executing ABC.

3.102.3. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3580$auto$opt_dff.cc:194:make_patterns_logic$1124, asynchronously reset by \arst_i
Extracted 50 gates and 102 wires to a netlist network with 52 inputs and 4 outputs.

3.102.3.1. Executing ABC.

3.102.4. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3574$auto$opt_dff.cc:194:make_patterns_logic$1121, asynchronously reset by \arst_i
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 4 outputs.

3.102.4.1. Executing ABC.

3.102.5. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3476$auto$opt_dff.cc:219:make_patterns_logic$1075, asynchronously reset by \arst_i
Extracted 9 gates and 18 wires to a netlist network with 9 inputs and 4 outputs.

3.102.5.1. Executing ABC.

3.102.6. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3567$auto$opt_dff.cc:194:make_patterns_logic$1118, asynchronously reset by \arst_i
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 3 outputs.

3.102.6.1. Executing ABC.

3.102.7. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3502$auto$opt_dff.cc:219:make_patterns_logic$1054, asynchronously reset by \arst_i
Extracted 20 gates and 37 wires to a netlist network with 17 inputs and 12 outputs.

3.102.7.1. Executing ABC.

3.102.8. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3486$auto$opt_dff.cc:219:make_patterns_logic$1068, asynchronously reset by \arst_i
Extracted 14 gates and 21 wires to a netlist network with 7 inputs and 6 outputs.

3.102.8.1. Executing ABC.

3.102.9. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i
Extracted 37 gates and 67 wires to a netlist network with 30 inputs and 8 outputs.

3.102.9.1. Executing ABC.

3.102.10. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3213$auto$opt_dff.cc:219:make_patterns_logic$1093, asynchronously reset by \arst_i
Extracted 71 gates and 117 wires to a netlist network with 46 inputs and 39 outputs.

3.102.10.1. Executing ABC.

3.102.11. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3521$auto$opt_dff.cc:219:make_patterns_logic$1104, asynchronously reset by \arst_i
Extracted 43 gates and 73 wires to a netlist network with 30 inputs and 35 outputs.

3.102.11.1. Executing ABC.

3.102.12. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3653$auto$opt_dff.cc:219:make_patterns_logic$1021, asynchronously reset by \arst_i
Extracted 27 gates and 52 wires to a netlist network with 25 inputs and 16 outputs.

3.102.12.1. Executing ABC.

3.102.13. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$3288$ser_des.Baud_Rate, enabled by $abc$3157$auto$opt_dff.cc:194:make_patterns_logic$1130, asynchronously reset by \arst_i
Extracted 9 gates and 16 wires to a netlist network with 7 inputs and 5 outputs.

3.102.13.1. Executing ABC.

3.102.14. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3444$auto$opt_dff.cc:219:make_patterns_logic$1043, asynchronously reset by \arst_i
Extracted 18 gates and 29 wires to a netlist network with 11 inputs and 8 outputs.

3.102.14.1. Executing ABC.

3.102.15. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$3288$ser_des.Baud_Rate, enabled by $abc$3267$auto$opt_dff.cc:194:make_patterns_logic$1127, asynchronously reset by \arst_i
Extracted 19 gates and 30 wires to a netlist network with 11 inputs and 9 outputs.

3.102.15.1. Executing ABC.

3.102.16. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3399$auto$opt_dff.cc:219:make_patterns_logic$1032, asynchronously reset by \arst_i
Extracted 29 gates and 49 wires to a netlist network with 20 inputs and 17 outputs.

3.102.16.1. Executing ABC.

3.102.17. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3686$auto$opt_dff.cc:219:make_patterns_logic$1115, asynchronously reset by \arst_i
Extracted 49 gates and 77 wires to a netlist network with 28 inputs and 38 outputs.

3.102.17.1. Executing ABC.

3.102.18. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$4259$abc$3288$ser_des.Baud_Rate, asynchronously reset by \arst_i
Extracted 95 gates and 122 wires to a netlist network with 27 inputs and 21 outputs.

3.102.18.1. Executing ABC.

3.102.19. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$4259$abc$3288$ser_des.Baud_Rate, enabled by $abc$3173$auto$opt_dff.cc:194:make_patterns_logic$1133, asynchronously reset by \arst_i
Extracted 23 gates and 37 wires to a netlist network with 14 inputs and 12 outputs.

3.102.19.1. Executing ABC.

3.102.20. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, asynchronously reset by \arst_i
Extracted 103 gates and 115 wires to a netlist network with 12 inputs and 27 outputs.

3.102.20.1. Executing ABC.

yosys> abc -dff

3.103. Executing ABC pass (technology mapping using ABC).

3.103.1. Summary of detected clock domains:
  8 cells in clk=\wb_clk_i, en=$abc$3892$abc$3467$auto$opt_dff.cc:219:make_patterns_logic$1061, arst=\arst_i, srst={ }
  52 cells in clk=\wb_clk_i, en=$abc$3901$abc$3580$auto$opt_dff.cc:194:make_patterns_logic$1124, arst=\arst_i, srst={ }
  6 cells in clk=\wb_clk_i, en=$abc$3952$abc$3574$auto$opt_dff.cc:194:make_patterns_logic$1121, arst=\arst_i, srst={ }
  10 cells in clk=\wb_clk_i, en=$abc$3959$abc$3476$auto$opt_dff.cc:219:make_patterns_logic$1075, arst=\arst_i, srst={ }
  4 cells in clk=\wb_clk_i, en=$abc$3970$abc$3567$auto$opt_dff.cc:194:make_patterns_logic$1118, arst=\arst_i, srst={ }
  15 cells in clk=\wb_clk_i, en=$abc$4002$abc$3486$auto$opt_dff.cc:219:make_patterns_logic$1068, arst=\arst_i, srst={ }
  37 cells in clk=\wb_clk_i, en={ }, arst={ }, srst={ }
  51 cells in clk=\wb_clk_i, en=$abc$4064$abc$3213$auto$opt_dff.cc:219:make_patterns_logic$1093, arst=\arst_i, srst={ }
  53 cells in clk=\wb_clk_i, en=$abc$4137$abc$3521$auto$opt_dff.cc:219:make_patterns_logic$1104, arst=\arst_i, srst={ }
  9 cells in clk=$abc$3288$ser_des.Baud_Rate, en=$abc$4228$abc$3157$auto$opt_dff.cc:194:make_patterns_logic$1130, arst=\arst_i, srst={ }
  19 cells in clk=\wb_clk_i, en=$abc$4239$abc$3444$auto$opt_dff.cc:219:make_patterns_logic$1043, arst=\arst_i, srst={ }
  31 cells in clk=\wb_clk_i, en=$abc$4192$abc$3653$auto$opt_dff.cc:219:make_patterns_logic$1021, arst=\arst_i, srst={ }
  19 cells in clk=\wb_clk_i, en=$abc$3976$abc$3502$auto$opt_dff.cc:219:make_patterns_logic$1054, arst=\arst_i, srst={ }
  18 cells in clk=$abc$3288$ser_des.Baud_Rate, en=$abc$4259$abc$3267$auto$opt_dff.cc:194:make_patterns_logic$1127, arst=\arst_i, srst={ }
  29 cells in clk=\wb_clk_i, en=$abc$4281$abc$3399$auto$opt_dff.cc:219:make_patterns_logic$1032, arst=\arst_i, srst={ }
  46 cells in clk=\wb_clk_i, en=$abc$4321$abc$3686$auto$opt_dff.cc:219:make_patterns_logic$1115, arst=\arst_i, srst={ }
  94 cells in clk=$abc$4259$abc$3288$ser_des.Baud_Rate, en={ }, arst=\arst_i, srst={ }
  30 cells in clk=$abc$4259$abc$3288$ser_des.Baud_Rate, en=$abc$4477$abc$3173$auto$opt_dff.cc:194:make_patterns_logic$1133, arst=\arst_i, srst={ }
  102 cells in clk=\wb_clk_i, en={ }, arst=\arst_i, srst={ }

3.103.2. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3892$abc$3467$auto$opt_dff.cc:219:make_patterns_logic$1061, asynchronously reset by \arst_i
Extracted 8 gates and 14 wires to a netlist network with 6 inputs and 2 outputs.

3.103.2.1. Executing ABC.

3.103.3. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3901$abc$3580$auto$opt_dff.cc:194:make_patterns_logic$1124, asynchronously reset by \arst_i
Extracted 52 gates and 105 wires to a netlist network with 53 inputs and 4 outputs.

3.103.3.1. Executing ABC.

3.103.4. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3952$abc$3574$auto$opt_dff.cc:194:make_patterns_logic$1121, asynchronously reset by \arst_i
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 4 outputs.

3.103.4.1. Executing ABC.

3.103.5. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3959$abc$3476$auto$opt_dff.cc:219:make_patterns_logic$1075, asynchronously reset by \arst_i
Extracted 10 gates and 20 wires to a netlist network with 10 inputs and 4 outputs.

3.103.5.1. Executing ABC.

3.103.6. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3970$abc$3567$auto$opt_dff.cc:194:make_patterns_logic$1118, asynchronously reset by \arst_i
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 3 outputs.

3.103.6.1. Executing ABC.

3.103.7. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$4002$abc$3486$auto$opt_dff.cc:219:make_patterns_logic$1068, asynchronously reset by \arst_i
Extracted 15 gates and 23 wires to a netlist network with 8 inputs and 6 outputs.

3.103.7.1. Executing ABC.

3.103.8. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i
Extracted 37 gates and 67 wires to a netlist network with 30 inputs and 8 outputs.

3.103.8.1. Executing ABC.

3.103.9. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$4064$abc$3213$auto$opt_dff.cc:219:make_patterns_logic$1093, asynchronously reset by \arst_i
Extracted 51 gates and 89 wires to a netlist network with 38 inputs and 26 outputs.

3.103.9.1. Executing ABC.

3.103.10. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$4137$abc$3521$auto$opt_dff.cc:219:make_patterns_logic$1104, asynchronously reset by \arst_i
Extracted 53 gates and 85 wires to a netlist network with 32 inputs and 42 outputs.

3.103.10.1. Executing ABC.

3.103.11. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$4259$abc$3288$ser_des.Baud_Rate, enabled by $abc$4228$abc$3157$auto$opt_dff.cc:194:make_patterns_logic$1130, asynchronously reset by \arst_i
Extracted 9 gates and 16 wires to a netlist network with 7 inputs and 5 outputs.

3.103.11.1. Executing ABC.

3.103.12. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$4239$abc$3444$auto$opt_dff.cc:219:make_patterns_logic$1043, asynchronously reset by \arst_i
Extracted 19 gates and 30 wires to a netlist network with 11 inputs and 8 outputs.

3.103.12.1. Executing ABC.

3.103.13. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$4192$abc$3653$auto$opt_dff.cc:219:make_patterns_logic$1021, asynchronously reset by \arst_i
Extracted 31 gates and 58 wires to a netlist network with 27 inputs and 14 outputs.

3.103.13.1. Executing ABC.

3.103.14. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$3976$abc$3502$auto$opt_dff.cc:219:make_patterns_logic$1054, asynchronously reset by \arst_i
Extracted 19 gates and 36 wires to a netlist network with 17 inputs and 11 outputs.

3.103.14.1. Executing ABC.

3.103.15. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$4259$abc$3288$ser_des.Baud_Rate, enabled by $abc$4259$abc$3267$auto$opt_dff.cc:194:make_patterns_logic$1127, asynchronously reset by \arst_i
Extracted 18 gates and 26 wires to a netlist network with 8 inputs and 7 outputs.

3.103.15.1. Executing ABC.

3.103.16. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$4281$abc$3399$auto$opt_dff.cc:219:make_patterns_logic$1032, asynchronously reset by \arst_i
Extracted 29 gates and 50 wires to a netlist network with 21 inputs and 17 outputs.

3.103.16.1. Executing ABC.

3.103.17. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$4321$abc$3686$auto$opt_dff.cc:219:make_patterns_logic$1115, asynchronously reset by \arst_i
Extracted 46 gates and 70 wires to a netlist network with 24 inputs and 36 outputs.

3.103.17.1. Executing ABC.

3.103.18. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$4259$abc$3288$ser_des.Baud_Rate, asynchronously reset by \arst_i
Extracted 94 gates and 122 wires to a netlist network with 28 inputs and 25 outputs.

3.103.18.1. Executing ABC.

3.103.19. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$4259$abc$3288$ser_des.Baud_Rate, enabled by $abc$4477$abc$3173$auto$opt_dff.cc:194:make_patterns_logic$1133, asynchronously reset by \arst_i
Extracted 30 gates and 44 wires to a netlist network with 14 inputs and 10 outputs.

3.103.19.1. Executing ABC.

3.103.20. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, asynchronously reset by \arst_i
Extracted 102 gates and 114 wires to a netlist network with 12 inputs and 28 outputs.

3.103.20.1. Executing ABC.

yosys> abc -dff

3.104. Executing ABC pass (technology mapping using ABC).

3.104.1. Summary of detected clock domains:
  8 cells in clk=\wb_clk_i, en=$abc$4632$abc$3892$abc$3467$auto$opt_dff.cc:219:make_patterns_logic$1061, arst=\arst_i, srst={ }
  52 cells in clk=\wb_clk_i, en=$abc$4641$abc$3901$abc$3580$auto$opt_dff.cc:194:make_patterns_logic$1124, arst=\arst_i, srst={ }
  22 cells in clk=$abc$4259$abc$3288$ser_des.Baud_Rate, en=$abc$5203$abc$4477$abc$3173$auto$opt_dff.cc:194:make_patterns_logic$1133, arst=\arst_i, srst={ }
  6 cells in clk=\wb_clk_i, en=$abc$4694$abc$3952$abc$3574$auto$opt_dff.cc:194:make_patterns_logic$1121, arst=\arst_i, srst={ }
  9 cells in clk=\wb_clk_i, en=$abc$4701$abc$3959$abc$3476$auto$opt_dff.cc:219:make_patterns_logic$1075, arst=\arst_i, srst={ }
  4 cells in clk=\wb_clk_i, en=$abc$4712$abc$3970$abc$3567$auto$opt_dff.cc:194:make_patterns_logic$1118, arst=\arst_i, srst={ }
  14 cells in clk=\wb_clk_i, en=$abc$4718$abc$4002$abc$3486$auto$opt_dff.cc:219:make_patterns_logic$1068, arst=\arst_i, srst={ }
  37 cells in clk=\wb_clk_i, en={ }, arst={ }, srst={ }
  68 cells in clk=\wb_clk_i, en=$abc$4780$abc$4064$abc$3213$auto$opt_dff.cc:219:make_patterns_logic$1093, arst=\arst_i, srst={ }
  52 cells in clk=\wb_clk_i, en=$abc$4836$abc$4137$abc$3521$auto$opt_dff.cc:219:make_patterns_logic$1104, arst=\arst_i, srst={ }
  9 cells in clk=$abc$4259$abc$3288$ser_des.Baud_Rate, en=$abc$4898$abc$4228$abc$3157$auto$opt_dff.cc:194:make_patterns_logic$1130, arst=\arst_i, srst={ }
  19 cells in clk=\wb_clk_i, en=$abc$4909$abc$4239$abc$3444$auto$opt_dff.cc:219:make_patterns_logic$1043, arst=\arst_i, srst={ }
  32 cells in clk=\wb_clk_i, en=$abc$4929$abc$4192$abc$3653$auto$opt_dff.cc:219:make_patterns_logic$1021, arst=\arst_i, srst={ }
  20 cells in clk=\wb_clk_i, en=$abc$4963$abc$3976$abc$3502$auto$opt_dff.cc:219:make_patterns_logic$1054, arst=\arst_i, srst={ }
  20 cells in clk=$abc$4259$abc$3288$ser_des.Baud_Rate, en=$abc$4988$abc$4259$abc$3267$auto$opt_dff.cc:194:make_patterns_logic$1127, arst=\arst_i, srst={ }
  31 cells in clk=\wb_clk_i, en=$abc$5008$abc$4281$abc$3399$auto$opt_dff.cc:219:make_patterns_logic$1032, arst=\arst_i, srst={ }
  49 cells in clk=\wb_clk_i, en=$abc$5048$abc$4321$abc$3686$auto$opt_dff.cc:219:make_patterns_logic$1115, arst=\arst_i, srst={ }
  83 cells in clk=$abc$4259$abc$3288$ser_des.Baud_Rate, en={ }, arst=\arst_i, srst={ }
  102 cells in clk=\wb_clk_i, en={ }, arst=\arst_i, srst={ }

3.104.2. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$4632$abc$3892$abc$3467$auto$opt_dff.cc:219:make_patterns_logic$1061, asynchronously reset by \arst_i
Extracted 8 gates and 14 wires to a netlist network with 6 inputs and 2 outputs.

3.104.2.1. Executing ABC.

3.104.3. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$4641$abc$3901$abc$3580$auto$opt_dff.cc:194:make_patterns_logic$1124, asynchronously reset by \arst_i
Extracted 52 gates and 105 wires to a netlist network with 53 inputs and 4 outputs.

3.104.3.1. Executing ABC.

3.104.4. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$5203$abc$4259$abc$3288$ser_des.Baud_Rate, enabled by $abc$5203$abc$4477$abc$3173$auto$opt_dff.cc:194:make_patterns_logic$1133, asynchronously reset by \arst_i
Extracted 22 gates and 36 wires to a netlist network with 14 inputs and 11 outputs.

3.104.4.1. Executing ABC.

3.104.5. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$4694$abc$3952$abc$3574$auto$opt_dff.cc:194:make_patterns_logic$1121, asynchronously reset by \arst_i
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 4 outputs.

3.104.5.1. Executing ABC.

3.104.6. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$4701$abc$3959$abc$3476$auto$opt_dff.cc:219:make_patterns_logic$1075, asynchronously reset by \arst_i
Extracted 9 gates and 18 wires to a netlist network with 9 inputs and 4 outputs.

3.104.6.1. Executing ABC.

3.104.7. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$4712$abc$3970$abc$3567$auto$opt_dff.cc:194:make_patterns_logic$1118, asynchronously reset by \arst_i
Extracted 4 gates and 7 wires to a netlist network with 3 inputs and 3 outputs.

3.104.7.1. Executing ABC.

3.104.8. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$4718$abc$4002$abc$3486$auto$opt_dff.cc:219:make_patterns_logic$1068, asynchronously reset by \arst_i
Extracted 14 gates and 21 wires to a netlist network with 7 inputs and 6 outputs.

3.104.8.1. Executing ABC.

3.104.9. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i
Extracted 37 gates and 67 wires to a netlist network with 30 inputs and 8 outputs.

3.104.9.1. Executing ABC.

3.104.10. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$4780$abc$4064$abc$3213$auto$opt_dff.cc:219:make_patterns_logic$1093, asynchronously reset by \arst_i
Extracted 68 gates and 114 wires to a netlist network with 46 inputs and 37 outputs.

3.104.10.1. Executing ABC.

3.104.11. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$4836$abc$4137$abc$3521$auto$opt_dff.cc:219:make_patterns_logic$1104, asynchronously reset by \arst_i
Extracted 52 gates and 82 wires to a netlist network with 30 inputs and 37 outputs.

3.104.11.1. Executing ABC.

3.104.12. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$5203$abc$4259$abc$3288$ser_des.Baud_Rate, enabled by $abc$4898$abc$4228$abc$3157$auto$opt_dff.cc:194:make_patterns_logic$1130, asynchronously reset by \arst_i
Extracted 9 gates and 16 wires to a netlist network with 7 inputs and 5 outputs.

3.104.12.1. Executing ABC.

3.104.13. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$4909$abc$4239$abc$3444$auto$opt_dff.cc:219:make_patterns_logic$1043, asynchronously reset by \arst_i
Extracted 19 gates and 30 wires to a netlist network with 11 inputs and 7 outputs.

3.104.13.1. Executing ABC.

3.104.14. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$4929$abc$4192$abc$3653$auto$opt_dff.cc:219:make_patterns_logic$1021, asynchronously reset by \arst_i
Extracted 32 gates and 59 wires to a netlist network with 27 inputs and 16 outputs.

3.104.14.1. Executing ABC.

3.104.15. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$4963$abc$3976$abc$3502$auto$opt_dff.cc:219:make_patterns_logic$1054, asynchronously reset by \arst_i
Extracted 20 gates and 35 wires to a netlist network with 15 inputs and 12 outputs.

3.104.15.1. Executing ABC.

3.104.16. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$5203$abc$4259$abc$3288$ser_des.Baud_Rate, enabled by $abc$4988$abc$4259$abc$3267$auto$opt_dff.cc:194:make_patterns_logic$1127, asynchronously reset by \arst_i
Extracted 20 gates and 30 wires to a netlist network with 10 inputs and 9 outputs.

3.104.16.1. Executing ABC.

3.104.17. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$5008$abc$4281$abc$3399$auto$opt_dff.cc:219:make_patterns_logic$1032, asynchronously reset by \arst_i
Extracted 31 gates and 52 wires to a netlist network with 21 inputs and 19 outputs.

3.104.17.1. Executing ABC.

3.104.18. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, enabled by $abc$5048$abc$4321$abc$3686$auto$opt_dff.cc:219:make_patterns_logic$1115, asynchronously reset by \arst_i
Extracted 49 gates and 75 wires to a netlist network with 26 inputs and 36 outputs.

3.104.18.1. Executing ABC.

3.104.19. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: $abc$5203$abc$4259$abc$3288$ser_des.Baud_Rate, asynchronously reset by \arst_i
Extracted 83 gates and 113 wires to a netlist network with 30 inputs and 21 outputs.

3.104.19.1. Executing ABC.

3.104.20. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \wb_clk_i, asynchronously reset by \arst_i
Extracted 102 gates and 114 wires to a netlist network with 12 inputs and 28 outputs.

3.104.20.1. Executing ABC.

yosys> opt_ffinv

3.105. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.106. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

yosys> opt_merge -nomux

3.107. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
<suppressed ~120 debug messages>
Removed a total of 40 cells.

yosys> opt_muxtree

3.108. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.109. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.110. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_share

3.111. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$5493$auto$blifparse.cc:381:parse_blif$5515 in front of them:
        $abc$5730$auto$blifparse.cc:381:parse_blif$5747
        $abc$5778$auto$blifparse.cc:381:parse_blif$5805


yosys> opt_dff -nosdff -sat

3.112. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.113. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 4009 unused wires.
<suppressed ~31 debug messages>

yosys> opt_expr

3.114. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~1 debug messages>

yosys> opt_muxtree

3.115. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.116. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.117. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_share

3.118. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.119. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.120. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.121. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
MAX OPT ITERATION = 2

yosys> bmuxmap

3.122. Executing BMUXMAP pass.

yosys> demuxmap

3.123. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_fFTNjY/abc_tmp_1.scr

3.124. Executing ABC pass (technology mapping using ABC).

3.124.1. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Extracted 488 gates and 611 wires to a netlist network with 123 inputs and 105 outputs.

3.124.1.1. Executing ABC.
DE:   #PIs = 123  #Luts =   171  Max Lvl =   4  Avg Lvl =   1.94  [   0.12 sec. at Pass 0]{firstMap}
DE:   #PIs = 123  #Luts =   158  Max Lvl =   6  Avg Lvl =   2.35  [   0.81 sec. at Pass 1]{initMapFlow}
DE:   #PIs = 123  #Luts =   157  Max Lvl =   6  Avg Lvl =   2.34  [   0.16 sec. at Pass 2]{map}
DE:   #PIs = 123  #Luts =   155  Max Lvl =   5  Avg Lvl =   2.29  [   0.29 sec. at Pass 3]{postMap}
DE:   #PIs = 123  #Luts =   155  Max Lvl =   5  Avg Lvl =   2.29  [   0.83 sec. at Pass 4]{map}
DE:   #PIs = 123  #Luts =   154  Max Lvl =   5  Avg Lvl =   2.10  [   1.07 sec. at Pass 5]{postMap}
DE:   #PIs = 123  #Luts =   154  Max Lvl =   5  Avg Lvl =   2.10  [   0.82 sec. at Pass 6]{map}
DE:   #PIs = 123  #Luts =   153  Max Lvl =   5  Avg Lvl =   2.10  [   0.96 sec. at Pass 7]{postMap}
DE:   #PIs = 123  #Luts =   153  Max Lvl =   5  Avg Lvl =   2.10  [   1.02 sec. at Pass 8]{map}
DE:   #PIs = 123  #Luts =   153  Max Lvl =   5  Avg Lvl =   2.10  [   0.99 sec. at Pass 9]{postMap}
DE:   #PIs = 123  #Luts =   153  Max Lvl =   5  Avg Lvl =   2.10  [   1.00 sec. at Pass 10]{map}
DE:   #PIs = 123  #Luts =   152  Max Lvl =   4  Avg Lvl =   2.08  [   3.23 sec. at Pass 11]{pushMap}
DE:   #PIs = 123  #Luts =   151  Max Lvl =   4  Avg Lvl =   2.08  [   1.01 sec. at Pass 12]{postMap}
DE:   #PIs = 123  #Luts =   151  Max Lvl =   4  Avg Lvl =   2.08  [   0.75 sec. at Pass 13]{map}
DE:   #PIs = 123  #Luts =   151  Max Lvl =   4  Avg Lvl =   2.08  [   1.34 sec. at Pass 14]{postMap}
DE:   #PIs = 123  #Luts =   151  Max Lvl =   4  Avg Lvl =   2.08  [   0.59 sec. at Pass 15]{map}
DE:   #PIs = 123  #Luts =   151  Max Lvl =   4  Avg Lvl =   2.08  [   2.10 sec. at Pass 16]{pushMap}
DE:   #PIs = 123  #Luts =   151  Max Lvl =   4  Avg Lvl =   2.08  [   0.41 sec. at Pass 17]{finalMap}

yosys> opt_expr

3.125. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

yosys> opt_merge -nomux

3.126. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.127. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

yosys> opt_reduce

3.128. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.129. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_share

3.130. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.131. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.132. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 609 unused wires.
<suppressed ~10 debug messages>

yosys> opt_expr

3.133. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.134. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.135. Printing statistics.

=== spi_master_top ===

   Number of wires:                361
   Number of wire bits:            627
   Number of public wires:         131
   Number of public wire bits:     397
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                263
     $_DFFE_PP0P_                   66
     $_DFF_PP0_                     37
     $_DFF_P_                        8
     $lut                          151
     $mux                            1


yosys> shregmap -minlen 8 -maxlen 20

3.136. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.137. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.138. Printing statistics.

=== spi_master_top ===

   Number of wires:                361
   Number of wire bits:            627
   Number of public wires:         131
   Number of public wire bits:     397
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                263
     $_DFFE_PP0P_                   66
     $_DFF_PP0_                     37
     $_DFF_P_                        8
     $lut                          151
     $mux                            1


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.139. Executing TECHMAP pass (map to technology primitives).

3.139.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.139.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.139.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $mux.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~502 debug messages>

yosys> opt_expr -mux_undef

3.140. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~3549 debug messages>

yosys> simplemap

3.141. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.142. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

yosys> opt_merge

3.143. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
<suppressed ~1197 debug messages>
Removed a total of 399 cells.

yosys> opt_dff -nodffe -nosdff

3.144. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.145. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 902 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.146. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
<suppressed ~41 debug messages>

yosys> opt_merge -nomux

3.147. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.148. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.149. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.150. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_share

3.151. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.152. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.153. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.154. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_fFTNjY/abc_tmp_2.scr

3.155. Executing ABC pass (technology mapping using ABC).

3.155.1. Extracting gate netlist of module `\spi_master_top' to `<abc-temp-dir>/input.blif'..
Extracted 609 gates and 734 wires to a netlist network with 123 inputs and 106 outputs.

3.155.1.1. Executing ABC.
DE:   #PIs = 123  #Luts =   152  Max Lvl =   4  Avg Lvl =   1.88  [   0.12 sec. at Pass 0]{firstMap}
DE:   #PIs = 123  #Luts =   152  Max Lvl =   4  Avg Lvl =   1.88  [   1.26 sec. at Pass 1]{initMapFlow}
DE:   #PIs = 123  #Luts =   152  Max Lvl =   4  Avg Lvl =   1.88  [   0.25 sec. at Pass 2]{map}
DE:   #PIs = 123  #Luts =   152  Max Lvl =   4  Avg Lvl =   1.88  [   0.81 sec. at Pass 3]{postMap}
DE:   #PIs = 123  #Luts =   152  Max Lvl =   4  Avg Lvl =   1.88  [   0.52 sec. at Pass 4]{map}
DE:   #PIs = 123  #Luts =   151  Max Lvl =   4  Avg Lvl =   2.07  [   1.06 sec. at Pass 5]{postMap}
DE:   #PIs = 123  #Luts =   151  Max Lvl =   4  Avg Lvl =   2.07  [   0.81 sec. at Pass 6]{map}
DE:   #PIs = 123  #Luts =   151  Max Lvl =   4  Avg Lvl =   2.07  [   0.82 sec. at Pass 7]{postMap}
DE:   #PIs = 123  #Luts =   151  Max Lvl =   4  Avg Lvl =   2.07  [   0.63 sec. at Pass 8]{map}
DE:   #PIs = 123  #Luts =   151  Max Lvl =   4  Avg Lvl =   2.07  [   2.67 sec. at Pass 9]{pushMap}
DE:   #PIs = 123  #Luts =   151  Max Lvl =   4  Avg Lvl =   2.07  [   0.57 sec. at Pass 10]{finalMap}

yosys> opt_expr

3.156. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.

yosys> opt_merge -nomux

3.157. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.158. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.159. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master_top.
Performed a total of 0 changes.

yosys> opt_merge

3.160. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master_top'.
Removed a total of 0 cells.

yosys> opt_share

3.161. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.162. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.163. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 611 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.164. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master_top.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.165. Executing HIERARCHY pass (managing design hierarchy).

3.165.1. Analyzing design hierarchy..
Top module:  \spi_master_top

3.165.2. Analyzing design hierarchy..
Top module:  \spi_master_top
Removed 0 unused modules.

yosys> stat

3.166. Printing statistics.

=== spi_master_top ===

   Number of wires:                360
   Number of wire bits:            626
   Number of public wires:         131
   Number of public wire bits:     397
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                262
     $lut                          151
     dffsre                        111


yosys> opt_clean -purge

3.167. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master_top..
Removed 0 unused cells and 100 unused wires.
<suppressed ~100 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.168. Executing Verilog backend.
Dumping module `\spi_master_top'.

Warnings: 27 unique messages, 27 total
End of script. Logfile hash: 846460ca19, CPU: user 2.38s system 0.09s, MEM: 46.79 MB peak
Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)
Time spent: 97% 6x abc (85 sec), 0% 31x opt_expr (0 sec), ...
real 49.68
user 78.21
sys 9.16
