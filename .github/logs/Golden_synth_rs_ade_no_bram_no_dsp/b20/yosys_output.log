
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.92
 Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b20.vhd

yosys> verific -vhdl b20.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b20.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b20.vhd:1: analyzing entity 'b14'
VERIFIC-INFO [VHDL-1010] b20.vhd:11: analyzing architecture 'behav'
VERIFIC-INFO [VHDL-1012] b20.vhd:511: analyzing entity 'b14rev'
VERIFIC-INFO [VHDL-1010] b20.vhd:521: analyzing architecture 'behav'
VERIFIC-INFO [VHDL-1012] b20.vhd:1021: analyzing entity 'b20'
VERIFIC-INFO [VHDL-1010] b20.vhd:1029: analyzing architecture 'behav'

yosys> synth_rs -top b20 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.79

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b20

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b20.vhd:1021: processing 'b20(BEHAV)'
VERIFIC-INFO [VHDL-1067] b20.vhd:1: processing 'b14(BEHAV)'
VERIFIC-INFO [VHDL-1172] b20.vhd:478: 'others' clause is never selected
VERIFIC-INFO [VHDL-1067] b20.vhd:511: processing 'b14rev(BEHAV)'
VERIFIC-INFO [VHDL-1172] b20.vhd:988: 'others' clause is never selected
Importing module b20.
Importing module b14(BEHAV).
Importing module b14rev(BEHAV).

3.4.1. Analyzing design hierarchy..
Top module:  \b20
Used module:     \b14rev(BEHAV)
Used module:     \b14(BEHAV)

3.4.2. Analyzing design hierarchy..
Top module:  \b20
Used module:     \b14rev(BEHAV)
Used module:     \b14(BEHAV)
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b14rev(BEHAV).
<suppressed ~26 debug messages>
Optimizing module b14(BEHAV).
<suppressed ~26 debug messages>
Optimizing module b20.

yosys> bmuxmap

3.6. Executing BMUXMAP pass.

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).
Deleting now unused module b14(BEHAV).
Deleting now unused module b14rev(BEHAV).
<suppressed ~2 debug messages>

yosys> bmuxmap

3.9. Executing BMUXMAP pass.

yosys> demuxmap

3.10. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.11. Executing TRIBUF pass.

yosys> deminout

3.12. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~122 debug messages>

yosys> opt_clean

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 26 unused cells and 444 unused wires.
<suppressed ~129 debug messages>

yosys> check

3.15. Executing CHECK pass (checking for obvious problems).
Checking module b20...
Found and reported 0 problems.

yosys> opt_expr

3.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~3 debug messages>

yosys> opt_merge -nomux

3.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.18. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\P1.$verific$i684$b20.vhd:501$524.
    dead port 2/2 on $mux $flatten\P1.$verific$mux_672$b20.vhd:501$515.
    dead port 2/2 on $mux $flatten\P1.$verific$mux_685$b20.vhd:501$526.
    dead port 2/2 on $mux $flatten\P2.$verific$i653$b20.vhd:1011$1044.
    dead port 2/2 on $mux $flatten\P2.$verific$mux_641$b20.vhd:1011$1035.
    dead port 2/2 on $mux $flatten\P2.$verific$mux_654$b20.vhd:1011$1046.
Removed 6 multiplexer ports.
<suppressed ~50 debug messages>

yosys> opt_reduce

3.19. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
    New ctrl vector for $pmux cell $flatten\P1.$verific$select_746$b20.vhd:486$477: { $flatten\P1.$verific$n2255$108 $auto$opt_reduce.cc:134:opt_pmux$1515 }
    New ctrl vector for $pmux cell $flatten\P1.$verific$select_750$b20.vhd:486$418: { $flatten\P1.$verific$n2256$109 $auto$opt_reduce.cc:134:opt_pmux$1517 }
    New ctrl vector for $pmux cell $flatten\P1.$verific$select_751$b20.vhd:486$495: { $flatten\P1.$verific$n2257$110 $auto$opt_reduce.cc:134:opt_pmux$1519 }
    New ctrl vector for $pmux cell $flatten\P1.$verific$select_752$b20.vhd:486$496: { $flatten\P1.$verific$n2258$111 $auto$opt_reduce.cc:134:opt_pmux$1521 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_494$b20.vhd:953$991: { $flatten\P2.$verific$n2118$610 $auto$opt_reduce.cc:134:opt_pmux$1523 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_495$b20.vhd:953$992: { $flatten\P2.$verific$n2120$612 $auto$opt_reduce.cc:134:opt_pmux$1525 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_496$b20.vhd:953$993: { $flatten\P2.$verific$n2119$611 $auto$opt_reduce.cc:134:opt_pmux$1527 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_497$b20.vhd:953$994: { $flatten\P2.$verific$n2121$613 $auto$opt_reduce.cc:134:opt_pmux$1529 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_534$b20.vhd:973$997: { $flatten\P2.$verific$n2121$613 $auto$opt_reduce.cc:134:opt_pmux$1531 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_535$b20.vhd:973$998: { $flatten\P2.$verific$n2119$611 $auto$opt_reduce.cc:134:opt_pmux$1533 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_536$b20.vhd:973$999: { $flatten\P2.$verific$n2120$612 $auto$opt_reduce.cc:134:opt_pmux$1535 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_537$b20.vhd:973$1000: { $flatten\P2.$verific$n2118$610 $auto$opt_reduce.cc:134:opt_pmux$1537 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_617$b20.vhd:996$1011: { $flatten\P2.$verific$n2121$613 $auto$opt_reduce.cc:134:opt_pmux$1539 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_618$b20.vhd:996$1012: { $flatten\P2.$verific$n2120$612 $auto$opt_reduce.cc:134:opt_pmux$1541 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_619$b20.vhd:996$1013: { $flatten\P2.$verific$n2119$611 $auto$opt_reduce.cc:134:opt_pmux$1543 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_620$b20.vhd:996$1014: { $flatten\P2.$verific$n2118$610 $auto$opt_reduce.cc:134:opt_pmux$1545 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_717$b20.vhd:873$982: { $flatten\P2.$verific$n2118$610 $auto$opt_reduce.cc:134:opt_pmux$1547 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_718$b20.vhd:873$988: { $flatten\P2.$verific$n2119$611 $auto$opt_reduce.cc:134:opt_pmux$1549 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_719$b20.vhd:873$989: { $flatten\P2.$verific$n2120$612 $auto$opt_reduce.cc:134:opt_pmux$1551 }
    New ctrl vector for $pmux cell $flatten\P2.$verific$select_720$b20.vhd:873$990: { $flatten\P2.$verific$n2121$613 $auto$opt_reduce.cc:134:opt_pmux$1553 }
  Optimizing cells in module \b20.
Performed a total of 20 changes.

yosys> opt_merge

3.20. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~54 debug messages>
Removed a total of 18 cells.

yosys> opt_share

3.21. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux $flatten\P1.$auto$bmuxmap.cc:60:execute$1475 in front of them:
        $flatten\P1.$verific$i102$b20.vhd:169$443
        $flatten\P1.$verific$i98$b20.vhd:164$442

    Found cells that share an operand and can be merged by moving the $mux $flatten\P1.$auto$bmuxmap.cc:60:execute$1476 in front of them:
        $flatten\P1.$verific$i109$b20.vhd:179$445
        $flatten\P1.$verific$i105$b20.vhd:174$444

    Found cells that share an operand and can be merged by moving the $mux $flatten\P1.$auto$bmuxmap.cc:60:execute$1477 in front of them:
        $flatten\P1.$verific$i116$b20.vhd:189$447
        $flatten\P1.$verific$i113$b20.vhd:184$446

    Found cells that share an operand and can be merged by moving the $mux $flatten\P1.$auto$bmuxmap.cc:60:execute$1478 in front of them:
        $flatten\P1.$verific$i131$b20.vhd:205$449
        $flatten\P1.$verific$i123$b20.vhd:197$448

    Found cells that share an operand and can be merged by moving the $mux $flatten\P2.$auto$bmuxmap.cc:60:execute$1088 in front of them:
        $flatten\P2.$verific$sub_634$b20.vhd:1004$1027
        $flatten\P2.$verific$sub_632$b20.vhd:1003$1024

    Found cells that share an operand and can be merged by moving the $mux $flatten\P1.$auto$bmuxmap.cc:60:execute$1305 in front of them:
        $flatten\P1.$verific$add_664$b20.vhd:494$507
        $flatten\P1.$verific$add_662$b20.vhd:493$505

    Found cells that share an operand and can be merged by moving the $mux $flatten\P2.$auto$bmuxmap.cc:60:execute$1269 in front of them:
        $flatten\P2.$verific$i100$b20.vhd:679$946
        $flatten\P2.$verific$i96$b20.vhd:674$945

    Found cells that share an operand and can be merged by moving the $mux $flatten\P2.$auto$bmuxmap.cc:60:execute$1270 in front of them:
        $flatten\P2.$verific$i107$b20.vhd:689$948
        $flatten\P2.$verific$i103$b20.vhd:684$947

    Found cells that share an operand and can be merged by moving the $mux $flatten\P2.$auto$bmuxmap.cc:60:execute$1271 in front of them:
        $flatten\P2.$verific$i114$b20.vhd:699$950
        $flatten\P2.$verific$i111$b20.vhd:694$949

    Found cells that share an operand and can be merged by moving the $mux $flatten\P2.$auto$bmuxmap.cc:60:execute$1272 in front of them:
        $flatten\P2.$verific$i129$b20.vhd:715$952
        $flatten\P2.$verific$i121$b20.vhd:707$951


yosys> opt_dff -nosdff -nodffe

3.22. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $flatten\P2.$verific$wr_reg$b20.vhd:1015$1081 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$state_reg$b20.vhd:1015$1083 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$reg3_reg$b20.vhd:1015$1078 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$reg2_reg$b20.vhd:1015$1077 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$reg1_reg$b20.vhd:1015$1076 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$reg0_reg$b20.vhd:1015$1075 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$rd_reg$b20.vhd:1015$1080 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$datao_reg$b20.vhd:1015$1082 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$addr_reg$b20.vhd:1015$1079 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$IR_reg$b20.vhd:1015$1072 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P2.$verific$B_reg$b20.vhd:1015$1074 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$wr_reg$b20.vhd:505$561 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$state_reg$b20.vhd:505$563 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$reg3_reg$b20.vhd:505$558 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$reg2_reg$b20.vhd:505$557 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$reg1_reg$b20.vhd:505$556 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$reg0_reg$b20.vhd:505$555 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$rd_reg$b20.vhd:505$560 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$datao_reg$b20.vhd:505$562 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$addr_reg$b20.vhd:505$559 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$IR_reg$b20.vhd:505$552 ($aldff) from module b20.
Changing const-value async load to async reset on $flatten\P1.$verific$B_reg$b20.vhd:505$554 ($aldff) from module b20.

yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 45 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~14 debug messages>

yosys> opt_muxtree

3.25. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

yosys> opt_reduce

3.26. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

yosys> opt_share

3.28. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux $flatten\P1.$auto$bmuxmap.cc:60:execute$1482 in front of them:
        $flatten\P1.$verific$i109$b20.vhd:179$445
        $flatten\P1.$verific$i102$b20.vhd:169$443

    Found cells that share an operand and can be merged by moving the $mux $flatten\P1.$auto$bmuxmap.cc:60:execute$1483 in front of them:
        $flatten\P1.$verific$i131$b20.vhd:205$449
        $flatten\P1.$verific$i116$b20.vhd:189$447

    Found cells that share an operand and can be merged by moving the $mux $flatten\P2.$auto$bmuxmap.cc:60:execute$1276 in front of them:
        $flatten\P2.$verific$i107$b20.vhd:689$948
        $flatten\P2.$verific$i100$b20.vhd:679$946

    Found cells that share an operand and can be merged by moving the $mux $flatten\P2.$auto$bmuxmap.cc:60:execute$1277 in front of them:
        $flatten\P2.$verific$i129$b20.vhd:715$952
        $flatten\P2.$verific$i114$b20.vhd:699$950


yosys> opt_dff -nosdff -nodffe

3.29. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.31. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~4 debug messages>

yosys> opt_muxtree

3.32. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

yosys> opt_reduce

3.33. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.34. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_share

3.35. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux $flatten\P1.$auto$bmuxmap.cc:60:execute$1486 in front of them:
        $flatten\P1.$verific$i131$b20.vhd:205$449
        $flatten\P1.$verific$i109$b20.vhd:179$445

    Found cells that share an operand and can be merged by moving the $mux $flatten\P2.$auto$bmuxmap.cc:60:execute$1280 in front of them:
        $flatten\P2.$verific$i129$b20.vhd:715$952
        $flatten\P2.$verific$i107$b20.vhd:689$948


yosys> opt_dff -nosdff -nodffe

3.36. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.37. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~2 debug messages>

yosys> opt_muxtree

3.39. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~57 debug messages>

yosys> opt_reduce

3.40. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.41. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_share

3.42. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.43. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.45. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
MAX OPT ITERATION = 4

yosys> fsm -encoding binary

3.46. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.46.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register b20.P1.d.
Found FSM state register b20.P2.d.

yosys> fsm_extract

3.46.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\P1.d' from module `\b20'.
  found $adff cell for state register: $flatten\P1.$verific$d_reg$b20.vhd:505$553
  root of input selection tree: $flatten\P1.$verific$n11472$358
  found reset state: 0 (from async reset)
  found ctrl input: \P1.state
  found ctrl input: $flatten\P1.$verific$n341$204 [0]
  found ctrl input: $flatten\P1.$verific$n10346$175
  found ctrl input: $flatten\P1.$verific$n1405$102
  found ctrl input: $flatten\P1.$verific$n1440$103
  found ctrl input: $flatten\P1.$verific$n1474$104
  found ctrl input: $flatten\P1.$verific$n1475$105
  found ctrl input: $flatten\P1.$verific$n1476$106
  found ctrl input: $flatten\P1.$verific$n1477$107
  found state code: 1
  found state code: 2
  found state code: 3
  found ctrl input: \P1.B
  ctrl inputs: { \P1.state \P1.B $flatten\P1.$verific$n341$204 [0] $flatten\P1.$verific$n1477$107 $flatten\P1.$verific$n1476$106 $flatten\P1.$verific$n1475$105 $flatten\P1.$verific$n1474$104 $flatten\P1.$verific$n1440$103 $flatten\P1.$verific$n1405$102 $flatten\P1.$verific$n10346$175 }
  ctrl outputs: $flatten\P1.$verific$n11472$358
  transition:          0 10'0--------- ->          0 0
  transition:          0 10'1-00000000 ->          0 0
  transition:          0 10'1-01000000 ->          0 0
  transition:          0 10'1-0-100000 ->          1 1
  transition:          0 10'1-0--10000 ->          2 2
  transition:          0 10'1-0---1000 ->          3 3
  transition:          0 10'100----100 ->          0 0
  transition:          0 10'110----100 ->          3 3
  transition:          0 10'100-----10 ->          3 3
  transition:          0 10'110-----10 ->          0 0
  transition:          0 10'1-0------1 ->          0 0
  transition:          0 10'1-1------- ->          0 0
  transition:          2 10'0--------- ->          2 2
  transition:          2 10'1-00000000 ->          2 2
  transition:          2 10'1-01000000 ->          0 0
  transition:          2 10'1-0-100000 ->          1 1
  transition:          2 10'1-0--10000 ->          2 2
  transition:          2 10'1-0---1000 ->          3 3
  transition:          2 10'100----100 ->          2 2
  transition:          2 10'110----100 ->          3 3
  transition:          2 10'100-----10 ->          3 3
  transition:          2 10'110-----10 ->          2 2
  transition:          2 10'1-0------1 ->          2 2
  transition:          2 10'1-1------- ->          2 2
  transition:          1 10'0--------- ->          1 1
  transition:          1 10'1-00000000 ->          1 1
  transition:          1 10'1-01000000 ->          0 0
  transition:          1 10'1-0-100000 ->          1 1
  transition:          1 10'1-0--10000 ->          2 2
  transition:          1 10'1-0---1000 ->          3 3
  transition:          1 10'100----100 ->          1 1
  transition:          1 10'110----100 ->          3 3
  transition:          1 10'100-----10 ->          3 3
  transition:          1 10'110-----10 ->          1 1
  transition:          1 10'1-0------1 ->          1 1
  transition:          1 10'1-1------- ->          1 1
  transition:          3 10'0--------- ->          3 3
  transition:          3 10'1-00000000 ->          3 3
  transition:          3 10'1-01000000 ->          0 0
  transition:          3 10'1-0-100000 ->          1 1
  transition:          3 10'1-0--10000 ->          2 2
  transition:          3 10'1-0---1000 ->          3 3
  transition:          3 10'100----100 ->          3 3
  transition:          3 10'110----100 ->          3 3
  transition:          3 10'100-----10 ->          3 3
  transition:          3 10'110-----10 ->          3 3
  transition:          3 10'1-0------1 ->          3 3
  transition:          3 10'1-1------- ->          3 3
Extracting FSM `\P2.d' from module `\b20'.
  found $adff cell for state register: $flatten\P2.$verific$d_reg$b20.vhd:1015$1073
  root of input selection tree: $flatten\P2.$verific$n11328$861
  found reset state: 0 (from async reset)
  found ctrl input: \P2.state
  found ctrl input: $flatten\P2.$verific$n341$704 [0]
  found ctrl input: $flatten\P2.$verific$n10195$677
  found ctrl input: $flatten\P2.$verific$n1406$604
  found ctrl input: $flatten\P2.$verific$n1441$605
  found ctrl input: $flatten\P2.$verific$n1475$606
  found ctrl input: $flatten\P2.$verific$n1476$607
  found ctrl input: $flatten\P2.$verific$n1477$608
  found ctrl input: $flatten\P2.$verific$n1478$609
  found state code: 1
  found state code: 2
  found state code: 3
  found ctrl input: \P2.B
  ctrl inputs: { \P2.state \P2.B $flatten\P2.$verific$n341$704 [0] $flatten\P2.$verific$n1478$609 $flatten\P2.$verific$n1477$608 $flatten\P2.$verific$n1476$607 $flatten\P2.$verific$n1475$606 $flatten\P2.$verific$n1441$605 $flatten\P2.$verific$n1406$604 $flatten\P2.$verific$n10195$677 }
  ctrl outputs: $flatten\P2.$verific$n11328$861
  transition:          0 10'0--------- ->          0 0
  transition:          0 10'1-00000000 ->          0 0
  transition:          0 10'1-01000000 ->          0 0
  transition:          0 10'1-0-100000 ->          1 1
  transition:          0 10'1-0--10000 ->          2 2
  transition:          0 10'1-0---1000 ->          3 3
  transition:          0 10'100----100 ->          0 0
  transition:          0 10'110----100 ->          3 3
  transition:          0 10'100-----10 ->          3 3
  transition:          0 10'110-----10 ->          0 0
  transition:          0 10'1-0------1 ->          0 0
  transition:          0 10'1-1------- ->          0 0
  transition:          2 10'0--------- ->          2 2
  transition:          2 10'1-00000000 ->          2 2
  transition:          2 10'1-01000000 ->          0 0
  transition:          2 10'1-0-100000 ->          1 1
  transition:          2 10'1-0--10000 ->          2 2
  transition:          2 10'1-0---1000 ->          3 3
  transition:          2 10'100----100 ->          2 2
  transition:          2 10'110----100 ->          3 3
  transition:          2 10'100-----10 ->          3 3
  transition:          2 10'110-----10 ->          2 2
  transition:          2 10'1-0------1 ->          2 2
  transition:          2 10'1-1------- ->          2 2
  transition:          1 10'0--------- ->          1 1
  transition:          1 10'1-00000000 ->          1 1
  transition:          1 10'1-01000000 ->          0 0
  transition:          1 10'1-0-100000 ->          1 1
  transition:          1 10'1-0--10000 ->          2 2
  transition:          1 10'1-0---1000 ->          3 3
  transition:          1 10'100----100 ->          1 1
  transition:          1 10'110----100 ->          3 3
  transition:          1 10'100-----10 ->          3 3
  transition:          1 10'110-----10 ->          1 1
  transition:          1 10'1-0------1 ->          1 1
  transition:          1 10'1-1------- ->          1 1
  transition:          3 10'0--------- ->          3 3
  transition:          3 10'1-00000000 ->          3 3
  transition:          3 10'1-01000000 ->          0 0
  transition:          3 10'1-0-100000 ->          1 1
  transition:          3 10'1-0--10000 ->          2 2
  transition:          3 10'1-0---1000 ->          3 3
  transition:          3 10'100----100 ->          3 3
  transition:          3 10'110----100 ->          3 3
  transition:          3 10'100-----10 ->          3 3
  transition:          3 10'110-----10 ->          3 3
  transition:          3 10'1-0------1 ->          3 3
  transition:          3 10'1-1------- ->          3 3

yosys> fsm_opt

3.46.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\P2.d$1604' from module `\b20'.
  Merging pattern 10'1-00000000 and 10'1-01000000 from group (0 0 0).
  Merging pattern 10'1-01000000 and 10'1-00000000 from group (0 0 0).
  Merging pattern 10'100----100 and 10'110----100 from group (3 3 3).
  Merging pattern 10'110----100 and 10'100----100 from group (3 3 3).
  Merging pattern 10'100-----10 and 10'110-----10 from group (3 3 3).
  Merging pattern 10'110-----10 and 10'100-----10 from group (3 3 3).
Optimizing FSM `$fsm$\P1.d$1602' from module `\b20'.
  Merging pattern 10'1-00000000 and 10'1-01000000 from group (0 0 0).
  Merging pattern 10'1-01000000 and 10'1-00000000 from group (0 0 0).
  Merging pattern 10'100----100 and 10'110----100 from group (3 3 3).
  Merging pattern 10'110----100 and 10'100----100 from group (3 3 3).
  Merging pattern 10'100-----10 and 10'110-----10 from group (3 3 3).
  Merging pattern 10'110-----10 and 10'100-----10 from group (3 3 3).

yosys> opt_clean

3.46.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 6 unused cells and 6 unused wires.
<suppressed ~7 debug messages>

yosys> fsm_opt

3.46.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\P1.d$1602' from module `\b20'.
Optimizing FSM `$fsm$\P2.d$1604' from module `\b20'.

yosys> fsm_recode -encoding binary

3.46.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\P1.d$1602' from module `\b20' using `auto' encoding:
  mapping auto encoding to `binary` for this FSM.
  00000000000000000000000000000000 -> 00
  00000000000000000000000000000010 -> 01
  00000000000000000000000000000001 -> 10
  00000000000000000000000000000011 -> 11
Recoding FSM `$fsm$\P2.d$1604' from module `\b20' using `auto' encoding:
  mapping auto encoding to `binary` for this FSM.
  00000000000000000000000000000000 -> 00
  00000000000000000000000000000010 -> 01
  00000000000000000000000000000001 -> 10
  00000000000000000000000000000011 -> 11

yosys> fsm_info

3.46.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\P1.d$1602' from module `b20':
-------------------------------------

  Information on FSM $fsm$\P1.d$1602 (\P1.d):

  Number of input signals:   10
  Number of output signals:  32
  Number of state bits:       2

  Input signals:
    0: $flatten\P1.$verific$n10346$175
    1: $flatten\P1.$verific$n1405$102
    2: $flatten\P1.$verific$n1440$103
    3: $flatten\P1.$verific$n1474$104
    4: $flatten\P1.$verific$n1475$105
    5: $flatten\P1.$verific$n1476$106
    6: $flatten\P1.$verific$n1477$107
    7: $flatten\P1.$verific$n341$204 [0]
    8: \P1.B
    9: \P1.state

  Output signals:
    0: $flatten\P1.$verific$n11472$358 [0]
    1: $flatten\P1.$verific$n11472$358 [1]
    2: $flatten\P1.$verific$n11472$358 [2]
    3: $flatten\P1.$verific$n11472$358 [3]
    4: $flatten\P1.$verific$n11472$358 [4]
    5: $flatten\P1.$verific$n11472$358 [5]
    6: $flatten\P1.$verific$n11472$358 [6]
    7: $flatten\P1.$verific$n11472$358 [7]
    8: $flatten\P1.$verific$n11472$358 [8]
    9: $flatten\P1.$verific$n11472$358 [9]
   10: $flatten\P1.$verific$n11472$358 [10]
   11: $flatten\P1.$verific$n11472$358 [11]
   12: $flatten\P1.$verific$n11472$358 [12]
   13: $flatten\P1.$verific$n11472$358 [13]
   14: $flatten\P1.$verific$n11472$358 [14]
   15: $flatten\P1.$verific$n11472$358 [15]
   16: $flatten\P1.$verific$n11472$358 [16]
   17: $flatten\P1.$verific$n11472$358 [17]
   18: $flatten\P1.$verific$n11472$358 [18]
   19: $flatten\P1.$verific$n11472$358 [19]
   20: $flatten\P1.$verific$n11472$358 [20]
   21: $flatten\P1.$verific$n11472$358 [21]
   22: $flatten\P1.$verific$n11472$358 [22]
   23: $flatten\P1.$verific$n11472$358 [23]
   24: $flatten\P1.$verific$n11472$358 [24]
   25: $flatten\P1.$verific$n11472$358 [25]
   26: $flatten\P1.$verific$n11472$358 [26]
   27: $flatten\P1.$verific$n11472$358 [27]
   28: $flatten\P1.$verific$n11472$358 [28]
   29: $flatten\P1.$verific$n11472$358 [29]
   30: $flatten\P1.$verific$n11472$358 [30]
   31: $flatten\P1.$verific$n11472$358 [31]

  State encoding:
    0:       2'00  <RESET STATE>
    1:       2'01
    2:       2'10
    3:       2'11

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 10'1-0-000000   ->     0 0
      1:     0 10'100----100   ->     0 0
      2:     0 10'110-----10   ->     0 0
      3:     0 10'1-0------1   ->     0 0
      4:     0 10'1-1-------   ->     0 0
      5:     0 10'0---------   ->     0 0
      6:     0 10'1-0--10000   ->     1 2
      7:     0 10'1-0-100000   ->     2 1
      8:     0 10'1-0---1000   ->     3 3
      9:     0 10'110----100   ->     3 3
     10:     0 10'100-----10   ->     3 3
     11:     1 10'1-01000000   ->     0 0
     12:     1 10'1-00000000   ->     1 2
     13:     1 10'1-0--10000   ->     1 2
     14:     1 10'100----100   ->     1 2
     15:     1 10'110-----10   ->     1 2
     16:     1 10'1-0------1   ->     1 2
     17:     1 10'1-1-------   ->     1 2
     18:     1 10'0---------   ->     1 2
     19:     1 10'1-0-100000   ->     2 1
     20:     1 10'1-0---1000   ->     3 3
     21:     1 10'110----100   ->     3 3
     22:     1 10'100-----10   ->     3 3
     23:     2 10'1-01000000   ->     0 0
     24:     2 10'1-0--10000   ->     1 2
     25:     2 10'1-00000000   ->     2 1
     26:     2 10'1-0-100000   ->     2 1
     27:     2 10'100----100   ->     2 1
     28:     2 10'110-----10   ->     2 1
     29:     2 10'1-0------1   ->     2 1
     30:     2 10'1-1-------   ->     2 1
     31:     2 10'0---------   ->     2 1
     32:     2 10'1-0---1000   ->     3 3
     33:     2 10'110----100   ->     3 3
     34:     2 10'100-----10   ->     3 3
     35:     3 10'1-01000000   ->     0 0
     36:     3 10'1-0--10000   ->     1 2
     37:     3 10'1-0-100000   ->     2 1
     38:     3 10'1-00000000   ->     3 3
     39:     3 10'1-0---1000   ->     3 3
     40:     3 10'1-0----100   ->     3 3
     41:     3 10'1-0-----10   ->     3 3
     42:     3 10'1-0------1   ->     3 3
     43:     3 10'1-1-------   ->     3 3
     44:     3 10'0---------   ->     3 3

-------------------------------------

FSM `$fsm$\P2.d$1604' from module `b20':
-------------------------------------

  Information on FSM $fsm$\P2.d$1604 (\P2.d):

  Number of input signals:   10
  Number of output signals:  32
  Number of state bits:       2

  Input signals:
    0: $flatten\P2.$verific$n10195$677
    1: $flatten\P2.$verific$n1406$604
    2: $flatten\P2.$verific$n1441$605
    3: $flatten\P2.$verific$n1475$606
    4: $flatten\P2.$verific$n1476$607
    5: $flatten\P2.$verific$n1477$608
    6: $flatten\P2.$verific$n1478$609
    7: $flatten\P2.$verific$n341$704 [0]
    8: \P2.B
    9: \P2.state

  Output signals:
    0: $flatten\P2.$verific$n11328$861 [0]
    1: $flatten\P2.$verific$n11328$861 [1]
    2: $flatten\P2.$verific$n11328$861 [2]
    3: $flatten\P2.$verific$n11328$861 [3]
    4: $flatten\P2.$verific$n11328$861 [4]
    5: $flatten\P2.$verific$n11328$861 [5]
    6: $flatten\P2.$verific$n11328$861 [6]
    7: $flatten\P2.$verific$n11328$861 [7]
    8: $flatten\P2.$verific$n11328$861 [8]
    9: $flatten\P2.$verific$n11328$861 [9]
   10: $flatten\P2.$verific$n11328$861 [10]
   11: $flatten\P2.$verific$n11328$861 [11]
   12: $flatten\P2.$verific$n11328$861 [12]
   13: $flatten\P2.$verific$n11328$861 [13]
   14: $flatten\P2.$verific$n11328$861 [14]
   15: $flatten\P2.$verific$n11328$861 [15]
   16: $flatten\P2.$verific$n11328$861 [16]
   17: $flatten\P2.$verific$n11328$861 [17]
   18: $flatten\P2.$verific$n11328$861 [18]
   19: $flatten\P2.$verific$n11328$861 [19]
   20: $flatten\P2.$verific$n11328$861 [20]
   21: $flatten\P2.$verific$n11328$861 [21]
   22: $flatten\P2.$verific$n11328$861 [22]
   23: $flatten\P2.$verific$n11328$861 [23]
   24: $flatten\P2.$verific$n11328$861 [24]
   25: $flatten\P2.$verific$n11328$861 [25]
   26: $flatten\P2.$verific$n11328$861 [26]
   27: $flatten\P2.$verific$n11328$861 [27]
   28: $flatten\P2.$verific$n11328$861 [28]
   29: $flatten\P2.$verific$n11328$861 [29]
   30: $flatten\P2.$verific$n11328$861 [30]
   31: $flatten\P2.$verific$n11328$861 [31]

  State encoding:
    0:       2'00  <RESET STATE>
    1:       2'01
    2:       2'10
    3:       2'11

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 10'1-0-000000   ->     0 0
      1:     0 10'100----100   ->     0 0
      2:     0 10'110-----10   ->     0 0
      3:     0 10'1-0------1   ->     0 0
      4:     0 10'1-1-------   ->     0 0
      5:     0 10'0---------   ->     0 0
      6:     0 10'1-0--10000   ->     1 2
      7:     0 10'1-0-100000   ->     2 1
      8:     0 10'1-0---1000   ->     3 3
      9:     0 10'110----100   ->     3 3
     10:     0 10'100-----10   ->     3 3
     11:     1 10'1-01000000   ->     0 0
     12:     1 10'1-00000000   ->     1 2
     13:     1 10'1-0--10000   ->     1 2
     14:     1 10'100----100   ->     1 2
     15:     1 10'110-----10   ->     1 2
     16:     1 10'1-0------1   ->     1 2
     17:     1 10'1-1-------   ->     1 2
     18:     1 10'0---------   ->     1 2
     19:     1 10'1-0-100000   ->     2 1
     20:     1 10'1-0---1000   ->     3 3
     21:     1 10'110----100   ->     3 3
     22:     1 10'100-----10   ->     3 3
     23:     2 10'1-01000000   ->     0 0
     24:     2 10'1-0--10000   ->     1 2
     25:     2 10'1-00000000   ->     2 1
     26:     2 10'1-0-100000   ->     2 1
     27:     2 10'100----100   ->     2 1
     28:     2 10'110-----10   ->     2 1
     29:     2 10'1-0------1   ->     2 1
     30:     2 10'1-1-------   ->     2 1
     31:     2 10'0---------   ->     2 1
     32:     2 10'1-0---1000   ->     3 3
     33:     2 10'110----100   ->     3 3
     34:     2 10'100-----10   ->     3 3
     35:     3 10'1-01000000   ->     0 0
     36:     3 10'1-0--10000   ->     1 2
     37:     3 10'1-0-100000   ->     2 1
     38:     3 10'1-00000000   ->     3 3
     39:     3 10'1-0---1000   ->     3 3
     40:     3 10'1-0----100   ->     3 3
     41:     3 10'1-0-----10   ->     3 3
     42:     3 10'1-0------1   ->     3 3
     43:     3 10'1-1-------   ->     3 3
     44:     3 10'0---------   ->     3 3

-------------------------------------

yosys> fsm_map

3.46.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\P1.d$1602' from module `\b20'.
Mapping FSM `$fsm$\P2.d$1604' from module `\b20'.

yosys> opt_expr

3.47. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~14 debug messages>

yosys> opt_merge -nomux

3.48. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~324 debug messages>
Removed a total of 108 cells.

yosys> opt_muxtree

3.49. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~53 debug messages>

yosys> opt_reduce

3.50. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_share

3.52. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.53. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\P2.$verific$reg3_reg$b20.vhd:1015$1078 ($adff) from module b20 (D = $flatten\P2.$verific$n11034$856, Q = \P2.reg3).
Adding EN signal on $flatten\P2.$verific$reg2_reg$b20.vhd:1015$1077 ($adff) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1152, Q = \P2.reg2).
Adding EN signal on $flatten\P2.$verific$reg1_reg$b20.vhd:1015$1076 ($adff) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1171, Q = \P2.reg1).
Adding EN signal on $flatten\P2.$verific$reg0_reg$b20.vhd:1015$1075 ($adff) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1190, Q = \P2.reg0).
Adding EN signal on $flatten\P2.$verific$datao_reg$b20.vhd:1015$1082 ($adff) from module b20 (D = $flatten\P2.$auto$bmuxmap.cc:58:execute$1301, Q = \P2.datao).
Adding EN signal on $flatten\P2.$verific$addr_reg$b20.vhd:1015$1079 ($adff) from module b20 (D = $flatten\P2.$verific$n11102$858, Q = \P2.addr).
Adding EN signal on $flatten\P2.$verific$B_reg$b20.vhd:1015$1074 ($adff) from module b20 (D = $flatten\P2.$verific$n10835$683, Q = \P2.B).
Adding EN signal on $flatten\P1.$verific$reg3_reg$b20.vhd:505$558 ($adff) from module b20 (D = $flatten\P1.$verific$n11178$353 [31:3], Q = \P1.reg3 [31:3]).
Adding EN signal on $flatten\P1.$verific$reg3_reg$b20.vhd:505$558 ($adff) from module b20 (D = $flatten\P1.$auto$bmuxmap.cc:58:execute$1344 [2:0], Q = \P1.reg3 [2:0]).
Adding EN signal on $flatten\P1.$verific$reg2_reg$b20.vhd:505$557 ($adff) from module b20 (D = $flatten\P1.$auto$bmuxmap.cc:58:execute$1363, Q = \P1.reg2).
Adding EN signal on $flatten\P1.$verific$reg1_reg$b20.vhd:505$556 ($adff) from module b20 (D = $flatten\P1.$auto$bmuxmap.cc:58:execute$1382, Q = \P1.reg1).
Adding EN signal on $flatten\P1.$verific$reg0_reg$b20.vhd:505$555 ($adff) from module b20 (D = $flatten\P1.$auto$bmuxmap.cc:58:execute$1401, Q = \P1.reg0).
Adding EN signal on $flatten\P1.$verific$datao_reg$b20.vhd:505$562 ($adff) from module b20 (D = { $flatten\P1.$auto$bmuxmap.cc:58:execute$1507 [31:29] $flatten\P1.$auto$bmuxmap.cc:58:execute$1460 [124:96] }, Q = \P1.datao).
Adding EN signal on $flatten\P1.$verific$addr_reg$b20.vhd:505$559 ($adff) from module b20 (D = $flatten\P1.$verific$n11246$355, Q = \P1.addr).
Adding EN signal on $flatten\P1.$verific$B_reg$b20.vhd:505$554 ($adff) from module b20 (D = $flatten\P1.$verific$n10979$183, Q = \P1.B).

yosys> opt_clean

3.54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 48 unused cells and 152 unused wires.
<suppressed ~49 debug messages>

yosys> opt_expr

3.55. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~2 debug messages>

yosys> opt_muxtree

3.56. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~52 debug messages>

yosys> opt_reduce

3.57. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.58. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~72 debug messages>
Removed a total of 24 cells.

yosys> opt_share

3.59. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.60. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 2 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 3 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 4 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 5 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 6 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 7 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 8 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 9 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 10 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 11 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 12 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 13 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 14 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 15 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 16 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 17 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 18 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 19 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 20 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 21 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 22 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 23 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 24 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 25 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 26 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 27 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 28 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 29 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 30 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 31 on $flatten\P1.$verific$d_reg$b20.vhd:505$553 ($adff) from module b20.
Setting constant 0-bit at position 2 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 3 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 4 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 5 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 6 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 7 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 8 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 9 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 10 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 11 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 12 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 13 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 14 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 15 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 16 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 17 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 18 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 19 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 20 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 21 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 22 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 23 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 24 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 25 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 26 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 27 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 28 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 29 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 30 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.
Setting constant 0-bit at position 31 on $flatten\P2.$verific$d_reg$b20.vhd:1015$1073 ($adff) from module b20.

yosys> opt_clean

3.61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.62. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

yosys> opt_muxtree

3.63. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~52 debug messages>

yosys> opt_reduce

3.64. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.65. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_share

3.66. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.67. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.68. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

yosys> opt_expr

3.69. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
MAX OPT ITERATION = 3

yosys> wreduce -keepdc

3.70. Executing WREDUCE pass (reducing word size of cells).
Removed top 3 bits (of 4) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2194 ($ne).
Removed top 1 bits (of 20) from port A of cell b20.$verific$LessThan_16$b20.vhd:1076$53 ($lt).
Removed top 1 bits (of 20) from port A of cell b20.$verific$LessThan_17$b20.vhd:1076$54 ($lt).
Removed top 1 bits (of 8) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2138 ($ne).
Removed top 1 bits (of 7) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2140 ($ne).
Removed top 1 bits (of 6) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2142 ($ne).
Removed top 1 bits (of 5) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2144 ($ne).
Removed top 1 bits (of 4) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2146 ($ne).
Removed top 1 bits (of 2) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2150 ($ne).
Removed top 4 bits (of 5) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2156 ($ne).
Removed top 3 bits (of 32) from FF cell b20.$auto$ff.cc:262:slice$2044 ($adffe).
Removed top 2 bits (of 4) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2160 ($ne).
Removed top 1 bits (of 21) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1091 ($mux).
Removed top 3 bits (of 29) from FF cell b20.$auto$ff.cc:262:slice$2153 ($adffe).
Removed top 1 bits (of 32) from port A of cell b20.$flatten\P2.$verific$LessThan_14$b20.vhd:593$878 ($lt).
Removed top 1 bits (of 32) from port B of cell b20.$flatten\P2.$verific$LessThan_81$b20.vhd:658$938 ($lt).
Removed top 3 bits (of 5) from port Y of cell b20.$flatten\P2.$verific$add_21$b20.vhd:596$885 ($add).
Removed top 3 bits (of 5) from port A of cell b20.$flatten\P2.$verific$add_21$b20.vhd:596$885 ($add).
Removed top 5 bits (of 8) from port Y of cell b20.$flatten\P2.$verific$add_26$b20.vhd:598$892 ($add).
Removed top 5 bits (of 8) from port A of cell b20.$flatten\P2.$verific$add_26$b20.vhd:598$892 ($add).
Removed top 9 bits (of 13) from port Y of cell b20.$flatten\P2.$verific$add_31$b20.vhd:600$899 ($add).
Removed top 9 bits (of 13) from port A of cell b20.$flatten\P2.$verific$add_31$b20.vhd:600$899 ($add).
Removed top 2 bits (of 32) from port Y of cell b20.$flatten\P2.$verific$add_331$b20.vhd:868$985 ($add).
Removed top 2 bits (of 32) from port A of cell b20.$flatten\P2.$verific$add_331$b20.vhd:868$985 ($add).
Removed top 2 bits (of 32) from port B of cell b20.$flatten\P2.$verific$add_331$b20.vhd:868$985 ($add).
Removed top 8 bits (of 9) from port Y of cell b20.$flatten\P2.$verific$add_36$b20.vhd:602$906 ($add).
Removed top 8 bits (of 9) from port A of cell b20.$flatten\P2.$verific$add_36$b20.vhd:602$906 ($add).
Removed top 1 bits (of 3) from port Y of cell b20.$flatten\P2.$verific$add_44$b20.vhd:606$916 ($add).
Removed top 1 bits (of 3) from port A of cell b20.$flatten\P2.$verific$add_44$b20.vhd:606$916 ($add).
Removed top 1 bits (of 2) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2276 ($ne).
Removed top 1 bits (of 4) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2272 ($ne).
Removed top 1 bits (of 5) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2270 ($ne).
Removed top 1 bits (of 6) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2268 ($ne).
Removed top 1 bits (of 7) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2266 ($ne).
Removed top 1 bits (of 3) from port A of cell b20.$flatten\P2.$verific$equal_139$b20.vhd:731$960 ($eq).
Removed top 1 bits (of 3) from port A of cell b20.$flatten\P2.$verific$equal_140$b20.vhd:733$961 ($eq).
Removed top 2 bits (of 3) from port A of cell b20.$flatten\P2.$verific$equal_141$b20.vhd:734$962 ($eq).
Removed top 31 bits (of 32) from port A of cell b20.$flatten\P2.$verific$equal_169$b20.vhd:754$973 ($eq).
Removed top 30 bits (of 32) from port A of cell b20.$flatten\P2.$verific$equal_170$b20.vhd:755$974 ($eq).
Removed top 30 bits (of 32) from port A of cell b20.$flatten\P2.$verific$equal_171$b20.vhd:756$975 ($eq).
Removed top 1 bits (of 8) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2264 ($ne).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_136$b20.vhd:726$957 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_138$b20.vhd:730$959 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_143$b20.vhd:736$964 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_144$b20.vhd:736$965 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_145$b20.vhd:736$966 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_146$b20.vhd:736$967 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_147$b20.vhd:736$968 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_148$b20.vhd:736$969 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_667$b20.vhd:1012$1056 ($mux).
Removed top 3 bits (of 33) from port Y of cell b20.$flatten\P2.$verific$sub_297$b20.vhd:848$983 ($sub).
Removed top 3 bits (of 33) from port A of cell b20.$flatten\P2.$verific$sub_297$b20.vhd:848$983 ($sub).
Removed top 3 bits (of 33) from port B of cell b20.$flatten\P2.$verific$sub_297$b20.vhd:848$983 ($sub).
Removed top 1 bits (of 30) from port A of cell b20.$flatten\P2.$verific$sub_39$b20.vhd:605$912 ($sub).
Removed top 26 bits (of 30) from port B of cell b20.$flatten\P2.$verific$sub_39$b20.vhd:605$912 ($sub).
Removed top 13 bits (of 33) from port A of cell b20.$flatten\P2.$verific$sub_55$b20.vhd:620$924 ($sub).
Removed top 13 bits (of 33) from port Y of cell b20.$flatten\P2.$verific$sub_55$b20.vhd:620$924 ($sub).
Removed top 13 bits (of 33) from port B of cell b20.$flatten\P2.$verific$sub_55$b20.vhd:620$924 ($sub).
Removed top 13 bits (of 33) from port A of cell b20.$flatten\P2.$verific$sub_59$b20.vhd:623$926 ($sub).
Removed top 13 bits (of 33) from port Y of cell b20.$flatten\P2.$verific$sub_59$b20.vhd:623$926 ($sub).
Removed top 13 bits (of 33) from port B of cell b20.$flatten\P2.$verific$sub_59$b20.vhd:623$926 ($sub).
Removed top 1 bits (of 21) from port B of cell b20.$flatten\P2.$verific$sub_634$b20.vhd:1004$1027 ($sub).
Removed top 1 bits (of 21) from port Y of cell b20.$flatten\P2.$verific$sub_634$b20.vhd:1004$1027 ($sub).
Removed top 1 bits (of 21) from port A of cell b20.$flatten\P2.$verific$sub_634$b20.vhd:1004$1027 ($sub).
Removed top 2 bits (of 33) from port B of cell b20.$flatten\P2.$verific$sub_82$b20.vhd:659$939 ($sub).
Removed top 1 bits (of 33) from port Y of cell b20.$flatten\P2.$verific$sub_82$b20.vhd:659$939 ($sub).
Removed top 1 bits (of 33) from port A of cell b20.$flatten\P2.$verific$sub_82$b20.vhd:659$939 ($sub).
Removed top 1 bits (of 33) from port Y of cell b20.$flatten\P2.$verific$unary_minus_15$b20.vhd:594$879 ($neg).
Removed top 1 bits (of 33) from port A of cell b20.$flatten\P2.$verific$unary_minus_15$b20.vhd:594$879 ($neg).
Removed top 1 bits (of 21) from mux cell b20.$auto$opt_share.cc:241:merge_operators$1567 ($mux).
Removed top 3 bits (of 4) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2068 ($ne).
Removed top 1 bits (of 2) from port B of cell b20.$auto$fsm_map.cc:215:map_fsm$1829 ($eq).
Removed top 1 bits (of 2) from port B of cell b20.$auto$fsm_map.cc:215:map_fsm$1610 ($eq).
Removed top 4 bits (of 5) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2209 ($ne).
Removed top 2 bits (of 4) from port B of cell b20.$auto$opt_dff.cc:195:make_patterns_logic$2213 ($ne).
Removed top 20 bits (of 21) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1307 ($mux).
Removed top 2 bits (of 32) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1332 ($mux).
Removed top 2 bits (of 32) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1338 ($mux).
Removed top 1 bits (of 32) from port A of cell b20.$flatten\P1.$verific$LessThan_14$b20.vhd:83$375 ($lt).
Removed top 1 bits (of 32) from port B of cell b20.$flatten\P1.$verific$LessThan_83$b20.vhd:148$435 ($lt).
Removed top 3 bits (of 5) from port Y of cell b20.$flatten\P1.$verific$add_21$b20.vhd:86$382 ($add).
Removed top 3 bits (of 5) from port A of cell b20.$flatten\P1.$verific$add_21$b20.vhd:86$382 ($add).
Removed top 5 bits (of 8) from port Y of cell b20.$flatten\P1.$verific$add_26$b20.vhd:88$389 ($add).
Removed top 5 bits (of 8) from port A of cell b20.$flatten\P1.$verific$add_26$b20.vhd:88$389 ($add).
Removed top 2 bits (of 32) from port Y of cell b20.$flatten\P1.$verific$add_283$b20.vhd:318$478 ($add).
Removed top 2 bits (of 32) from port A of cell b20.$flatten\P1.$verific$add_283$b20.vhd:318$478 ($add).
Removed top 2 bits (of 32) from port B of cell b20.$flatten\P1.$verific$add_283$b20.vhd:318$478 ($add).
Removed top 9 bits (of 13) from port Y of cell b20.$flatten\P1.$verific$add_31$b20.vhd:90$396 ($add).
Removed top 9 bits (of 13) from port A of cell b20.$flatten\P1.$verific$add_31$b20.vhd:90$396 ($add).
Removed top 8 bits (of 9) from port Y of cell b20.$flatten\P1.$verific$add_36$b20.vhd:92$403 ($add).
Removed top 8 bits (of 9) from port A of cell b20.$flatten\P1.$verific$add_36$b20.vhd:92$403 ($add).
Removed top 25 bits (of 26) from port B of cell b20.$flatten\P1.$verific$add_39$b20.vhd:95$409 ($add).
Removed top 1 bits (of 3) from port Y of cell b20.$flatten\P1.$verific$add_44$b20.vhd:96$413 ($add).
Removed top 1 bits (of 3) from port A of cell b20.$flatten\P1.$verific$add_44$b20.vhd:96$413 ($add).
Removed top 12 bits (of 32) from port A of cell b20.$flatten\P1.$verific$add_56$b20.vhd:110$421 ($add).
Removed top 12 bits (of 32) from port Y of cell b20.$flatten\P1.$verific$add_56$b20.vhd:110$421 ($add).
Removed top 12 bits (of 32) from port B of cell b20.$flatten\P1.$verific$add_56$b20.vhd:110$421 ($add).
Removed top 12 bits (of 32) from port A of cell b20.$flatten\P1.$verific$add_61$b20.vhd:113$423 ($add).
Removed top 12 bits (of 32) from port Y of cell b20.$flatten\P1.$verific$add_61$b20.vhd:113$423 ($add).
Removed top 12 bits (of 32) from port B of cell b20.$flatten\P1.$verific$add_61$b20.vhd:113$423 ($add).
Removed top 20 bits (of 21) from port Y of cell b20.$flatten\P1.$verific$add_664$b20.vhd:494$507 ($add).
Removed top 19 bits (of 20) from port A of cell b20.$flatten\P1.$verific$add_664$b20.vhd:494$507 ($add).
Removed top 19 bits (of 20) from port B of cell b20.$flatten\P1.$verific$add_664$b20.vhd:494$507 ($add).
Removed top 1 bits (of 3) from port A of cell b20.$flatten\P1.$verific$equal_141$b20.vhd:221$457 ($eq).
Removed top 1 bits (of 3) from port A of cell b20.$flatten\P1.$verific$equal_142$b20.vhd:223$458 ($eq).
Removed top 2 bits (of 3) from port A of cell b20.$flatten\P1.$verific$equal_143$b20.vhd:224$459 ($eq).
Removed top 31 bits (of 32) from port A of cell b20.$flatten\P1.$verific$equal_177$b20.vhd:244$470 ($eq).
Removed top 30 bits (of 32) from port A of cell b20.$flatten\P1.$verific$equal_178$b20.vhd:245$471 ($eq).
Removed top 30 bits (of 32) from port A of cell b20.$flatten\P1.$verific$equal_179$b20.vhd:246$472 ($eq).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_138$b20.vhd:216$454 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_140$b20.vhd:220$456 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_145$b20.vhd:226$461 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_146$b20.vhd:226$462 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_147$b20.vhd:226$463 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_148$b20.vhd:226$464 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_149$b20.vhd:226$465 ($mux).
Removed top 30 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_150$b20.vhd:226$466 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_698$b20.vhd:502$536 ($mux).
Removed top 32 bits (of 33) from port A of cell b20.$flatten\P1.$verific$sub_168$b20.vhd:243$467 ($sub).
Removed top 1 bits (of 33) from port Y of cell b20.$flatten\P1.$verific$sub_168$b20.vhd:243$467 ($sub).
Removed top 1 bits (of 33) from port B of cell b20.$flatten\P1.$verific$sub_168$b20.vhd:243$467 ($sub).
Removed top 3 bits (of 33) from port Y of cell b20.$flatten\P1.$verific$sub_365$b20.vhd:358$480 ($sub).
Removed top 3 bits (of 33) from port A of cell b20.$flatten\P1.$verific$sub_365$b20.vhd:358$480 ($sub).
Removed top 3 bits (of 33) from port B of cell b20.$flatten\P1.$verific$sub_365$b20.vhd:358$480 ($sub).
Removed top 2 bits (of 33) from port B of cell b20.$flatten\P1.$verific$sub_84$b20.vhd:149$436 ($sub).
Removed top 1 bits (of 33) from port Y of cell b20.$flatten\P1.$verific$sub_84$b20.vhd:149$436 ($sub).
Removed top 1 bits (of 33) from port A of cell b20.$flatten\P1.$verific$sub_84$b20.vhd:149$436 ($sub).
Removed top 1 bits (of 33) from port Y of cell b20.$flatten\P1.$verific$unary_minus_15$b20.vhd:84$376 ($neg).
Removed top 1 bits (of 33) from port A of cell b20.$flatten\P1.$verific$unary_minus_15$b20.vhd:84$376 ($neg).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$verific$mux_648$b20.vhd:1011$1042 ($mux).
Removed top 19 bits (of 20) from mux cell b20.$auto$opt_share.cc:241:merge_operators$1570 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$verific$mux_679$b20.vhd:501$522 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1134 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1345 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1131 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1132 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1342 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1343 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1126 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1127 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1128 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1129 ($mux).
Removed top 1 bits (of 30) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1332 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1337 ($mux).
Removed top 1 bits (of 30) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1338 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1340 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1117 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1121 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1122 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P2.$auto$bmuxmap.cc:60:execute$1123 ($mux).
Removed top 2 bits (of 31) from mux cell b20.$flatten\P2.$verific$select_497$b20.vhd:953$994 ($pmux).
Removed top 2 bits (of 31) from mux cell b20.$flatten\P2.$verific$select_537$b20.vhd:973$1000 ($pmux).
Removed top 2 bits (of 31) from mux cell b20.$flatten\P2.$verific$select_620$b20.vhd:996$1014 ($pmux).
Removed top 2 bits (of 94) from mux cell b20.$flatten\P2.$verific$select_720$b20.vhd:873$990 ($pmux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1328 ($mux).
Removed top 3 bits (of 32) from mux cell b20.$flatten\P1.$auto$bmuxmap.cc:60:execute$1334 ($mux).
Removed top 2 bits (of 155) from mux cell b20.$flatten\P1.$verific$select_752$b20.vhd:486$496 ($pmux).
Removed top 1 bits (of 21) from wire b20.$auto$opt_share.cc:219:merge_operators$1566.
Removed top 20 bits (of 21) from wire b20.$auto$opt_share.cc:219:merge_operators$1569.
Removed top 1 bits (of 21) from wire b20.$auto$rtlil.cc:2466:Mux$1568.
Removed top 19 bits (of 20) from wire b20.$auto$rtlil.cc:2466:Mux$1571.
Removed top 22 bits (of 42) from wire b20.$flatten\P1.$auto$bmuxmap.cc:58:execute$1303.
Removed top 20 bits (of 21) from wire b20.$flatten\P1.$auto$bmuxmap.cc:58:execute$1306.
Removed top 2 bits (of 256) from wire b20.$flatten\P1.$auto$bmuxmap.cc:58:execute$1327.
Removed top 3 bits (of 128) from wire b20.$flatten\P1.$auto$bmuxmap.cc:58:execute$1336.
Removed top 3 bits (of 64) from wire b20.$flatten\P1.$auto$bmuxmap.cc:58:execute$1341.
Removed top 3 bits (of 32) from wire b20.$flatten\P1.$auto$bmuxmap.cc:58:execute$1344.
Removed top 2 bits (of 8) from wire b20.$flatten\P1.$auto$bmuxmap.cc:58:execute$1422.
Removed top 1 bits (of 126) from wire b20.$flatten\P1.$auto$bmuxmap.cc:58:execute$1460.
Removed top 1 bits (of 2) from wire b20.$flatten\P1.$auto$bmuxmap.cc:58:execute$1489.
Removed top 2 bits (of 31) from wire b20.$flatten\P1.$verific$n10126$322.
Removed top 3 bits (of 32) from wire b20.$flatten\P1.$verific$n10755$344.
Removed top 3 bits (of 32) from wire b20.$flatten\P1.$verific$n11178$353.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n11472$358.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1407$226.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1441$227.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1478$228.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1511$229.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1544$230.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1577$231.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1610$232.
Removed top 30 bits (of 32) from wire b20.$flatten\P1.$verific$n1643$233.
Removed top 1 bits (of 33) from wire b20.$flatten\P1.$verific$n184$195.
Removed top 1 bits (of 33) from wire b20.$flatten\P1.$verific$n1987$239.
Removed top 3 bits (of 5) from wire b20.$flatten\P1.$verific$n288$198.
Removed top 5 bits (of 8) from wire b20.$flatten\P1.$verific$n301$200.
Removed top 9 bits (of 13) from wire b20.$flatten\P1.$verific$n318$202.
Removed top 8 bits (of 9) from wire b20.$flatten\P1.$verific$n341$204.
Removed top 2 bits (of 32) from wire b20.$flatten\P1.$verific$n4241$272.
Removed top 1 bits (of 3) from wire b20.$flatten\P1.$verific$n436$208.
Removed top 3 bits (of 33) from wire b20.$flatten\P1.$verific$n5666$286.
Removed top 1 bits (of 33) from wire b20.$flatten\P1.$verific$n933$223.
Removed top 1 bits (of 42) from wire b20.$flatten\P2.$auto$bmuxmap.cc:58:execute$1087.
Removed top 1 bits (of 21) from wire b20.$flatten\P2.$auto$bmuxmap.cc:58:execute$1090.
Removed top 3 bits (of 128) from wire b20.$flatten\P2.$auto$bmuxmap.cc:58:execute$1125.
Removed top 3 bits (of 64) from wire b20.$flatten\P2.$auto$bmuxmap.cc:58:execute$1130.
Removed top 32 bits (of 256) from wire b20.$flatten\P2.$auto$bmuxmap.cc:58:execute$1135.
Removed top 32 bits (of 256) from wire b20.$flatten\P2.$auto$bmuxmap.cc:58:execute$1154.
Removed top 32 bits (of 256) from wire b20.$flatten\P2.$auto$bmuxmap.cc:58:execute$1173.
Removed top 2 bits (of 8) from wire b20.$flatten\P2.$auto$bmuxmap.cc:58:execute$1211.
Removed top 12 bits (of 160) from wire b20.$flatten\P2.$auto$bmuxmap.cc:58:execute$1230.
Removed top 12 bits (of 80) from wire b20.$flatten\P2.$auto$bmuxmap.cc:58:execute$1239.
Removed top 3 bits (of 32) from wire b20.$flatten\P2.$verific$n11034$856.
Removed top 24 bits (of 32) from wire b20.$verific$n378$22.

yosys> peepopt

3.71. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.72. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 70 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.73. Executing BMUXMAP pass.

yosys> demuxmap

3.74. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.75. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b20:
  creating $macc model for $flatten\P1.$verific$add_21$b20.vhd:86$382 ($add).
  creating $macc model for $flatten\P1.$verific$add_26$b20.vhd:88$389 ($add).
  creating $macc model for $flatten\P1.$verific$add_283$b20.vhd:318$478 ($add).
  creating $macc model for $flatten\P1.$verific$add_31$b20.vhd:90$396 ($add).
  creating $macc model for $flatten\P1.$verific$add_36$b20.vhd:92$403 ($add).
  creating $macc model for $flatten\P1.$verific$add_39$b20.vhd:95$409 ($add).
  creating $macc model for $flatten\P1.$verific$add_44$b20.vhd:96$413 ($add).
  creating $macc model for $flatten\P1.$verific$add_56$b20.vhd:110$421 ($add).
  creating $macc model for $flatten\P1.$verific$add_570$b20.vhd:466$485 ($add).
  creating $macc model for $flatten\P1.$verific$add_61$b20.vhd:113$423 ($add).
  creating $macc model for $flatten\P1.$verific$add_664$b20.vhd:494$507 ($add).
  creating $macc model for $flatten\P1.$verific$mult_667$b20.vhd:497$511 ($mul).
  creating $macc model for $flatten\P1.$verific$sub_168$b20.vhd:243$467 ($sub).
  creating $macc model for $flatten\P1.$verific$sub_365$b20.vhd:358$480 ($sub).
  creating $macc model for $flatten\P1.$verific$sub_84$b20.vhd:149$436 ($sub).
  creating $macc model for $flatten\P1.$verific$unary_minus_15$b20.vhd:84$376 ($neg).
  creating $macc model for $flatten\P2.$verific$add_21$b20.vhd:596$885 ($add).
  creating $macc model for $flatten\P2.$verific$add_26$b20.vhd:598$892 ($add).
  creating $macc model for $flatten\P2.$verific$add_31$b20.vhd:600$899 ($add).
  creating $macc model for $flatten\P2.$verific$add_331$b20.vhd:868$985 ($add).
  creating $macc model for $flatten\P2.$verific$add_36$b20.vhd:602$906 ($add).
  creating $macc model for $flatten\P2.$verific$add_44$b20.vhd:606$916 ($add).
  creating $macc model for $flatten\P2.$verific$add_540$b20.vhd:976$1002 ($add).
  creating $macc model for $flatten\P2.$verific$sub_297$b20.vhd:848$983 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_39$b20.vhd:605$912 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_55$b20.vhd:620$924 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_59$b20.vhd:623$926 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_634$b20.vhd:1004$1027 ($sub).
  creating $macc model for $flatten\P2.$verific$sub_82$b20.vhd:659$939 ($sub).
  creating $macc model for $flatten\P2.$verific$unary_minus_15$b20.vhd:594$879 ($neg).
  creating $macc model for $verific$add_24$b20.vhd:1077$58 ($add).
  creating $macc model for $verific$add_3$b20.vhd:1068$40 ($add).
  creating $macc model for $verific$add_30$b20.vhd:1081$60 ($add).
  creating $alu model for $macc $verific$add_30$b20.vhd:1081$60.
  creating $alu model for $macc $verific$add_3$b20.vhd:1068$40.
  creating $alu model for $macc $verific$add_24$b20.vhd:1077$58.
  creating $alu model for $macc $flatten\P2.$verific$unary_minus_15$b20.vhd:594$879.
  creating $alu model for $macc $flatten\P2.$verific$sub_82$b20.vhd:659$939.
  creating $alu model for $macc $flatten\P2.$verific$sub_634$b20.vhd:1004$1027.
  creating $alu model for $macc $flatten\P2.$verific$sub_59$b20.vhd:623$926.
  creating $alu model for $macc $flatten\P2.$verific$sub_55$b20.vhd:620$924.
  creating $alu model for $macc $flatten\P2.$verific$sub_39$b20.vhd:605$912.
  creating $alu model for $macc $flatten\P2.$verific$sub_297$b20.vhd:848$983.
  creating $alu model for $macc $flatten\P2.$verific$add_540$b20.vhd:976$1002.
  creating $alu model for $macc $flatten\P2.$verific$add_44$b20.vhd:606$916.
  creating $alu model for $macc $flatten\P2.$verific$add_36$b20.vhd:602$906.
  creating $alu model for $macc $flatten\P2.$verific$add_331$b20.vhd:868$985.
  creating $alu model for $macc $flatten\P2.$verific$add_31$b20.vhd:600$899.
  creating $alu model for $macc $flatten\P2.$verific$add_26$b20.vhd:598$892.
  creating $alu model for $macc $flatten\P2.$verific$add_21$b20.vhd:596$885.
  creating $alu model for $macc $flatten\P1.$verific$unary_minus_15$b20.vhd:84$376.
  creating $alu model for $macc $flatten\P1.$verific$sub_84$b20.vhd:149$436.
  creating $alu model for $macc $flatten\P1.$verific$sub_365$b20.vhd:358$480.
  creating $alu model for $macc $flatten\P1.$verific$sub_168$b20.vhd:243$467.
  creating $alu model for $macc $flatten\P1.$verific$add_664$b20.vhd:494$507.
  creating $alu model for $macc $flatten\P1.$verific$add_61$b20.vhd:113$423.
  creating $alu model for $macc $flatten\P1.$verific$add_570$b20.vhd:466$485.
  creating $alu model for $macc $flatten\P1.$verific$add_56$b20.vhd:110$421.
  creating $alu model for $macc $flatten\P1.$verific$add_44$b20.vhd:96$413.
  creating $alu model for $macc $flatten\P1.$verific$add_39$b20.vhd:95$409.
  creating $alu model for $macc $flatten\P1.$verific$add_36$b20.vhd:92$403.
  creating $alu model for $macc $flatten\P1.$verific$add_31$b20.vhd:90$396.
  creating $alu model for $macc $flatten\P1.$verific$add_283$b20.vhd:318$478.
  creating $alu model for $macc $flatten\P1.$verific$add_26$b20.vhd:88$389.
  creating $alu model for $macc $flatten\P1.$verific$add_21$b20.vhd:86$382.
  creating $macc cell for $flatten\P1.$verific$mult_667$b20.vhd:497$511: $auto$alumacc.cc:365:replace_macc$2328
  creating $alu model for $flatten\P1.$verific$LessThan_14$b20.vhd:83$375 ($lt): new $alu
  creating $alu model for $flatten\P1.$verific$LessThan_68$b20.vhd:118$429 ($lt): new $alu
  creating $alu model for $flatten\P1.$verific$LessThan_78$b20.vhd:138$433 ($lt): merged with $flatten\P1.$verific$LessThan_68$b20.vhd:118$429.
  creating $alu model for $flatten\P1.$verific$LessThan_83$b20.vhd:148$435 ($lt): new $alu
  creating $alu model for $flatten\P1.$verific$LessThan_87$b20.vhd:151$440 ($lt): new $alu
  creating $alu model for $flatten\P2.$verific$LessThan_14$b20.vhd:593$878 ($lt): new $alu
  creating $alu model for $flatten\P2.$verific$LessThan_66$b20.vhd:628$932 ($lt): new $alu
  creating $alu model for $flatten\P2.$verific$LessThan_76$b20.vhd:648$936 ($lt): merged with $flatten\P2.$verific$LessThan_66$b20.vhd:628$932.
  creating $alu model for $flatten\P2.$verific$LessThan_81$b20.vhd:658$938 ($lt): new $alu
  creating $alu model for $flatten\P2.$verific$LessThan_85$b20.vhd:661$943 ($lt): new $alu
  creating $alu model for $verific$LessThan_11$b20.vhd:1075$48 ($lt): new $alu
  creating $alu model for $verific$LessThan_12$b20.vhd:1075$49 ($lt): new $alu
  creating $alu model for $verific$LessThan_16$b20.vhd:1076$53 ($lt): new $alu
  creating $alu model for $verific$LessThan_17$b20.vhd:1076$54 ($lt): new $alu
  creating $alu cell for $verific$LessThan_17$b20.vhd:1076$54: $auto$alumacc.cc:485:replace_alu$2341
  creating $alu cell for $verific$LessThan_16$b20.vhd:1076$53: $auto$alumacc.cc:485:replace_alu$2346
  creating $alu cell for $verific$LessThan_12$b20.vhd:1075$49: $auto$alumacc.cc:485:replace_alu$2351
  creating $alu cell for $verific$LessThan_11$b20.vhd:1075$48: $auto$alumacc.cc:485:replace_alu$2356
  creating $alu cell for $flatten\P2.$verific$LessThan_85$b20.vhd:661$943: $auto$alumacc.cc:485:replace_alu$2361
  creating $alu cell for $flatten\P2.$verific$LessThan_81$b20.vhd:658$938: $auto$alumacc.cc:485:replace_alu$2372
  creating $alu cell for $flatten\P2.$verific$LessThan_66$b20.vhd:628$932, $flatten\P2.$verific$LessThan_76$b20.vhd:648$936: $auto$alumacc.cc:485:replace_alu$2383
  creating $alu cell for $flatten\P2.$verific$LessThan_14$b20.vhd:593$878: $auto$alumacc.cc:485:replace_alu$2394
  creating $alu cell for $flatten\P1.$verific$LessThan_87$b20.vhd:151$440: $auto$alumacc.cc:485:replace_alu$2399
  creating $alu cell for $flatten\P1.$verific$LessThan_83$b20.vhd:148$435: $auto$alumacc.cc:485:replace_alu$2404
  creating $alu cell for $flatten\P1.$verific$LessThan_68$b20.vhd:118$429, $flatten\P1.$verific$LessThan_78$b20.vhd:138$433: $auto$alumacc.cc:485:replace_alu$2415
  creating $alu cell for $flatten\P1.$verific$LessThan_14$b20.vhd:83$375: $auto$alumacc.cc:485:replace_alu$2426
  creating $alu cell for $flatten\P1.$verific$add_21$b20.vhd:86$382: $auto$alumacc.cc:485:replace_alu$2431
  creating $alu cell for $flatten\P1.$verific$add_26$b20.vhd:88$389: $auto$alumacc.cc:485:replace_alu$2434
  creating $alu cell for $flatten\P1.$verific$add_283$b20.vhd:318$478: $auto$alumacc.cc:485:replace_alu$2437
  creating $alu cell for $flatten\P1.$verific$add_31$b20.vhd:90$396: $auto$alumacc.cc:485:replace_alu$2440
  creating $alu cell for $flatten\P1.$verific$add_36$b20.vhd:92$403: $auto$alumacc.cc:485:replace_alu$2443
  creating $alu cell for $flatten\P1.$verific$add_39$b20.vhd:95$409: $auto$alumacc.cc:485:replace_alu$2446
  creating $alu cell for $flatten\P1.$verific$add_44$b20.vhd:96$413: $auto$alumacc.cc:485:replace_alu$2449
  creating $alu cell for $flatten\P1.$verific$add_56$b20.vhd:110$421: $auto$alumacc.cc:485:replace_alu$2452
  creating $alu cell for $flatten\P1.$verific$add_570$b20.vhd:466$485: $auto$alumacc.cc:485:replace_alu$2455
  creating $alu cell for $flatten\P1.$verific$add_61$b20.vhd:113$423: $auto$alumacc.cc:485:replace_alu$2458
  creating $alu cell for $flatten\P1.$verific$add_664$b20.vhd:494$507: $auto$alumacc.cc:485:replace_alu$2461
  creating $alu cell for $flatten\P1.$verific$sub_168$b20.vhd:243$467: $auto$alumacc.cc:485:replace_alu$2464
  creating $alu cell for $flatten\P1.$verific$sub_365$b20.vhd:358$480: $auto$alumacc.cc:485:replace_alu$2467
  creating $alu cell for $flatten\P1.$verific$sub_84$b20.vhd:149$436: $auto$alumacc.cc:485:replace_alu$2470
  creating $alu cell for $flatten\P1.$verific$unary_minus_15$b20.vhd:84$376: $auto$alumacc.cc:485:replace_alu$2473
  creating $alu cell for $flatten\P2.$verific$add_21$b20.vhd:596$885: $auto$alumacc.cc:485:replace_alu$2476
  creating $alu cell for $flatten\P2.$verific$add_26$b20.vhd:598$892: $auto$alumacc.cc:485:replace_alu$2479
  creating $alu cell for $flatten\P2.$verific$add_31$b20.vhd:600$899: $auto$alumacc.cc:485:replace_alu$2482
  creating $alu cell for $flatten\P2.$verific$add_331$b20.vhd:868$985: $auto$alumacc.cc:485:replace_alu$2485
  creating $alu cell for $flatten\P2.$verific$add_36$b20.vhd:602$906: $auto$alumacc.cc:485:replace_alu$2488
  creating $alu cell for $flatten\P2.$verific$add_44$b20.vhd:606$916: $auto$alumacc.cc:485:replace_alu$2491
  creating $alu cell for $flatten\P2.$verific$add_540$b20.vhd:976$1002: $auto$alumacc.cc:485:replace_alu$2494
  creating $alu cell for $flatten\P2.$verific$sub_297$b20.vhd:848$983: $auto$alumacc.cc:485:replace_alu$2497
  creating $alu cell for $flatten\P2.$verific$sub_39$b20.vhd:605$912: $auto$alumacc.cc:485:replace_alu$2500
  creating $alu cell for $flatten\P2.$verific$sub_55$b20.vhd:620$924: $auto$alumacc.cc:485:replace_alu$2503
  creating $alu cell for $flatten\P2.$verific$sub_59$b20.vhd:623$926: $auto$alumacc.cc:485:replace_alu$2506
  creating $alu cell for $flatten\P2.$verific$sub_634$b20.vhd:1004$1027: $auto$alumacc.cc:485:replace_alu$2509
  creating $alu cell for $flatten\P2.$verific$sub_82$b20.vhd:659$939: $auto$alumacc.cc:485:replace_alu$2512
  creating $alu cell for $flatten\P2.$verific$unary_minus_15$b20.vhd:594$879: $auto$alumacc.cc:485:replace_alu$2515
  creating $alu cell for $verific$add_24$b20.vhd:1077$58: $auto$alumacc.cc:485:replace_alu$2518
  creating $alu cell for $verific$add_3$b20.vhd:1068$40: $auto$alumacc.cc:485:replace_alu$2521
  creating $alu cell for $verific$add_30$b20.vhd:1081$60: $auto$alumacc.cc:485:replace_alu$2524
  created 44 $alu and 1 $macc cells.

yosys> opt_expr

3.76. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~10 debug messages>

yosys> opt_merge -nomux

3.77. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.78. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~52 debug messages>

yosys> opt_reduce

3.79. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.80. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_share

3.81. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.82. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.83. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 4 unused cells and 24 unused wires.
<suppressed ~5 debug messages>

yosys> opt_expr

3.84. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

yosys> opt_muxtree

3.85. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~52 debug messages>

yosys> opt_reduce

3.86. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.87. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_share

3.88. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.89. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.90. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

yosys> opt_expr

3.91. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
MAX OPT ITERATION = 2

yosys> stat

3.92. Printing statistics.

=== b20 ===

   Number of wires:                623
   Number of wire bits:          12514
   Number of public wires:          46
   Number of public wire bits:     732
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                596
     $adff                          12
     $adffe                         15
     $alu                           44
     $and                           68
     $eq                            50
     $logic_not                      4
     $macc                           1
     $mux                          223
     $ne                            67
     $not                           26
     $or                             8
     $pmux                          22
     $reduce_and                    18
     $reduce_bool                    2
     $reduce_or                     34
     $xor                            2


yosys> memory -nomap

3.93. Executing MEMORY pass.

yosys> opt_mem

3.93.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.93.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.93.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.93.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.93.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.93.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

yosys> memory_share

3.93.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.93.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.93.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

yosys> memory_collect

3.93.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.94. Printing statistics.

=== b20 ===

   Number of wires:                623
   Number of wire bits:          12514
   Number of public wires:          46
   Number of public wire bits:     732
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                596
     $adff                          12
     $adffe                         15
     $alu                           44
     $and                           68
     $eq                            50
     $logic_not                      4
     $macc                           1
     $mux                          223
     $ne                            67
     $not                           26
     $or                             8
     $pmux                          22
     $reduce_and                    18
     $reduce_bool                    2
     $reduce_or                     34
     $xor                            2


yosys> muxpack

3.95. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~212 debug messages>

yosys> opt_clean

3.96. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..

yosys> pmuxtree

3.97. Executing PMUXTREE pass.

yosys> muxpack

3.98. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~239 debug messages>

yosys> memory_map

3.99. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.100. Printing statistics.

=== b20 ===

   Number of wires:                715
   Number of wire bits:          15348
   Number of public wires:          46
   Number of public wire bits:     732
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                666
     $adff                          12
     $adffe                         15
     $alu                           44
     $and                           68
     $eq                            50
     $logic_not                      4
     $macc                           1
     $mux                          269
     $ne                            67
     $not                           48
     $or                            10
     $reduce_and                    18
     $reduce_bool                    2
     $reduce_or                     56
     $xor                            2


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.101. Executing TECHMAP pass (map to technology primitives).

3.101.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.101.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.101.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $mux.
Using extmapper maccmap for cells of type $macc.
  add 3'101 * $auto$wreduce.cc:455:run$2286 [0] (3x1 bits, unsigned)
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$be80489e44a49c29884f59fd81c31ed03229cfc1\_80_rs_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$79fc87901d7fd8aaad689b5406671422f5fa25b9\_80_rs_alu for cells of type $alu.
Using template $paramod$6fc37af1c109ae54e8aed83fcd995c12d378ce93\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod$51c80ded93a30cabdd6a720b4f0ed1d8c51829dd\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using template $paramod$43e6bdbb0e8a6b23dfd3962c0280737d54f8e2be\_80_rs_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$e891e6b399cf52748460a311fafe476815d24bd7\_90_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$9e7011427f22271c0942bd67000ef26931352ace\_80_rs_alu for cells of type $alu.
/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v:80: Warning: Range [-1:-1] select out of bounds on signal `\C': Setting 1 LSB bits to undef.
/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v:88: Warning: Range [-1:-1] select out of bounds on signal `\Y': Setting 1 LSB bits to undef.
/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v:88: Warning: Range [-1:-1] select out of bounds on signal `\S': Setting 1 LSB bits to undef.
/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v:88: Warning: Ignoring assignment to constant bits:
    old assignment: 1'x = $xor$/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v:88$7265_Y
    new assignment: { } = { }.
/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v:89: Warning: Range [-1:-1] select out of bounds on signal `\S': Setting 1 LSB bits to undef.
/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v:89: Warning: Range [-1:-1] select out of bounds on signal `\AA': Setting 1 LSB bits to undef.
Using template $paramod$fc972a7a46956c1788f3cb5257b53c8f1df2d0cc\_90_alu for cells of type $alu.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using template $paramod$ee932b0f27f4b110ee21c85da6e79a9925243db9\_80_rs_alu for cells of type $alu.
Using template $paramod$83fc07d9557d32477a9ece9e4e82efd3bbe82ab8\_80_rs_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$6dc2bc4e177433cbefea60fe94ff11f8a7c6abf8\_90_alu for cells of type $alu.
Using template $paramod$2fcdd83405601057593cb25247304b1283f3b87e\_80_rs_alu for cells of type $alu.
Using template $paramod$c32aaa9fd758c6ea2b382f4327253b21b576e597\_90_alu for cells of type $alu.
Using template $paramod$63a3f1ffa662be02d3403b533885c56d18ebe02a\_80_rs_alu for cells of type $alu.
Using template $paramod$83784888def4f70dbbded37c6d05d2ea1157c936\_90_alu for cells of type $alu.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
No more expansions possible.
<suppressed ~5130 debug messages>

yosys> stat

3.102. Printing statistics.

=== b20 ===

   Number of wires:               3688
   Number of wire bits:          59773
   Number of public wires:          46
   Number of public wire bits:     732
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              16983
     $_AND_                       1658
     $_DFFE_PP0P_                  356
     $_DFF_PP0_                     78
     $_MUX_                       9531
     $_NOT_                       1046
     $_OR_                        1683
     $_XOR_                       2073
     adder_carry                   558


yosys> opt_expr

3.103. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~5018 debug messages>

yosys> opt_merge -nomux

3.104. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~9594 debug messages>
Removed a total of 3198 cells.

yosys> opt_muxtree

3.105. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.106. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.107. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_share

3.108. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.109. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.110. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 693 unused cells and 2561 unused wires.
<suppressed ~694 debug messages>

yosys> opt_expr

3.111. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~144 debug messages>

yosys> opt_muxtree

3.112. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.113. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.114. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_share

3.115. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.116. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.117. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.118. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
MAX OPT ITERATION = 2

yosys> opt_expr -full

3.119. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~1358 debug messages>

yosys> techmap -map +/techmap.v

3.120. Executing TECHMAP pass (map to technology primitives).

3.120.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.120.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.121. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

yosys> opt_merge -nomux

3.122. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_muxtree

3.123. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.124. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.125. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.126. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.127. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 29 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.128. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
MAX OPT ITERATION = 1

yosys> abc -dff

3.129. Executing ABC pass (technology mapping using ABC).

3.129.1. Summary of detected clock domains:
  858 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2060, arst=\reset, srst={ }
  565 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2079, arst=\reset, srst={ }
  631 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2098, arst=\reset, srst={ }
  167 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2103, arst=\reset, srst={ }
  148 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2134, arst=\reset, srst={ }
  554 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2151, arst=\reset, srst={ }
  735 cells in clk=\clock, en=\P1.state, arst=\reset, srst={ }
  883 cells in clk=\clock, en=\P2.state, arst=\reset, srst={ }
  142 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2169, arst=\reset, srst={ }
  758 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2186, arst=\reset, srst={ }
  622 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2205, arst=\reset, srst={ }
  524 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2224, arst=\reset, srst={ }
  296 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2229, arst=\reset, srst={ }
  149 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2260, arst=\reset, srst={ }
  500 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$2277, arst=\reset, srst={ }
  1166 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.129.2. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2060, asynchronously reset by \reset
Extracted 798 gates and 1090 wires to a netlist network with 291 inputs and 217 outputs.

3.129.2.1. Executing ABC.

3.129.3. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2079, asynchronously reset by \reset
Extracted 565 gates and 799 wires to a netlist network with 233 inputs and 122 outputs.

3.129.3.1. Executing ABC.

3.129.4. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2098, asynchronously reset by \reset
Extracted 608 gates and 799 wires to a netlist network with 189 inputs and 123 outputs.

3.129.4.1. Executing ABC.

3.129.5. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2103, asynchronously reset by \reset
Extracted 135 gates and 268 wires to a netlist network with 133 inputs and 96 outputs.

3.129.5.1. Executing ABC.

3.129.6. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2134, asynchronously reset by \reset
Extracted 148 gates and 205 wires to a netlist network with 57 inputs and 66 outputs.

3.129.6.1. Executing ABC.

3.129.7. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2151, asynchronously reset by \reset
Extracted 486 gates and 603 wires to a netlist network with 115 inputs and 70 outputs.

3.129.7.1. Executing ABC.

3.129.8. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by \P1.state, asynchronously reset by \reset
Extracted 735 gates and 935 wires to a netlist network with 199 inputs and 50 outputs.

3.129.8.1. Executing ABC.

3.129.9. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by \P2.state, asynchronously reset by \reset
Extracted 879 gates and 1073 wires to a netlist network with 193 inputs and 90 outputs.

3.129.9.1. Executing ABC.

3.129.10. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2169, asynchronously reset by \reset
Extracted 134 gates and 204 wires to a netlist network with 69 inputs and 47 outputs.

3.129.10.1. Executing ABC.

3.129.11. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2186, asynchronously reset by \reset
Extracted 686 gates and 948 wires to a netlist network with 261 inputs and 193 outputs.

3.129.11.1. Executing ABC.

3.129.12. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2205, asynchronously reset by \reset
Extracted 602 gates and 833 wires to a netlist network with 230 inputs and 118 outputs.

3.129.12.1. Executing ABC.

3.129.13. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2224, asynchronously reset by \reset
Extracted 495 gates and 711 wires to a netlist network with 214 inputs and 79 outputs.

3.129.13.1. Executing ABC.

3.129.14. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2229, asynchronously reset by \reset
Extracted 264 gates and 486 wires to a netlist network with 222 inputs and 95 outputs.

3.129.14.1. Executing ABC.

3.129.15. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2260, asynchronously reset by \reset
Extracted 129 gates and 168 wires to a netlist network with 39 inputs and 69 outputs.

3.129.15.1. Executing ABC.

3.129.16. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2277, asynchronously reset by \reset
Extracted 434 gates and 590 wires to a netlist network with 155 inputs and 101 outputs.

3.129.16.1. Executing ABC.

3.129.17. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 1042 gates and 1367 wires to a netlist network with 323 inputs and 257 outputs.

3.129.17.1. Executing ABC.

yosys> abc -dff

3.130. Executing ABC pass (technology mapping using ABC).

3.130.1. Summary of detected clock domains:
  241 cells in clk=\clock, en=$abc$25343$auto$opt_dff.cc:219:make_patterns_logic$2151, arst=\reset, srst={ }
  238 cells in clk=\clock, en=$abc$30222$auto$opt_dff.cc:219:make_patterns_logic$2277, arst=\reset, srst={ }
  151 cells in clk=\clock, en=$abc$27228$auto$opt_dff.cc:219:make_patterns_logic$2169, arst=\reset, srst={ }
  785 cells in clk=\clock, en=$abc$27392$auto$opt_dff.cc:219:make_patterns_logic$2186, arst=\reset, srst={ }
  928 cells in clk=\clock, en=$abc$30440$auto$opt_dff.cc:219:make_patterns_logic$2205, arst=\reset, srst={ }
  801 cells in clk=\clock, en=$abc$30440$auto$opt_dff.cc:219:make_patterns_logic$2224, arst=\reset, srst={ }
  170 cells in clk=\clock, en=$abc$30440$auto$opt_dff.cc:219:make_patterns_logic$2229, arst=\reset, srst={ }
  1674 cells in clk=\clock, en=$abc$30440$lo37, arst=\reset, srst={ }
  216 cells in clk=\clock, en=$abc$30095$auto$opt_dff.cc:219:make_patterns_logic$2260, arst=\reset, srst={ }
  1153 cells in clk=\clock, en=$abc$22139$auto$opt_dff.cc:219:make_patterns_logic$2060, arst=\reset, srst={ }
  946 cells in clk=\clock, en=$abc$23210$auto$opt_dff.cc:219:make_patterns_logic$2079, arst=\reset, srst={ }
  837 cells in clk=\clock, en=$abc$24132$auto$opt_dff.cc:219:make_patterns_logic$2098, arst=\reset, srst={ }
  281 cells in clk=\clock, en=$abc$25047$auto$opt_dff.cc:219:make_patterns_logic$2103, arst=\reset, srst={ }
  407 cells in clk=\clock, en=$abc$25219$auto$opt_dff.cc:219:make_patterns_logic$2134, arst=\reset, srst={ }
  578 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.130.2. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$25343$auto$opt_dff.cc:219:make_patterns_logic$2151, asynchronously reset by \reset
Extracted 177 gates and 290 wires to a netlist network with 113 inputs and 67 outputs.

3.130.2.1. Executing ABC.

3.130.3. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$30222$auto$opt_dff.cc:219:make_patterns_logic$2277, asynchronously reset by \reset
Extracted 174 gates and 316 wires to a netlist network with 142 inputs and 65 outputs.

3.130.3.1. Executing ABC.

3.130.4. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$27228$auto$opt_dff.cc:219:make_patterns_logic$2169, asynchronously reset by \reset
Extracted 145 gates and 216 wires to a netlist network with 71 inputs and 46 outputs.

3.130.4.1. Executing ABC.

3.130.5. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$27392$auto$opt_dff.cc:219:make_patterns_logic$2186, asynchronously reset by \reset
Extracted 763 gates and 1005 wires to a netlist network with 242 inputs and 95 outputs.

3.130.5.1. Executing ABC.

3.130.6. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$30440$auto$opt_dff.cc:219:make_patterns_logic$2205, asynchronously reset by \reset
Extracted 855 gates and 1099 wires to a netlist network with 244 inputs and 212 outputs.

3.130.6.1. Executing ABC.

3.130.7. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$30440$auto$opt_dff.cc:219:make_patterns_logic$2224, asynchronously reset by \reset
Extracted 773 gates and 1013 wires to a netlist network with 240 inputs and 119 outputs.

3.130.7.1. Executing ABC.

3.130.8. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$30440$auto$opt_dff.cc:219:make_patterns_logic$2229, asynchronously reset by \reset
Extracted 138 gates and 271 wires to a netlist network with 133 inputs and 66 outputs.

3.130.8.1. Executing ABC.

3.130.9. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$30440$lo37, asynchronously reset by \reset
Extracted 1663 gates and 2019 wires to a netlist network with 356 inputs and 169 outputs.

3.130.9.1. Executing ABC.

3.130.10. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$30095$auto$opt_dff.cc:219:make_patterns_logic$2260, asynchronously reset by \reset
Extracted 194 gates and 310 wires to a netlist network with 116 inputs and 75 outputs.

3.130.10.1. Executing ABC.

3.130.11. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$22139$auto$opt_dff.cc:219:make_patterns_logic$2060, asynchronously reset by \reset
Extracted 1096 gates and 1390 wires to a netlist network with 294 inputs and 256 outputs.

3.130.11.1. Executing ABC.

3.130.12. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$23210$auto$opt_dff.cc:219:make_patterns_logic$2079, asynchronously reset by \reset
Extracted 920 gates and 1182 wires to a netlist network with 262 inputs and 138 outputs.

3.130.12.1. Executing ABC.

3.130.13. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$24132$auto$opt_dff.cc:219:make_patterns_logic$2098, asynchronously reset by \reset
Extracted 837 gates and 1024 wires to a netlist network with 187 inputs and 80 outputs.

3.130.13.1. Executing ABC.

3.130.14. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$25047$auto$opt_dff.cc:219:make_patterns_logic$2103, asynchronously reset by \reset
Extracted 249 gates and 473 wires to a netlist network with 224 inputs and 65 outputs.

3.130.14.1. Executing ABC.

3.130.15. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$25219$auto$opt_dff.cc:219:make_patterns_logic$2134, asynchronously reset by \reset
Extracted 350 gates and 537 wires to a netlist network with 187 inputs and 124 outputs.

3.130.15.1. Executing ABC.

3.130.16. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 514 gates and 691 wires to a netlist network with 177 inputs and 196 outputs.

3.130.16.1. Executing ABC.

yosys> abc -dff

3.131. Executing ABC pass (technology mapping using ABC).

3.131.1. Summary of detected clock domains:
  236 cells in clk=\clock, en=$abc$31234$abc$25343$auto$opt_dff.cc:219:make_patterns_logic$2151, arst=\reset, srst={ }
  238 cells in clk=\clock, en=$abc$31406$abc$30222$auto$opt_dff.cc:219:make_patterns_logic$2277, arst=\reset, srst={ }
  134 cells in clk=\clock, en=$abc$31576$abc$27228$auto$opt_dff.cc:219:make_patterns_logic$2169, arst=\reset, srst={ }
  977 cells in clk=\clock, en=$abc$31724$abc$27392$auto$opt_dff.cc:219:make_patterns_logic$2186, arst=\reset, srst={ }
  822 cells in clk=\clock, en=$abc$32609$abc$30440$auto$opt_dff.cc:219:make_patterns_logic$2205, arst=\reset, srst={ }
  871 cells in clk=\clock, en=$abc$33493$abc$30440$auto$opt_dff.cc:219:make_patterns_logic$2224, arst=\reset, srst={ }
  454 cells in clk=\clock, en=$abc$39597$abc$25219$auto$opt_dff.cc:219:make_patterns_logic$2134, arst=\reset, srst={ }
  176 cells in clk=\clock, en=$abc$34320$abc$30440$auto$opt_dff.cc:219:make_patterns_logic$2229, arst=\reset, srst={ }
  1719 cells in clk=\clock, en=$abc$39975$lo37, arst=\reset, srst={ }
  210 cells in clk=\clock, en=$abc$36227$abc$30095$auto$opt_dff.cc:219:make_patterns_logic$2260, arst=\reset, srst={ }
  1109 cells in clk=\clock, en=$abc$36452$abc$22139$auto$opt_dff.cc:219:make_patterns_logic$2060, arst=\reset, srst={ }
  970 cells in clk=\clock, en=$abc$37601$abc$23210$auto$opt_dff.cc:219:make_patterns_logic$2079, arst=\reset, srst={ }
  880 cells in clk=\clock, en=$abc$38536$abc$24132$auto$opt_dff.cc:219:make_patterns_logic$2098, arst=\reset, srst={ }
  279 cells in clk=\clock, en=$abc$39348$abc$25047$auto$opt_dff.cc:219:make_patterns_logic$2103, arst=\reset, srst={ }
  562 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.131.2. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$31234$abc$25343$auto$opt_dff.cc:219:make_patterns_logic$2151, asynchronously reset by \reset
Extracted 172 gates and 285 wires to a netlist network with 113 inputs and 67 outputs.

3.131.2.1. Executing ABC.

3.131.3. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$31406$abc$30222$auto$opt_dff.cc:219:make_patterns_logic$2277, asynchronously reset by \reset
Extracted 174 gates and 311 wires to a netlist network with 137 inputs and 66 outputs.

3.131.3.1. Executing ABC.

3.131.4. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$31576$abc$27228$auto$opt_dff.cc:219:make_patterns_logic$2169, asynchronously reset by \reset
Extracted 130 gates and 190 wires to a netlist network with 60 inputs and 41 outputs.

3.131.4.1. Executing ABC.

3.131.5. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$31724$abc$27392$auto$opt_dff.cc:219:make_patterns_logic$2186, asynchronously reset by \reset
Extracted 942 gates and 1193 wires to a netlist network with 251 inputs and 123 outputs.

3.131.5.1. Executing ABC.

3.131.6. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$32609$abc$30440$auto$opt_dff.cc:219:make_patterns_logic$2205, asynchronously reset by \reset
Extracted 795 gates and 1012 wires to a netlist network with 217 inputs and 137 outputs.

3.131.6.1. Executing ABC.

3.131.7. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$33493$abc$30440$auto$opt_dff.cc:219:make_patterns_logic$2224, asynchronously reset by \reset
Extracted 808 gates and 1040 wires to a netlist network with 232 inputs and 130 outputs.

3.131.7.1. Executing ABC.

3.131.8. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$39597$abc$25219$auto$opt_dff.cc:219:make_patterns_logic$2134, asynchronously reset by \reset
Extracted 394 gates and 593 wires to a netlist network with 199 inputs and 124 outputs.

3.131.8.1. Executing ABC.

3.131.9. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$34320$abc$30440$auto$opt_dff.cc:219:make_patterns_logic$2229, asynchronously reset by \reset
Extracted 144 gates and 282 wires to a netlist network with 138 inputs and 68 outputs.

3.131.9.1. Executing ABC.

3.131.10. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$39975$lo37, asynchronously reset by \reset
Extracted 1714 gates and 2089 wires to a netlist network with 375 inputs and 162 outputs.

3.131.10.1. Executing ABC.

3.131.11. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$36227$abc$30095$auto$opt_dff.cc:219:make_patterns_logic$2260, asynchronously reset by \reset
Extracted 188 gates and 289 wires to a netlist network with 101 inputs and 67 outputs.

3.131.11.1. Executing ABC.

3.131.12. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$36452$abc$22139$auto$opt_dff.cc:219:make_patterns_logic$2060, asynchronously reset by \reset
Extracted 1081 gates and 1364 wires to a netlist network with 283 inputs and 198 outputs.

3.131.12.1. Executing ABC.

3.131.13. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$37601$abc$23210$auto$opt_dff.cc:219:make_patterns_logic$2079, asynchronously reset by \reset
Extracted 940 gates and 1202 wires to a netlist network with 262 inputs and 159 outputs.

3.131.13.1. Executing ABC.

3.131.14. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$38536$abc$24132$auto$opt_dff.cc:219:make_patterns_logic$2098, asynchronously reset by \reset
Extracted 852 gates and 1051 wires to a netlist network with 199 inputs and 133 outputs.

3.131.14.1. Executing ABC.

3.131.15. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$39348$abc$25047$auto$opt_dff.cc:219:make_patterns_logic$2103, asynchronously reset by \reset
Extracted 247 gates and 471 wires to a netlist network with 224 inputs and 65 outputs.

3.131.15.1. Executing ABC.

3.131.16. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 498 gates and 676 wires to a netlist network with 178 inputs and 191 outputs.

3.131.16.1. Executing ABC.

yosys> abc -dff

3.132. Executing ABC pass (technology mapping using ABC).

3.132.1. Summary of detected clock domains:
  246 cells in clk=\clock, en=$abc$40480$abc$31234$abc$25343$auto$opt_dff.cc:219:make_patterns_logic$2151, arst=\reset, srst={ }
  239 cells in clk=\clock, en=$abc$40652$abc$31406$abc$30222$auto$opt_dff.cc:219:make_patterns_logic$2277, arst=\reset, srst={ }
  110 cells in clk=\clock, en=$abc$40823$abc$31576$abc$27228$auto$opt_dff.cc:219:make_patterns_logic$2169, arst=\reset, srst={ }
  986 cells in clk=\clock, en=$abc$40956$abc$31724$abc$27392$auto$opt_dff.cc:219:make_patterns_logic$2186, arst=\reset, srst={ }
  807 cells in clk=\clock, en=$abc$41883$abc$32609$abc$30440$auto$opt_dff.cc:219:make_patterns_logic$2205, arst=\reset, srst={ }
  902 cells in clk=\clock, en=$abc$42730$abc$33493$abc$30440$auto$opt_dff.cc:219:make_patterns_logic$2224, arst=\reset, srst={ }
  474 cells in clk=\clock, en=$abc$43569$abc$39597$abc$25219$auto$opt_dff.cc:219:make_patterns_logic$2134, arst=\reset, srst={ }
  175 cells in clk=\clock, en=$abc$43974$abc$34320$abc$30440$auto$opt_dff.cc:219:make_patterns_logic$2229, arst=\reset, srst={ }
  1744 cells in clk=\clock, en=$abc$49247$lo37, arst=\reset, srst={ }
  207 cells in clk=\clock, en=$abc$45871$abc$36227$abc$30095$auto$opt_dff.cc:219:make_patterns_logic$2260, arst=\reset, srst={ }
  1051 cells in clk=\clock, en=$abc$46075$abc$36452$abc$22139$auto$opt_dff.cc:219:make_patterns_logic$2060, arst=\reset, srst={ }
  940 cells in clk=\clock, en=$abc$47158$abc$37601$abc$23210$auto$opt_dff.cc:219:make_patterns_logic$2079, arst=\reset, srst={ }
  966 cells in clk=\clock, en=$abc$48109$abc$38536$abc$24132$auto$opt_dff.cc:219:make_patterns_logic$2098, arst=\reset, srst={ }
  279 cells in clk=\clock, en=$abc$48999$abc$39348$abc$25047$auto$opt_dff.cc:219:make_patterns_logic$2103, arst=\reset, srst={ }
  536 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.132.2. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$40480$abc$31234$abc$25343$auto$opt_dff.cc:219:make_patterns_logic$2151, asynchronously reset by \reset
Extracted 182 gates and 307 wires to a netlist network with 125 inputs and 70 outputs.

3.132.2.1. Executing ABC.

3.132.3. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$40652$abc$31406$abc$30222$auto$opt_dff.cc:219:make_patterns_logic$2277, asynchronously reset by \reset
Extracted 175 gates and 307 wires to a netlist network with 132 inputs and 68 outputs.

3.132.3.1. Executing ABC.

3.132.4. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$40823$abc$31576$abc$27228$auto$opt_dff.cc:219:make_patterns_logic$2169, asynchronously reset by \reset
Extracted 110 gates and 161 wires to a netlist network with 51 inputs and 27 outputs.

3.132.4.1. Executing ABC.

3.132.5. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$40956$abc$31724$abc$27392$auto$opt_dff.cc:219:make_patterns_logic$2186, asynchronously reset by \reset
Extracted 938 gates and 1198 wires to a netlist network with 260 inputs and 162 outputs.

3.132.5.1. Executing ABC.

3.132.6. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$41883$abc$32609$abc$30440$auto$opt_dff.cc:219:make_patterns_logic$2205, asynchronously reset by \reset
Extracted 779 gates and 998 wires to a netlist network with 219 inputs and 110 outputs.

3.132.6.1. Executing ABC.

3.132.7. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$42730$abc$33493$abc$30440$auto$opt_dff.cc:219:make_patterns_logic$2224, asynchronously reset by \reset
Extracted 850 gates and 1089 wires to a netlist network with 239 inputs and 141 outputs.

3.132.7.1. Executing ABC.

3.132.8. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$43569$abc$39597$abc$25219$auto$opt_dff.cc:219:make_patterns_logic$2134, asynchronously reset by \reset
Extracted 414 gates and 616 wires to a netlist network with 202 inputs and 123 outputs.

3.132.8.1. Executing ABC.

3.132.9. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$43974$abc$34320$abc$30440$auto$opt_dff.cc:219:make_patterns_logic$2229, asynchronously reset by \reset
Extracted 143 gates and 280 wires to a netlist network with 137 inputs and 67 outputs.

3.132.9.1. Executing ABC.

3.132.10. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$49247$lo37, asynchronously reset by \reset
Extracted 1739 gates and 2119 wires to a netlist network with 380 inputs and 153 outputs.

3.132.10.1. Executing ABC.

3.132.11. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$45871$abc$36227$abc$30095$auto$opt_dff.cc:219:make_patterns_logic$2260, asynchronously reset by \reset
Extracted 185 gates and 288 wires to a netlist network with 103 inputs and 68 outputs.

3.132.11.1. Executing ABC.

3.132.12. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$46075$abc$36452$abc$22139$auto$opt_dff.cc:219:make_patterns_logic$2060, asynchronously reset by \reset
Extracted 1050 gates and 1301 wires to a netlist network with 251 inputs and 155 outputs.

3.132.12.1. Executing ABC.

3.132.13. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$47158$abc$37601$abc$23210$auto$opt_dff.cc:219:make_patterns_logic$2079, asynchronously reset by \reset
Extracted 904 gates and 1149 wires to a netlist network with 245 inputs and 148 outputs.

3.132.13.1. Executing ABC.

3.132.14. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$48109$abc$38536$abc$24132$auto$opt_dff.cc:219:make_patterns_logic$2098, asynchronously reset by \reset
Extracted 916 gates and 1147 wires to a netlist network with 231 inputs and 172 outputs.

3.132.14.1. Executing ABC.

3.132.15. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$48999$abc$39348$abc$25047$auto$opt_dff.cc:219:make_patterns_logic$2103, asynchronously reset by \reset
Extracted 247 gates and 471 wires to a netlist network with 224 inputs and 65 outputs.

3.132.15.1. Executing ABC.

3.132.16. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 472 gates and 640 wires to a netlist network with 168 inputs and 185 outputs.

3.132.16.1. Executing ABC.

yosys> opt_ffinv

3.133. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.134. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~255 debug messages>

yosys> opt_merge -nomux

3.135. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~423 debug messages>
Removed a total of 141 cells.

yosys> opt_muxtree

3.136. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.137. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.138. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_share

3.139. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.140. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$53363$auto$blifparse.cc:362:parse_blif$53401 ($_DFFE_PP0P_) from module b20 (D = $abc$53363$new_n1955_, Q = $abc$53363$lo37).
Adding EN signal on $abc$53363$auto$blifparse.cc:362:parse_blif$53384 ($_DFFE_PP0P_) from module b20 (D = $abc$53363$new_n1495_, Q = $abc$53363$lo20).
Adding EN signal on $abc$53363$auto$blifparse.cc:362:parse_blif$53379 ($_DFFE_PP0P_) from module b20 (D = $abc$53363$new_n1370_, Q = $abc$53363$lo15).

yosys> opt_clean

3.141. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 3 unused cells and 42135 unused wires.
<suppressed ~25 debug messages>

yosys> opt_expr

3.142. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
MAX OPT ITERATION = 1

yosys> bmuxmap

3.143. Executing BMUXMAP pass.

yosys> demuxmap

3.144. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_O2l3qc/abc_tmp_1.scr

3.145. Executing ABC pass (technology mapping using ABC).

3.145.1. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Extracted 8562 gates and 9427 wires to a netlist network with 864 inputs and 962 outputs.

3.145.1.1. Executing ABC.
DE:   #PIs = 864  #Luts =  2749  Max Lvl =  13  Avg Lvl =   5.59  [   0.43 sec. at Pass 0]{firstMap}
DE:   #PIs = 864  #Luts =  2113  Max Lvl =  35  Avg Lvl =   8.80  [  16.07 sec. at Pass 1]{initMapFlow}
DE:   #PIs = 864  #Luts =  2085  Max Lvl =  31  Avg Lvl =   9.08  [   2.61 sec. at Pass 2]{map}
DE:   #PIs = 864  #Luts =  2046  Max Lvl =  30  Avg Lvl =   8.45  [   5.18 sec. at Pass 3]{postMap}
DE:   #PIs = 864  #Luts =  2000  Max Lvl =  29  Avg Lvl =   8.84  [   3.99 sec. at Pass 4]{map}
DE:   #PIs = 864  #Luts =  1954  Max Lvl =  29  Avg Lvl =   8.64  [   6.72 sec. at Pass 5]{postMap}
DE:   #PIs = 864  #Luts =  1932  Max Lvl =  22  Avg Lvl =   8.17  [   3.55 sec. at Pass 6]{map}
DE:   #PIs = 864  #Luts =  1902  Max Lvl =  22  Avg Lvl =   8.26  [   5.11 sec. at Pass 7]{postMap}
DE:   #PIs = 864  #Luts =  1887  Max Lvl =  19  Avg Lvl =   8.08  [   4.28 sec. at Pass 8]{map}
DE:   #PIs = 864  #Luts =  1862  Max Lvl =  21  Avg Lvl =   7.80  [   6.92 sec. at Pass 9]{postMap}
DE:   #PIs = 864  #Luts =  1850  Max Lvl =  25  Avg Lvl =   8.12  [   4.43 sec. at Pass 10]{map}
DE:   #PIs = 864  #Luts =  1840  Max Lvl =  21  Avg Lvl =   8.43  [   6.51 sec. at Pass 11]{postMap}
DE:   #PIs = 864  #Luts =  1825  Max Lvl =  19  Avg Lvl =   7.88  [   3.64 sec. at Pass 12]{map}
DE:   #PIs = 864  #Luts =  1818  Max Lvl =  21  Avg Lvl =   8.41  [   5.54 sec. at Pass 13]{postMap}
DE:   #PIs = 864  #Luts =  1817  Max Lvl =  23  Avg Lvl =   8.52  [   4.37 sec. at Pass 14]{map}
DE:   #PIs = 864  #Luts =  1813  Max Lvl =  23  Avg Lvl =   8.52  [   6.75 sec. at Pass 15]{postMap}
DE:   #PIs = 864  #Luts =  1801  Max Lvl =  23  Avg Lvl =   8.52  [   5.56 sec. at Pass 16]{map}
DE:   #PIs = 864  #Luts =  1795  Max Lvl =  22  Avg Lvl =   8.50  [   6.15 sec. at Pass 17]{postMap}
DE:   #PIs = 864  #Luts =  1794  Max Lvl =  21  Avg Lvl =   8.43  [   4.94 sec. at Pass 18]{map}
DE:   #PIs = 864  #Luts =  1789  Max Lvl =  22  Avg Lvl =   8.41  [   8.30 sec. at Pass 19]{postMap}
DE:   #PIs = 864  #Luts =  1786  Max Lvl =  22  Avg Lvl =   8.16  [   5.13 sec. at Pass 20]{map}
DE:   #PIs = 864  #Luts =  1779  Max Lvl =  22  Avg Lvl =   8.17  [   6.76 sec. at Pass 21]{postMap}
DE:   #PIs = 864  #Luts =  1777  Max Lvl =  22  Avg Lvl =   8.17  [   1.56 sec. at Pass 22]{finalMap}

yosys> opt_expr

3.146. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

yosys> opt_merge -nomux

3.147. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_muxtree

3.148. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.149. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.150. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_share

3.151. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.152. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.153. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 9173 unused wires.
<suppressed ~5 debug messages>

yosys> opt_expr

3.154. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.155. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 1 inverters.

yosys> stat

3.156. Printing statistics.

=== b20 ===

   Number of wires:               1642
   Number of wire bits:           3757
   Number of public wires:          21
   Number of public wire bits:     326
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2690
     $_DFFE_PP0P_                  356
     $_DFF_PP0_                     71
     $_DFF_PP1_                      1
     $lut                         1704
     adder_carry                   558


yosys> shregmap -minlen 8 -maxlen 20

3.157. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.158. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.159. Printing statistics.

=== b20 ===

   Number of wires:               1642
   Number of wire bits:           3757
   Number of public wires:          21
   Number of public wire bits:     326
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2690
     $_DFFE_PP0P_                  356
     $_DFF_PP0_                     71
     $_DFF_PP1_                      1
     $lut                         1704
     adder_carry                   558


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.160. Executing TECHMAP pass (map to technology primitives).

3.160.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.160.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.160.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFF_PP1_ for cells of type $_DFF_PP1_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~2696 debug messages>

yosys> opt_expr -mux_undef

3.161. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~37017 debug messages>

yosys> simplemap

3.162. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.163. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

yosys> opt_merge

3.164. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~16800 debug messages>
Removed a total of 5600 cells.

yosys> opt_dff -nodffe -nosdff

3.165. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.166. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 5939 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.167. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
<suppressed ~1425 debug messages>

yosys> opt_merge -nomux

3.168. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

yosys> opt_muxtree

3.169. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.170. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.171. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_share

3.172. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.173. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.174. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 394 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.175. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_O2l3qc/abc_tmp_2.scr

3.176. Executing ABC pass (technology mapping using ABC).

3.176.1. Extracting gate netlist of module `\b20' to `<abc-temp-dir>/input.blif'..
Extracted 5905 gates and 6767 wires to a netlist network with 860 inputs and 890 outputs.

3.176.1.1. Executing ABC.
DE:   #PIs = 860  #Luts =  1801  Max Lvl =  11  Avg Lvl =   5.22  [   0.19 sec. at Pass 0]{firstMap}
DE:   #PIs = 860  #Luts =  1713  Max Lvl =  25  Avg Lvl =   8.55  [  12.83 sec. at Pass 1]{initMapFlow}
DE:   #PIs = 860  #Luts =  1700  Max Lvl =  22  Avg Lvl =   7.84  [   1.62 sec. at Pass 2]{map}
DE:   #PIs = 860  #Luts =  1693  Max Lvl =  23  Avg Lvl =   7.61  [   3.33 sec. at Pass 3]{postMap}
DE:   #PIs = 860  #Luts =  1692  Max Lvl =  21  Avg Lvl =   7.52  [   3.42 sec. at Pass 4]{map}
DE:   #PIs = 860  #Luts =  1687  Max Lvl =  22  Avg Lvl =   8.20  [   7.04 sec. at Pass 5]{postMap}
DE:   #PIs = 860  #Luts =  1684  Max Lvl =  21  Avg Lvl =   7.92  [   6.82 sec. at Pass 6]{map}
DE:   #PIs = 860  #Luts =  1677  Max Lvl =  21  Avg Lvl =   7.57  [   6.96 sec. at Pass 7]{postMap}
DE:   #PIs = 860  #Luts =  1674  Max Lvl =  21  Avg Lvl =   8.27  [   5.14 sec. at Pass 8]{map}
DE:   #PIs = 860  #Luts =  1670  Max Lvl =  23  Avg Lvl =   8.14  [   6.98 sec. at Pass 9]{postMap}
DE:   #PIs = 860  #Luts =  1666  Max Lvl =  21  Avg Lvl =   8.52  [   2.07 sec. at Pass 10]{map}
DE:   #PIs = 860  #Luts =  1660  Max Lvl =  20  Avg Lvl =   8.46  [   5.69 sec. at Pass 11]{postMap}
DE:   #PIs = 860  #Luts =  1660  Max Lvl =  20  Avg Lvl =   8.46  [   3.89 sec. at Pass 12]{map}
DE:   #PIs = 860  #Luts =  1659  Max Lvl =  24  Avg Lvl =   7.88  [   6.50 sec. at Pass 13]{postMap}
DE:   #PIs = 860  #Luts =  1658  Max Lvl =  19  Avg Lvl =   7.75  [   4.89 sec. at Pass 14]{map}
DE:   #PIs = 860  #Luts =  1649  Max Lvl =  19  Avg Lvl =   7.67  [   8.78 sec. at Pass 15]{postMap}
DE:   #PIs = 860  #Luts =  1648  Max Lvl =  20  Avg Lvl =   7.13  [   4.69 sec. at Pass 16]{map}
DE:   #PIs = 860  #Luts =  1643  Max Lvl =  18  Avg Lvl =   7.74  [   7.45 sec. at Pass 17]{postMap}
DE:   #PIs = 860  #Luts =  1635  Max Lvl =  18  Avg Lvl =   7.52  [   4.74 sec. at Pass 18]{map}
DE:   #PIs = 860  #Luts =  1633  Max Lvl =  18  Avg Lvl =   7.53  [   7.18 sec. at Pass 19]{postMap}
DE:   #PIs = 860  #Luts =  1626  Max Lvl =  23  Avg Lvl =   8.19  [   6.58 sec. at Pass 20]{map}
DE:   #PIs = 860  #Luts =  1626  Max Lvl =  23  Avg Lvl =   8.19  [   7.84 sec. at Pass 21]{postMap}
DE:   #PIs = 860  #Luts =  1626  Max Lvl =  19  Avg Lvl =   7.18  [   1.69 sec. at Pass 22]{finalMap}

yosys> opt_expr

3.177. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.

yosys> opt_merge -nomux

3.178. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.179. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b20..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.180. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b20.
Performed a total of 0 changes.

yosys> opt_merge

3.181. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b20'.
Removed a total of 0 cells.

yosys> opt_share

3.182. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.183. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.184. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 5784 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.185. Executing OPT_EXPR pass (perform const folding).
Optimizing module b20.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.186. Executing HIERARCHY pass (managing design hierarchy).

3.186.1. Analyzing design hierarchy..
Top module:  \b20

3.186.2. Analyzing design hierarchy..
Top module:  \b20
Removed 0 unused modules.

yosys> stat

3.187. Printing statistics.

=== b20 ===

   Number of wires:               1563
   Number of wire bits:           3678
   Number of public wires:          21
   Number of public wire bits:     326
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2612
     $lut                         1626
     adder_carry                   558
     dffsre                        428


yosys> opt_clean -purge

3.188. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b20..
Removed 0 unused cells and 8 unused wires.
<suppressed ~8 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.189. Executing Verilog backend.
Dumping module `\b20'.

Warnings: 5 unique messages, 6 total
End of script. Logfile hash: 56e7a18d8b, CPU: user 33.68s system 0.20s, MEM: 141.79 MB peak
Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)
Time spent: 97% 6x abc (1357 sec), 0% 25x opt_dff (9 sec), ...
real 314.65
user 1286.35
sys 100.11
