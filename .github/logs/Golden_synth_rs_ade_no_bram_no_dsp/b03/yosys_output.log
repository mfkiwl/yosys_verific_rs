
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.92
 Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b03.vhd

yosys> verific -vhdl b03.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b03.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b03.vhd:1: analyzing entity 'b03'
VERIFIC-INFO [VHDL-1010] b03.vhd:15: analyzing architecture 'behav'

yosys> synth_rs -top b03 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.79

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b03

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b03.vhd:1: processing 'b03(BEHAV)'
Importing module b03.

3.4.1. Analyzing design hierarchy..
Top module:  \b03

3.4.2. Analyzing design hierarchy..
Top module:  \b03
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~17 debug messages>

yosys> bmuxmap

3.6. Executing BMUXMAP pass.

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).

yosys> bmuxmap

3.9. Executing BMUXMAP pass.

yosys> demuxmap

3.10. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.11. Executing TRIBUF pass.

yosys> deminout

3.12. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~1 debug messages>

yosys> opt_clean

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 4 unused cells and 33 unused wires.
<suppressed ~18 debug messages>

yosys> check

3.15. Executing CHECK pass (checking for obvious problems).
Checking module b03...
Found and reported 0 problems.

yosys> opt_expr

3.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

yosys> opt_merge -nomux

3.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.18. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

yosys> opt_reduce

3.19. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.20. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_share

3.21. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.22. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$stato_reg$b03.vhd:131$154 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$ru4_reg$b03.vhd:131$165 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$ru3_reg$b03.vhd:131$163 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$ru2_reg$b03.vhd:131$161 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$ru1_reg$b03.vhd:131$159 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$grant_reg$b03.vhd:131$167 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$grant_o_reg$b03.vhd:131$168 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$fu4_reg$b03.vhd:131$166 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$fu3_reg$b03.vhd:131$164 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$fu2_reg$b03.vhd:131$162 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$fu1_reg$b03.vhd:131$160 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$coda3_reg$b03.vhd:131$158 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$coda2_reg$b03.vhd:131$157 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$coda1_reg$b03.vhd:131$156 ($aldff) from module b03.
Changing const-value async load to async reset on $verific$coda0_reg$b03.vhd:131$155 ($aldff) from module b03.

yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
MAX OPT ITERATION = 1

yosys> fsm -encoding binary

3.25. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.25.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking b03.grant as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking b03.stato as FSM state register:
    Users of register don't seem to benefit from recoding.

yosys> fsm_extract

3.25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> fsm_opt

3.25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

yosys> opt_merge -nomux

3.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.28. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

yosys> opt_reduce

3.29. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.30. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_share

3.31. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.32. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$ru4_reg$b03.vhd:131$165 ($adff) from module b03 (D = $auto$bmuxmap.cc:58:execute$208, Q = \ru4).
Adding EN signal on $verific$ru3_reg$b03.vhd:131$163 ($adff) from module b03 (D = $auto$bmuxmap.cc:58:execute$213, Q = \ru3).
Adding EN signal on $verific$ru2_reg$b03.vhd:131$161 ($adff) from module b03 (D = $auto$bmuxmap.cc:58:execute$218, Q = \ru2).
Adding EN signal on $verific$ru1_reg$b03.vhd:131$159 ($adff) from module b03 (D = $auto$bmuxmap.cc:58:execute$223, Q = \ru1).
Adding EN signal on $verific$grant_reg$b03.vhd:131$167 ($adff) from module b03 (D = $auto$bmuxmap.cc:58:execute$170 [7:4], Q = \grant).
Adding EN signal on $verific$grant_o_reg$b03.vhd:131$168 ($adff) from module b03 (D = $auto$bmuxmap.cc:58:execute$198, Q = \grant_o).
Adding EN signal on $verific$fu4_reg$b03.vhd:131$166 ($adff) from module b03 (D = \ru4, Q = \fu4).
Adding EN signal on $verific$fu3_reg$b03.vhd:131$164 ($adff) from module b03 (D = \ru3, Q = \fu3).
Adding EN signal on $verific$fu2_reg$b03.vhd:131$162 ($adff) from module b03 (D = \ru2, Q = \fu2).
Adding EN signal on $verific$fu1_reg$b03.vhd:131$160 ($adff) from module b03 (D = \ru1, Q = \fu1).
Adding EN signal on $verific$coda3_reg$b03.vhd:131$158 ($adff) from module b03 (D = $auto$bmuxmap.cc:58:execute$193, Q = \coda3).
Adding EN signal on $verific$coda2_reg$b03.vhd:131$157 ($adff) from module b03 (D = $auto$bmuxmap.cc:58:execute$188, Q = \coda2).
Adding EN signal on $verific$coda1_reg$b03.vhd:131$156 ($adff) from module b03 (D = $auto$bmuxmap.cc:58:execute$183, Q = \coda1).
Adding EN signal on $verific$coda0_reg$b03.vhd:131$155 ($adff) from module b03 (D = $auto$bmuxmap.cc:58:execute$178, Q = \coda0).

yosys> opt_clean

3.33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 5 unused cells and 5 unused wires.
<suppressed ~6 debug messages>

yosys> opt_expr

3.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~7 debug messages>

yosys> opt_muxtree

3.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

yosys> opt_reduce

3.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
<suppressed ~96 debug messages>
Removed a total of 32 cells.

yosys> opt_share

3.38. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.39. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 28 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~4 debug messages>

yosys> opt_muxtree

3.42. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

yosys> opt_reduce

3.43. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.44. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_share

3.45. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.46. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
MAX OPT ITERATION = 3

yosys> wreduce -keepdc

3.49. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell b03.$auto$opt_dff.cc:195:make_patterns_logic$237 ($ne).
Removed top 1 bits (of 6) from port B of cell b03.$auto$opt_dff.cc:195:make_patterns_logic$269 ($ne).
Removed top 1 bits (of 6) from port B of cell b03.$auto$opt_dff.cc:195:make_patterns_logic$265 ($ne).
Removed top 1 bits (of 7) from port B of cell b03.$auto$opt_dff.cc:195:make_patterns_logic$267 ($ne).
Removed top 1 bits (of 5) from port B of cell b03.$auto$opt_dff.cc:195:make_patterns_logic$271 ($ne).
Removed top 1 bits (of 4) from port B of cell b03.$auto$opt_dff.cc:195:make_patterns_logic$273 ($ne).
Removed top 2 bits (of 4) from mux cell b03.$auto$bmuxmap.cc:60:execute$226 ($mux).
Removed top 1 bits (of 4) from mux cell b03.$auto$bmuxmap.cc:60:execute$227 ($mux).
Removed top 3 bits (of 4) from mux cell b03.$auto$bmuxmap.cc:60:execute$229 ($mux).
Removed top 1 bits (of 4) from mux cell b03.$auto$bmuxmap.cc:60:execute$231 ($mux).
Removed top 4 bits (of 8) from wire b03.$auto$bmuxmap.cc:58:execute$195.
Removed top 3 bits (of 16) from wire b03.$auto$bmuxmap.cc:58:execute$225.

yosys> peepopt

3.50. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.51. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.52. Executing BMUXMAP pass.

yosys> demuxmap

3.53. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.54. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b03:
  created 0 $alu and 0 $macc cells.

yosys> opt_expr

3.55. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

yosys> opt_merge -nomux

3.56. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.57. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

yosys> opt_reduce

3.58. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.59. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_share

3.60. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.61. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.62. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> opt_expr

3.63. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
MAX OPT ITERATION = 1

yosys> stat

3.64. Printing statistics.

=== b03 ===

   Number of wires:                 94
   Number of wire bits:            255
   Number of public wires:          21
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 97
     $adff                           1
     $adffe                         14
     $mux                           66
     $ne                             8
     $or                             3
     $reduce_and                     3
     $reduce_bool                    2


yosys> memory -nomap

3.65. Executing MEMORY pass.

yosys> opt_mem

3.65.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.65.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.65.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.65.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.65.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.65.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> memory_share

3.65.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.65.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.65.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> memory_collect

3.65.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.66. Printing statistics.

=== b03 ===

   Number of wires:                 94
   Number of wire bits:            255
   Number of public wires:          21
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 97
     $adff                           1
     $adffe                         14
     $mux                           66
     $ne                             8
     $or                             3
     $reduce_and                     3
     $reduce_bool                    2


yosys> muxpack

3.67. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~53 debug messages>

yosys> opt_clean

3.68. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> pmuxtree

3.69. Executing PMUXTREE pass.

yosys> muxpack

3.70. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~53 debug messages>

yosys> memory_map

3.71. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.72. Printing statistics.

=== b03 ===

   Number of wires:                 94
   Number of wire bits:            255
   Number of public wires:          21
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 97
     $adff                           1
     $adffe                         14
     $mux                           66
     $ne                             8
     $or                             3
     $reduce_and                     3
     $reduce_bool                    2


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.73. Executing TECHMAP pass (map to technology primitives).

3.73.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.73.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.73.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $adff.
No more expansions possible.
<suppressed ~168 debug messages>

yosys> stat

3.74. Printing statistics.

=== b03 ===

   Number of wires:                127
   Number of wire bits:            327
   Number of public wires:          21
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                296
     $_AND_                          8
     $_DFFE_PP0P_                   28
     $_DFF_PP0_                      2
     $_MUX_                        191
     $_OR_                          32
     $_XOR_                         35


yosys> opt_expr

3.75. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~47 debug messages>

yosys> opt_merge -nomux

3.76. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
<suppressed ~78 debug messages>
Removed a total of 26 cells.

yosys> opt_muxtree

3.77. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.78. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.79. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_share

3.80. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.81. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.82. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 29 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.83. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
MAX OPT ITERATION = 1

yosys> opt_expr -full

3.84. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~139 debug messages>

yosys> techmap -map +/techmap.v

3.85. Executing TECHMAP pass (map to technology primitives).

3.85.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.85.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.86. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

yosys> opt_merge -nomux

3.87. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_muxtree

3.88. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.89. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.90. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.91. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.92. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 46 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.93. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
MAX OPT ITERATION = 1

yosys> abc -dff

3.94. Executing ABC pass (technology mapping using ABC).

3.94.1. Summary of detected clock domains:
  5 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$257, arst=\reset, srst={ }
  11 cells in clk=\clock, en=\stato [0], arst=\reset, srst={ }
  9 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$250, arst=\reset, srst={ }
  45 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$278, arst=\reset, srst={ }
  14 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  18 cells in clk=\clock, en=$auto$opt_dff.cc:194:make_patterns_logic$236, arst=\reset, srst={ }

3.94.2. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$257, asynchronously reset by \reset
Extracted 5 gates and 11 wires to a netlist network with 6 inputs and 5 outputs.

3.94.2.1. Executing ABC.

3.94.3. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by \stato [0], asynchronously reset by \reset
Extracted 11 gates and 15 wires to a netlist network with 4 inputs and 5 outputs.

3.94.3.1. Executing ABC.

3.94.4. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$250, asynchronously reset by \reset
Extracted 9 gates and 17 wires to a netlist network with 7 inputs and 5 outputs.

3.94.4.1. Executing ABC.

3.94.5. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$278, asynchronously reset by \reset
Extracted 45 gates and 63 wires to a netlist network with 17 inputs and 6 outputs.

3.94.5.1. Executing ABC.

3.94.6. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 14 gates and 20 wires to a netlist network with 4 inputs and 9 outputs.

3.94.6.1. Executing ABC.

3.94.7. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:194:make_patterns_logic$236, asynchronously reset by \reset
Extracted 18 gates and 26 wires to a netlist network with 6 inputs and 14 outputs.

3.94.7.1. Executing ABC.

yosys> abc -dff

3.95. Executing ABC pass (technology mapping using ABC).

3.95.1. Summary of detected clock domains:
  18 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$871$auto$opt_dff.cc:219:make_patterns_logic$257, arst=\reset, srst={ }
  10 cells in clk=\clock, en=$abc$958$lo0, arst=\reset, srst={ }
  7 cells in clk=\clock, en=$abc$901$auto$opt_dff.cc:219:make_patterns_logic$250, arst=\reset, srst={ }
  41 cells in clk=\clock, en=$abc$915$auto$opt_dff.cc:219:make_patterns_logic$278, arst=\reset, srst={ }
  12 cells in clk=\clock, en=$abc$973$auto$opt_dff.cc:194:make_patterns_logic$236, arst=\reset, srst={ }

3.95.2. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 18 gates and 30 wires to a netlist network with 12 inputs and 14 outputs.

3.95.2.1. Executing ABC.

3.95.3. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$871$auto$opt_dff.cc:219:make_patterns_logic$257, asynchronously reset by \reset
Extracted 5 gates and 11 wires to a netlist network with 6 inputs and 5 outputs.

3.95.3.1. Executing ABC.

3.95.4. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$998$lo0, asynchronously reset by \reset
Extracted 10 gates and 14 wires to a netlist network with 4 inputs and 6 outputs.

3.95.4.1. Executing ABC.

3.95.5. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$901$auto$opt_dff.cc:219:make_patterns_logic$250, asynchronously reset by \reset
Extracted 7 gates and 14 wires to a netlist network with 7 inputs and 5 outputs.

3.95.5.1. Executing ABC.

3.95.6. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$915$auto$opt_dff.cc:219:make_patterns_logic$278, asynchronously reset by \reset
Extracted 41 gates and 62 wires to a netlist network with 21 inputs and 13 outputs.

3.95.6.1. Executing ABC.

3.95.7. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$998$abc$973$auto$opt_dff.cc:194:make_patterns_logic$236, asynchronously reset by \reset
Extracted 12 gates and 16 wires to a netlist network with 4 inputs and 12 outputs.

3.95.7.1. Executing ABC.

yosys> abc -dff

3.96. Executing ABC pass (technology mapping using ABC).

3.96.1. Summary of detected clock domains:
  18 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$1019$abc$871$auto$opt_dff.cc:219:make_patterns_logic$257, arst=\reset, srst={ }
  44 cells in clk=\clock, en=$abc$1062$abc$915$auto$opt_dff.cc:219:make_patterns_logic$278, arst=\reset, srst={ }
  10 cells in clk=\clock, en=$abc$998$lo0, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$1048$abc$901$auto$opt_dff.cc:219:make_patterns_logic$250, arst=\reset, srst={ }
  12 cells in clk=\clock, en=$abc$998$abc$973$auto$opt_dff.cc:194:make_patterns_logic$236, arst=\reset, srst={ }

3.96.2. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 18 gates and 30 wires to a netlist network with 12 inputs and 15 outputs.

3.96.2.1. Executing ABC.

3.96.3. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1019$abc$871$auto$opt_dff.cc:219:make_patterns_logic$257, asynchronously reset by \reset
Extracted 5 gates and 11 wires to a netlist network with 6 inputs and 5 outputs.

3.96.3.1. Executing ABC.

3.96.4. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1062$abc$915$auto$opt_dff.cc:219:make_patterns_logic$278, asynchronously reset by \reset
Extracted 44 gates and 65 wires to a netlist network with 21 inputs and 11 outputs.

3.96.4.1. Executing ABC.

3.96.5. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1140$lo0, asynchronously reset by \reset
Extracted 10 gates and 14 wires to a netlist network with 4 inputs and 6 outputs.

3.96.5.1. Executing ABC.

3.96.6. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1140$abc$1048$abc$901$auto$opt_dff.cc:219:make_patterns_logic$250, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 4 outputs.

3.96.6.1. Executing ABC.

3.96.7. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1140$abc$998$abc$973$auto$opt_dff.cc:194:make_patterns_logic$236, asynchronously reset by \reset
Extracted 12 gates and 16 wires to a netlist network with 4 inputs and 12 outputs.

3.96.7.1. Executing ABC.

yosys> abc -dff

3.97. Executing ABC pass (technology mapping using ABC).

3.97.1. Summary of detected clock domains:
  8 cells in clk=\clock, en=$abc$1140$abc$1048$abc$901$auto$opt_dff.cc:219:make_patterns_logic$250, arst=\reset, srst={ }
  14 cells in clk=\clock, en={ }, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$1162$abc$1019$abc$871$auto$opt_dff.cc:219:make_patterns_logic$257, arst=\reset, srst={ }
  45 cells in clk=\clock, en=$abc$1176$abc$1062$abc$915$auto$opt_dff.cc:219:make_patterns_logic$278, arst=\reset, srst={ }
  10 cells in clk=\clock, en=$abc$1140$lo0, arst=\reset, srst={ }
  12 cells in clk=\clock, en=$abc$1140$abc$998$abc$973$auto$opt_dff.cc:194:make_patterns_logic$236, arst=\reset, srst={ }

3.97.2. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1140$abc$1048$abc$901$auto$opt_dff.cc:219:make_patterns_logic$250, asynchronously reset by \reset
Extracted 8 gates and 17 wires to a netlist network with 9 inputs and 6 outputs.

3.97.2.1. Executing ABC.

3.97.3. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 14 gates and 21 wires to a netlist network with 7 inputs and 12 outputs.

3.97.3.1. Executing ABC.

3.97.4. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1162$abc$1019$abc$871$auto$opt_dff.cc:219:make_patterns_logic$257, asynchronously reset by \reset
Extracted 5 gates and 11 wires to a netlist network with 6 inputs and 5 outputs.

3.97.4.1. Executing ABC.

3.97.5. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1176$abc$1062$abc$915$auto$opt_dff.cc:219:make_patterns_logic$278, asynchronously reset by \reset
Extracted 45 gates and 65 wires to a netlist network with 20 inputs and 9 outputs.

3.97.5.1. Executing ABC.

3.97.6. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1295$lo0, asynchronously reset by \reset
Extracted 10 gates and 14 wires to a netlist network with 4 inputs and 6 outputs.

3.97.6.1. Executing ABC.

3.97.7. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1295$abc$1140$abc$998$abc$973$auto$opt_dff.cc:194:make_patterns_logic$236, asynchronously reset by \reset
Extracted 12 gates and 16 wires to a netlist network with 4 inputs and 12 outputs.

3.97.7.1. Executing ABC.

yosys> opt_ffinv

3.98. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.99. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~4 debug messages>

yosys> opt_merge -nomux

3.100. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_muxtree

3.101. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.102. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.103. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_share

3.104. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.105. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.106. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 697 unused wires.
<suppressed ~9 debug messages>

yosys> opt_expr

3.107. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
MAX OPT ITERATION = 1

yosys> bmuxmap

3.108. Executing BMUXMAP pass.

yosys> demuxmap

3.109. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_y25c1w/abc_tmp_1.scr

3.110. Executing ABC pass (technology mapping using ABC).

3.110.1. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Extracted 62 gates and 84 wires to a netlist network with 22 inputs and 20 outputs.

3.110.1.1. Executing ABC.
DE:   #PIs =  22  #Luts =    24  Max Lvl =   2  Avg Lvl =   1.00  [   0.09 sec. at Pass 0]{firstMap}
DE:   #PIs =  22  #Luts =    21  Max Lvl =   2  Avg Lvl =   1.00  [   0.20 sec. at Pass 1]{initMapFlow}
DE:   #PIs =  22  #Luts =    21  Max Lvl =   2  Avg Lvl =   1.00  [   0.19 sec. at Pass 2]{map}
DE:   #PIs =  22  #Luts =    21  Max Lvl =   2  Avg Lvl =   1.00  [   0.37 sec. at Pass 3]{postMap}
DE:   #PIs =  22  #Luts =    21  Max Lvl =   2  Avg Lvl =   1.00  [   0.44 sec. at Pass 4]{map}
DE:   #PIs =  22  #Luts =    21  Max Lvl =   2  Avg Lvl =   1.00  [   1.00 sec. at Pass 5]{postMap}
DE:   #PIs =  22  #Luts =    21  Max Lvl =   2  Avg Lvl =   1.00  [   2.39 sec. at Pass 6]{pushMap}
DE:   #PIs =  22  #Luts =    21  Max Lvl =   2  Avg Lvl =   1.00  [   1.40 sec. at Pass 7]{finalMap}

yosys> opt_expr

3.111. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

yosys> opt_merge -nomux

3.112. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.113. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.114. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.115. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_share

3.116. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.117. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.118. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 84 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.119. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.120. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.121. Printing statistics.

=== b03 ===

   Number of wires:                 50
   Number of wire bits:             57
   Number of public wires:          13
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 51
     $_DFFE_PP0N_                    4
     $_DFFE_PP0P_                   24
     $_DFF_PP0_                      2
     $lut                           21


yosys> shregmap -minlen 8 -maxlen 20

3.122. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.123. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.124. Printing statistics.

=== b03 ===

   Number of wires:                 50
   Number of wire bits:             57
   Number of public wires:          13
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 51
     $_DFFE_PP0N_                    4
     $_DFFE_PP0P_                   24
     $_DFF_PP0_                      2
     $lut                           21


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.125. Executing TECHMAP pass (map to technology primitives).

3.125.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.125.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.125.3. Continuing TECHMAP pass.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0N_ for cells of type $_DFFE_PP0N_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~221 debug messages>

yosys> opt_expr -mux_undef

3.126. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~239 debug messages>

yosys> simplemap

3.127. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.128. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

yosys> opt_merge

3.129. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
<suppressed ~168 debug messages>
Removed a total of 56 cells.

yosys> opt_dff -nodffe -nosdff

3.130. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.131. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 221 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.132. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
<suppressed ~9 debug messages>

yosys> opt_merge -nomux

3.133. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.134. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.135. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.136. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_share

3.137. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.138. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.139. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.140. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_y25c1w/abc_tmp_2.scr

3.141. Executing ABC pass (technology mapping using ABC).

3.141.1. Extracting gate netlist of module `\b03' to `<abc-temp-dir>/input.blif'..
Extracted 47 gates and 72 wires to a netlist network with 23 inputs and 21 outputs.

3.141.1.1. Executing ABC.
DE:   #PIs =  23  #Luts =    22  Max Lvl =   2  Avg Lvl =   0.95  [   0.17 sec. at Pass 0]{firstMap}
DE:   #PIs =  23  #Luts =    22  Max Lvl =   2  Avg Lvl =   0.95  [   0.32 sec. at Pass 1]{initMapFlow}
DE:   #PIs =  23  #Luts =    22  Max Lvl =   2  Avg Lvl =   0.95  [   0.11 sec. at Pass 2]{map}
DE:   #PIs =  23  #Luts =    22  Max Lvl =   2  Avg Lvl =   0.95  [   0.29 sec. at Pass 3]{postMap}
DE:   #PIs =  23  #Luts =    22  Max Lvl =   2  Avg Lvl =   0.95  [   0.68 sec. at Pass 4]{map}
DE:   #PIs =  23  #Luts =    22  Max Lvl =   2  Avg Lvl =   0.95  [   1.50 sec. at Pass 5]{postMap}
DE:   #PIs =  23  #Luts =    22  Max Lvl =   2  Avg Lvl =   0.95  [   3.30 sec. at Pass 6]{pushMap}
DE:   #PIs =  23  #Luts =    22  Max Lvl =   2  Avg Lvl =   0.95  [   3.30 sec. at Pass 7]{finalMap}

yosys> opt_expr

3.142. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.

yosys> opt_merge -nomux

3.143. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.144. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b03..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.145. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b03.
Performed a total of 0 changes.

yosys> opt_merge

3.146. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b03'.
Removed a total of 0 cells.

yosys> opt_share

3.147. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.148. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.149. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..
Removed 0 unused cells and 70 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.150. Executing OPT_EXPR pass (perform const folding).
Optimizing module b03.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.151. Executing HIERARCHY pass (managing design hierarchy).

3.151.1. Analyzing design hierarchy..
Top module:  \b03

3.151.2. Analyzing design hierarchy..
Top module:  \b03
Removed 0 unused modules.

yosys> stat

3.152. Printing statistics.

=== b03 ===

   Number of wires:                 51
   Number of wire bits:             58
   Number of public wires:          13
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 52
     $lut                           22
     dffsre                         30


yosys> opt_clean -purge

3.153. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b03..

yosys> write_verilog -noattr -nohex synthesized.v

3.154. Executing Verilog backend.
Dumping module `\b03'.

End of script. Logfile hash: 7506350a82, CPU: user 0.57s system 0.03s, MEM: 37.56 MB peak
Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)
Time spent: 98% 6x abc (40 sec), 0% 9x read_verilog (0 sec), ...
real 25.00
user 33.37
sys 7.46
