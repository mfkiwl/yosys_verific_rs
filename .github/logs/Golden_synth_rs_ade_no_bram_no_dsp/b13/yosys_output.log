
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.92
 Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b13.vhd

yosys> verific -vhdl b13.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b13.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b13.vhd:1: analyzing entity 'b13'
VERIFIC-INFO [VHDL-1010] b13.vhd:21: analyzing architecture 'behav'

yosys> synth_rs -top b13 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.79

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b13

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b13.vhd:1: processing 'b13(BEHAV)'
VERIFIC-INFO [VHDL-1172] b13.vhd:125: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] b13.vhd:167: 'others' clause is never selected
VERIFIC-INFO [VHDL-1172] b13.vhd:203: 'others' clause is never selected
Importing module b13.

3.4.1. Analyzing design hierarchy..
Top module:  \b13

3.4.2. Analyzing design hierarchy..
Top module:  \b13
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~25 debug messages>

yosys> bmuxmap

3.6. Executing BMUXMAP pass.

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).

yosys> bmuxmap

3.9. Executing BMUXMAP pass.

yosys> demuxmap

3.10. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.11. Executing TRIBUF pass.

yosys> deminout

3.12. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~37 debug messages>

yosys> opt_clean

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 3 unused cells and 76 unused wires.
<suppressed ~18 debug messages>

yosys> check

3.15. Executing CHECK pass (checking for obvious problems).
Checking module b13...
Found and reported 0 problems.

yosys> opt_expr

3.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.18. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $verific$mux_114$b13.vhd:202$184: \itfc_state -> 2'11
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.19. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.20. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_share

3.21. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.22. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$tx_end_reg$b13.vhd:294$235 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$tx_conta_reg$b13.vhd:294$238 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$tre_reg$b13.vhd:239$212 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$soc_reg$b13.vhd:127$150 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$shot_reg$b13.vhd:169$180 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$send_reg$b13.vhd:205$190 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$send_en_reg$b13.vhd:239$210 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$send_data_reg$b13.vhd:127$153 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$rdy_reg$b13.vhd:169$177 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$out_reg_reg$b13.vhd:239$211 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$next_bit_reg$b13.vhd:294$237 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$mux_en_reg$b13.vhd:127$155 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$mpx_reg$b13.vhd:169$179 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$load_reg$b13.vhd:205$189 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$load_dato_reg$b13.vhd:127$154 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$itfc_state_reg$b13.vhd:205$192 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$error_reg$b13.vhd:239$213 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$data_out_reg$b13.vhd:294$236 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$conta_tmp_reg$b13.vhd:127$152 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$confirm_reg$b13.vhd:205$191 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$canale_reg$b13.vhd:127$151 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$add_mpx2_reg$b13.vhd:169$178 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$S2_reg$b13.vhd:169$176 ($aldff) from module b13.
Changing const-value async load to async reset on $verific$S1_reg$b13.vhd:127$149 ($aldff) from module b13.

yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_muxtree

3.25. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

yosys> opt_reduce

3.26. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.28. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.29. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.31. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 2

yosys> fsm -encoding binary

3.32. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.32.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking b13.S1 as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking b13.S2 as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking b13.itfc_state as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking b13.next_bit as FSM state register:
    Users of register don't seem to benefit from recoding.

yosys> fsm_extract

3.32.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.32.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> fsm_opt

3.32.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.32.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.32.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.32.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.34. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

yosys> opt_reduce

3.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.38. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.39. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$tx_conta_reg$b13.vhd:294$238 ($adff) from module b13 (D = $verific$n1576$120, Q = \tx_conta).
Adding EN signal on $verific$soc_reg$b13.vhd:127$150 ($adff) from module b13 (D = $auto$bmuxmap.cc:58:execute$398, Q = \soc).
Adding EN signal on $verific$shot_reg$b13.vhd:169$180 ($adff) from module b13 (D = $auto$bmuxmap.cc:58:execute$338, Q = \shot).
Adding EN signal on $verific$send_reg$b13.vhd:205$190 ($adff) from module b13 (D = $auto$bmuxmap.cc:58:execute$308, Q = \send).
Adding EN signal on $verific$send_data_reg$b13.vhd:127$153 ($adff) from module b13 (D = $auto$bmuxmap.cc:58:execute$358, Q = \send_data).
Adding EN signal on $verific$rdy_reg$b13.vhd:169$177 ($adff) from module b13 (D = $auto$bmuxmap.cc:58:execute$348, Q = \rdy).
Adding EN signal on $verific$out_reg_reg$b13.vhd:239$211 ($adff) from module b13 (D = \data_in, Q = \out_reg).
Adding EN signal on $verific$next_bit_reg$b13.vhd:294$237 ($adff) from module b13 (D = $auto$bmuxmap.cc:58:execute$284, Q = \next_bit).
Adding EN signal on $verific$mux_en_reg$b13.vhd:127$155 ($adff) from module b13 (D = $auto$bmuxmap.cc:58:execute$418, Q = \mux_en).
Adding EN signal on $verific$mpx_reg$b13.vhd:169$179 ($adff) from module b13 (D = $verific$n732$20, Q = \mpx).
Adding EN signal on $verific$load_reg$b13.vhd:205$189 ($adff) from module b13 (D = $auto$bmuxmap.cc:58:execute$320 [0], Q = \load).
Adding EN signal on $verific$load_dato_reg$b13.vhd:127$154 ($adff) from module b13 (D = $auto$bmuxmap.cc:58:execute$385 [1], Q = \load_dato).
Adding EN signal on $verific$error_reg$b13.vhd:239$213 ($adff) from module b13 (D = $verific$n1079$46, Q = \error).
Adding EN signal on $verific$conta_tmp_reg$b13.vhd:127$152 ($adff) from module b13 (D = $verific$n264$73, Q = \conta_tmp).
Adding EN signal on $verific$confirm_reg$b13.vhd:205$191 ($adff) from module b13 (D = $auto$bmuxmap.cc:58:execute$318, Q = \confirm).
Adding EN signal on $verific$canale_reg$b13.vhd:127$151 ($adff) from module b13 (D = $verific$n264$73, Q = \canale).
Adding EN signal on $verific$add_mpx2_reg$b13.vhd:169$178 ($adff) from module b13 (D = 1'1, Q = \add_mpx2).
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$519 ($adffe) from module b13.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$420 ($adffe) from module b13.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$420 ($adffe) from module b13.
Setting constant 0-bit at position 9 on $auto$ff.cc:262:slice$420 ($adffe) from module b13.

yosys> opt_clean

3.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 20 unused cells and 20 unused wires.
<suppressed ~21 debug messages>

yosys> opt_expr

3.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~8 debug messages>

yosys> opt_muxtree

3.42. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

yosys> opt_reduce

3.43. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.44. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

yosys> opt_share

3.45. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.46. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$533 ($adffe) from module b13.

yosys> opt_clean

3.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_muxtree

3.49. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.50. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_share

3.52. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.53. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.55. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_muxtree

3.56. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.57. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.58. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.59. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.60. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.62. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 4

yosys> wreduce -keepdc

3.63. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell b13.$auto$opt_dff.cc:195:make_patterns_logic$490 ($ne).
Removed top 1 bits (of 3) from port B of cell b13.$auto$opt_dff.cc:195:make_patterns_logic$452 ($ne).
Removed top 1 bits (of 2) from port B of cell b13.$auto$opt_dff.cc:195:make_patterns_logic$469 ($ne).
Removed top 2 bits (of 3) from port B of cell b13.$auto$opt_dff.cc:195:make_patterns_logic$488 ($ne).
Removed top 1 bits (of 4) from port B of cell b13.$auto$opt_dff.cc:195:make_patterns_logic$450 ($ne).
Removed top 1 bits (of 3) from mux cell b13.$verific$mux_18$b13.vhd:103$130 ($mux).
Removed top 1 bits (of 4) from port A of cell b13.$verific$add_23$b13.vhd:107$133 ($add).
Removed top 3 bits (of 4) from port B of cell b13.$verific$add_23$b13.vhd:107$133 ($add).
Removed top 1 bits (of 5) from port Y of cell b13.$verific$add_23$b13.vhd:107$133 ($add).
Removed top 1 bits (of 4) from mux cell b13.$verific$mux_26$b13.vhd:110$137 ($mux).
Removed top 1 bits (of 3) from mux cell b13.$verific$mux_36$b13.vhd:124$140 ($mux).
Removed top 1 bits (of 2) from mux cell b13.$verific$mux_61$b13.vhd:146$157 ($mux).
Removed top 1 bits (of 3) from port B of cell b13.$auto$opt_dff.cc:195:make_patterns_logic$509 ($ne).
Removed top 1 bits (of 3) from port B of cell b13.$auto$opt_dff.cc:195:make_patterns_logic$423 ($ne).
Removed top 1 bits (of 2) from mux cell b13.$verific$mux_105$b13.vhd:190$182 ($mux).
Removed top 3 bits (of 10) from port A of cell b13.$verific$LessThan_162$b13.vhd:255$214 ($lt).
Removed top 3 bits (of 10) from port B of cell b13.$verific$LessThan_162$b13.vhd:255$214 ($lt).
Removed top 3 bits (of 10) from port A of cell b13.$verific$add_188$b13.vhd:291$226 ($add).
Removed top 9 bits (of 10) from port B of cell b13.$verific$add_188$b13.vhd:291$226 ($add).
Removed top 2 bits (of 10) from port Y of cell b13.$verific$add_188$b13.vhd:291$226 ($add).
Removed top 3 bits (of 10) from mux cell b13.$verific$mux_193$b13.vhd:292$230 ($mux).
Removed top 2 bits (of 4) from mux cell b13.$auto$bmuxmap.cc:60:execute$268 ($mux).
Removed top 1 bits (of 4) from mux cell b13.$auto$bmuxmap.cc:60:execute$269 ($mux).
Removed top 2 bits (of 4) from mux cell b13.$auto$bmuxmap.cc:60:execute$270 ($mux).
Removed top 1 bits (of 4) from mux cell b13.$auto$bmuxmap.cc:60:execute$277 ($mux).
Removed top 1 bits (of 2) from port B of cell b13.$auto$opt_dff.cc:195:make_patterns_logic$530 ($ne).
Removed top 1 bits (of 3) from mux cell b13.$auto$bmuxmap.cc:60:execute$401 ($mux).
Removed top 1 bits (of 3) from mux cell b13.$auto$bmuxmap.cc:60:execute$404 ($mux).
Removed top 1 bits (of 8) from port Y of cell b13.$verific$add_188$b13.vhd:291$226 ($add).
Removed top 7 bits (of 8) from wire b13.$auto$bmuxmap.cc:58:execute$248.
Removed top 1 bits (of 4) from wire b13.$auto$bmuxmap.cc:58:execute$257.
Removed top 12 bits (of 32) from wire b13.$auto$bmuxmap.cc:58:execute$267.
Removed top 4 bits (of 16) from wire b13.$auto$bmuxmap.cc:58:execute$276.
Removed top 3 bits (of 8) from wire b13.$auto$bmuxmap.cc:58:execute$286.
Removed top 1 bits (of 4) from wire b13.$auto$bmuxmap.cc:58:execute$295.
Removed top 1 bits (of 12) from wire b13.$auto$bmuxmap.cc:58:execute$400.
Removed top 3 bits (of 10) from wire b13.$verific$n1546$117.
Removed top 3 bits (of 10) from wire b13.$verific$n1576$120.
Removed top 1 bits (of 3) from wire b13.$verific$n243$70.
Removed top 1 bits (of 4) from wire b13.$verific$n264$73.
Removed top 1 bits (of 2) from wire b13.$verific$n588$86.
Removed top 1 bits (of 2) from wire b13.$verific$n898$95.
Removed top 1 bits (of 4) from wire b13.conta_tmp.
Removed top 3 bits (of 10) from wire b13.tx_conta.

yosys> peepopt

3.64. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.65. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.66. Executing BMUXMAP pass.

yosys> demuxmap

3.67. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.68. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b13:
  creating $macc model for $verific$add_188$b13.vhd:291$226 ($add).
  creating $macc model for $verific$add_23$b13.vhd:107$133 ($add).
  creating $alu model for $macc $verific$add_23$b13.vhd:107$133.
  creating $alu model for $macc $verific$add_188$b13.vhd:291$226.
  creating $alu model for $verific$LessThan_162$b13.vhd:255$214 ($lt): new $alu
  creating $alu cell for $verific$LessThan_162$b13.vhd:255$214: $auto$alumacc.cc:485:replace_alu$564
  creating $alu cell for $verific$add_188$b13.vhd:291$226: $auto$alumacc.cc:485:replace_alu$569
  creating $alu cell for $verific$add_23$b13.vhd:107$133: $auto$alumacc.cc:485:replace_alu$572
  created 3 $alu and 0 $macc cells.

yosys> opt_expr

3.69. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~3 debug messages>

yosys> opt_merge -nomux

3.70. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.71. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.72. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.73. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.74. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.75. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.76. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.77. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 1

yosys> stat

3.78. Printing statistics.

=== b13 ===

   Number of wires:                162
   Number of wire bits:            359
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                179
     $adff                           7
     $adffe                         16
     $alu                            3
     $eq                             1
     $mux                          101
     $ne                            22
     $not                            7
     $or                             1
     $reduce_and                    14
     $reduce_bool                    7


yosys> memory -nomap

3.79. Executing MEMORY pass.

yosys> opt_mem

3.79.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.79.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.79.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.79.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.79.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.79.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> memory_share

3.79.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.79.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.79.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> memory_collect

3.79.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.80. Printing statistics.

=== b13 ===

   Number of wires:                162
   Number of wire bits:            359
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                179
     $adff                           7
     $adffe                         16
     $alu                            3
     $eq                             1
     $mux                          101
     $ne                            22
     $not                            7
     $or                             1
     $reduce_and                    14
     $reduce_bool                    7


yosys> muxpack

3.81. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~74 debug messages>

yosys> opt_clean

3.82. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> pmuxtree

3.83. Executing PMUXTREE pass.

yosys> muxpack

3.84. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~74 debug messages>

yosys> memory_map

3.85. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.86. Printing statistics.

=== b13 ===

   Number of wires:                162
   Number of wire bits:            359
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                179
     $adff                           7
     $adffe                         16
     $alu                            3
     $eq                             1
     $mux                          101
     $ne                            22
     $not                            7
     $or                             1
     $reduce_and                    14
     $reduce_bool                    7


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.87. Executing TECHMAP pass (map to technology primitives).

3.87.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.87.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.87.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$dbcdc7e8aa1a4080cea2deda6fdc8772064f4d90\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $or.
Using template $paramod$103b4016182df467cceab67bcf3e18e6361ec0fd\_90_alu for cells of type $alu.
Using template $paramod$bfceb922395790c0ce92e9f9b5b428d4fc72cc30\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
No more expansions possible.
<suppressed ~811 debug messages>

yosys> stat

3.88. Printing statistics.

=== b13 ===

   Number of wires:                366
   Number of wire bits:           4147
   Number of public wires:          29
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                503
     $_AND_                         79
     $_DFFE_PP0P_                   34
     $_DFF_PP0_                     11
     $_MUX_                        177
     $_NOT_                         26
     $_OR_                          73
     $_XOR_                        103


yosys> opt_expr

3.89. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~183 debug messages>

yosys> opt_merge -nomux

3.90. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~210 debug messages>
Removed a total of 70 cells.

yosys> opt_muxtree

3.91. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.92. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.93. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.94. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.95. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.96. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 12 unused cells and 223 unused wires.
<suppressed ~13 debug messages>

yosys> opt_expr

3.97. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~1 debug messages>

yosys> opt_muxtree

3.98. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.99. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.100. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.101. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.102. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.103. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.104. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 2

yosys> opt_expr -full

3.105. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~58 debug messages>

yosys> techmap -map +/techmap.v

3.106. Executing TECHMAP pass (map to technology primitives).

3.106.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.106.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.107. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.108. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

yosys> opt_muxtree

3.109. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.110. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.111. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.112. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.113. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 31 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.114. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 1

yosys> abc -dff

3.115. Executing ABC pass (technology mapping using ABC).

3.115.1. Summary of detected clock domains:
  43 cells in clk=\clock, en=\send_en, arst=\reset, srst={ }
  30 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$480, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$459, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$514, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$446, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$505, arst=\reset, srst={ }
  16 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$522, arst=\reset, srst={ }
  8 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$477, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$498, arst=\reset, srst={ }
  1 cells in clk=\clock, en=$auto$opt_dff.cc:194:make_patterns_logic$517, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$472, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$531, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$543, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$439, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$430, arst=\reset, srst={ }
  8 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$493, arst=\reset, srst={ }
  79 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.115.2. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by \send_en, asynchronously reset by \reset
Extracted 43 gates and 43 wires to a netlist network with 0 inputs and 1 outputs.

3.115.2.1. Executing ABC.

3.115.3. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$480, asynchronously reset by \reset
Extracted 30 gates and 42 wires to a netlist network with 10 inputs and 3 outputs.

3.115.3.1. Executing ABC.

3.115.4. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$459, asynchronously reset by \reset
Extracted 9 gates and 19 wires to a netlist network with 9 inputs and 3 outputs.

3.115.4.1. Executing ABC.

3.115.5. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$514, asynchronously reset by \reset
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 3 outputs.

3.115.5.1. Executing ABC.

3.115.6. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$446, asynchronously reset by \reset
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 3 outputs.

3.115.6.1. Executing ABC.

3.115.7. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$505, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 3 outputs.

3.115.7.1. Executing ABC.

3.115.8. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$522, asynchronously reset by \reset
Extracted 16 gates and 18 wires to a netlist network with 2 inputs and 4 outputs.

3.115.8.1. Executing ABC.

3.115.9. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1646$auto$opt_dff.cc:219:make_patterns_logic$477, asynchronously reset by \reset
Extracted 8 gates and 16 wires to a netlist network with 8 inputs and 8 outputs.

3.115.9.1. Executing ABC.

3.115.10. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$498, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 4 inputs and 4 outputs.

3.115.10.1. Executing ABC.

3.115.11. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1639$auto$opt_dff.cc:194:make_patterns_logic$517, asynchronously reset by \reset
Extracted 1 gates and 2 wires to a netlist network with 1 inputs and 1 outputs.

3.115.11.1. Executing ABC.

3.115.12. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$472, asynchronously reset by \reset
Extracted 9 gates and 17 wires to a netlist network with 8 inputs and 3 outputs.

3.115.12.1. Executing ABC.

3.115.13. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$531, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.115.13.1. Executing ABC.

3.115.14. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$543, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.115.14.1. Executing ABC.

3.115.15. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$439, asynchronously reset by \reset
Extracted 5 gates and 9 wires to a netlist network with 4 inputs and 3 outputs.

3.115.15.1. Executing ABC.

3.115.16. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$430, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 2 outputs.

3.115.16.1. Executing ABC.

3.115.17. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$493, asynchronously reset by \reset
Extracted 8 gates and 15 wires to a netlist network with 7 inputs and 2 outputs.

3.115.17.1. Executing ABC.

3.115.18. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 79 gates and 96 wires to a netlist network with 15 inputs and 39 outputs.

3.115.18.1. Executing ABC.

yosys> abc -dff

3.116. Executing ABC pass (technology mapping using ABC).

3.116.1. Summary of detected clock domains:
  7 cells in clk=\clock, en=$abc$1639$auto$opt_dff.cc:219:make_patterns_logic$446, arst=\reset, srst={ }
  8 cells in clk=\clock, en=$abc$1741$auto$opt_dff.cc:219:make_patterns_logic$493, arst=\reset, srst={ }
  6 cells in clk=\clock, en=$abc$1733$auto$opt_dff.cc:219:make_patterns_logic$430, arst=\reset, srst={ }
  8 cells in clk=\clock, en=$abc$1711$auto$opt_dff.cc:219:make_patterns_logic$531, arst=\reset, srst={ }
  8 cells in clk=\clock, en=$abc$1725$auto$opt_dff.cc:219:make_patterns_logic$439, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$abc$1700$auto$opt_dff.cc:219:make_patterns_logic$472, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$1646$auto$opt_dff.cc:219:make_patterns_logic$505, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$1632$auto$opt_dff.cc:219:make_patterns_logic$514, arst=\reset, srst={ }
  1 cells in clk=\clock, en=$abc$1639$auto$opt_dff.cc:194:make_patterns_logic$517, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$abc$1621$auto$opt_dff.cc:219:make_patterns_logic$459, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$abc$1719$auto$opt_dff.cc:219:make_patterns_logic$543, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$1689$auto$opt_dff.cc:219:make_patterns_logic$498, arst=\reset, srst={ }
  8 cells in clk=\clock, en=$abc$1652$auto$opt_dff.cc:219:make_patterns_logic$522, arst=\reset, srst={ }
  27 cells in clk=\clock, en=$abc$1581$auto$opt_dff.cc:219:make_patterns_logic$480, arst=\reset, srst={ }
  31 cells in clk=\clock, en=$abc$1751$lo09, arst=\reset, srst={ }
  14 cells in clk=\clock, en=$abc$1646$auto$opt_dff.cc:219:make_patterns_logic$477, arst=\reset, srst={ }
  72 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.116.2. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1639$auto$opt_dff.cc:219:make_patterns_logic$446, asynchronously reset by \reset
Extracted 7 gates and 13 wires to a netlist network with 6 inputs and 5 outputs.

3.116.2.1. Executing ABC.

3.116.3. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1741$auto$opt_dff.cc:219:make_patterns_logic$493, asynchronously reset by \reset
Extracted 8 gates and 15 wires to a netlist network with 7 inputs and 3 outputs.

3.116.3.1. Executing ABC.

3.116.4. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1733$auto$opt_dff.cc:219:make_patterns_logic$430, asynchronously reset by \reset
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 2 outputs.

3.116.4.1. Executing ABC.

3.116.5. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1711$auto$opt_dff.cc:219:make_patterns_logic$531, asynchronously reset by \reset
Extracted 8 gates and 16 wires to a netlist network with 8 inputs and 5 outputs.

3.116.5.1. Executing ABC.

3.116.6. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1725$auto$opt_dff.cc:219:make_patterns_logic$439, asynchronously reset by \reset
Extracted 8 gates and 13 wires to a netlist network with 5 inputs and 5 outputs.

3.116.6.1. Executing ABC.

3.116.7. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1700$auto$opt_dff.cc:219:make_patterns_logic$472, asynchronously reset by \reset
Extracted 9 gates and 17 wires to a netlist network with 8 inputs and 3 outputs.

3.116.7.1. Executing ABC.

3.116.8. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1646$auto$opt_dff.cc:219:make_patterns_logic$505, asynchronously reset by \reset
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 4 outputs.

3.116.8.1. Executing ABC.

3.116.9. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1632$auto$opt_dff.cc:219:make_patterns_logic$514, asynchronously reset by \reset
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 2 outputs.

3.116.9.1. Executing ABC.

3.116.10. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1833$abc$1639$auto$opt_dff.cc:194:make_patterns_logic$517, asynchronously reset by \reset
Extracted 1 gates and 2 wires to a netlist network with 1 inputs and 1 outputs.

3.116.10.1. Executing ABC.

3.116.11. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1621$auto$opt_dff.cc:219:make_patterns_logic$459, asynchronously reset by \reset
Extracted 9 gates and 18 wires to a netlist network with 9 inputs and 3 outputs.

3.116.11.1. Executing ABC.

3.116.12. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1719$auto$opt_dff.cc:219:make_patterns_logic$543, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.116.12.1. Executing ABC.

3.116.13. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1689$auto$opt_dff.cc:219:make_patterns_logic$498, asynchronously reset by \reset
Extracted 5 gates and 8 wires to a netlist network with 3 inputs and 4 outputs.

3.116.13.1. Executing ABC.

3.116.14. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1652$auto$opt_dff.cc:219:make_patterns_logic$522, asynchronously reset by \reset
Extracted 8 gates and 10 wires to a netlist network with 2 inputs and 4 outputs.

3.116.14.1. Executing ABC.

3.116.15. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1581$auto$opt_dff.cc:219:make_patterns_logic$480, asynchronously reset by \reset
Extracted 27 gates and 33 wires to a netlist network with 6 inputs and 11 outputs.

3.116.15.1. Executing ABC.

3.116.16. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1751$lo09, asynchronously reset by \reset
Extracted 31 gates and 32 wires to a netlist network with 1 inputs and 2 outputs.

3.116.16.1. Executing ABC.

3.116.17. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1646$auto$opt_dff.cc:219:make_patterns_logic$477, asynchronously reset by \reset
Extracted 14 gates and 28 wires to a netlist network with 14 inputs and 8 outputs.

3.116.17.1. Executing ABC.

3.116.18. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 72 gates and 94 wires to a netlist network with 22 inputs and 37 outputs.

3.116.18.1. Executing ABC.

yosys> abc -dff

3.117. Executing ABC pass (technology mapping using ABC).

3.117.1. Summary of detected clock domains:
  6 cells in clk=\clock, en=$abc$1833$abc$1639$auto$opt_dff.cc:219:make_patterns_logic$446, arst=\reset, srst={ }
  6 cells in clk=\clock, en=$abc$1842$abc$1741$auto$opt_dff.cc:219:make_patterns_logic$493, arst=\reset, srst={ }
  7 cells in clk=\clock, en=$abc$1853$abc$1733$auto$opt_dff.cc:219:make_patterns_logic$430, arst=\reset, srst={ }
  8 cells in clk=\clock, en=$abc$1862$abc$1711$auto$opt_dff.cc:219:make_patterns_logic$531, arst=\reset, srst={ }
  6 cells in clk=\clock, en=$abc$1872$abc$1725$auto$opt_dff.cc:219:make_patterns_logic$439, arst=\reset, srst={ }
  10 cells in clk=\clock, en=$abc$1882$abc$1700$auto$opt_dff.cc:219:make_patterns_logic$472, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$1893$abc$1646$auto$opt_dff.cc:219:make_patterns_logic$505, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$1900$abc$1632$auto$opt_dff.cc:219:make_patterns_logic$514, arst=\reset, srst={ }
  1 cells in clk=\clock, en=$abc$1833$abc$1639$auto$opt_dff.cc:194:make_patterns_logic$517, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$abc$1910$abc$1621$auto$opt_dff.cc:219:make_patterns_logic$459, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$abc$1921$abc$1719$auto$opt_dff.cc:219:make_patterns_logic$543, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$1927$abc$1689$auto$opt_dff.cc:219:make_patterns_logic$498, arst=\reset, srst={ }
  8 cells in clk=\clock, en=$abc$1934$abc$1652$auto$opt_dff.cc:219:make_patterns_logic$522, arst=\reset, srst={ }
  27 cells in clk=\clock, en=$abc$1946$abc$1581$auto$opt_dff.cc:219:make_patterns_logic$480, arst=\reset, srst={ }
  14 cells in clk=\clock, en=$abc$2012$abc$1646$auto$opt_dff.cc:219:make_patterns_logic$477, arst=\reset, srst={ }
  35 cells in clk=\clock, en=$abc$2037$lo09, arst=\reset, srst={ }
  80 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.117.2. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1833$abc$1639$auto$opt_dff.cc:219:make_patterns_logic$446, asynchronously reset by \reset
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 4 outputs.

3.117.2.1. Executing ABC.

3.117.3. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1842$abc$1741$auto$opt_dff.cc:219:make_patterns_logic$493, asynchronously reset by \reset
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 2 outputs.

3.117.3.1. Executing ABC.

3.117.4. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1853$abc$1733$auto$opt_dff.cc:219:make_patterns_logic$430, asynchronously reset by \reset
Extracted 7 gates and 13 wires to a netlist network with 6 inputs and 3 outputs.

3.117.4.1. Executing ABC.

3.117.5. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1862$abc$1711$auto$opt_dff.cc:219:make_patterns_logic$531, asynchronously reset by \reset
Extracted 8 gates and 16 wires to a netlist network with 8 inputs and 5 outputs.

3.117.5.1. Executing ABC.

3.117.6. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1872$abc$1725$auto$opt_dff.cc:219:make_patterns_logic$439, asynchronously reset by \reset
Extracted 6 gates and 11 wires to a netlist network with 5 inputs and 3 outputs.

3.117.6.1. Executing ABC.

3.117.7. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1882$abc$1700$auto$opt_dff.cc:219:make_patterns_logic$472, asynchronously reset by \reset
Extracted 10 gates and 18 wires to a netlist network with 8 inputs and 3 outputs.

3.117.7.1. Executing ABC.

3.117.8. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1893$abc$1646$auto$opt_dff.cc:219:make_patterns_logic$505, asynchronously reset by \reset
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 3 outputs.

3.117.8.1. Executing ABC.

3.117.9. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1900$abc$1632$auto$opt_dff.cc:219:make_patterns_logic$514, asynchronously reset by \reset
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 2 outputs.

3.117.9.1. Executing ABC.

3.117.10. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2121$abc$1833$abc$1639$auto$opt_dff.cc:194:make_patterns_logic$517, asynchronously reset by \reset
Extracted 1 gates and 2 wires to a netlist network with 1 inputs and 1 outputs.

3.117.10.1. Executing ABC.

3.117.11. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1910$abc$1621$auto$opt_dff.cc:219:make_patterns_logic$459, asynchronously reset by \reset
Extracted 9 gates and 18 wires to a netlist network with 9 inputs and 3 outputs.

3.117.11.1. Executing ABC.

3.117.12. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1921$abc$1719$auto$opt_dff.cc:219:make_patterns_logic$543, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.117.12.1. Executing ABC.

3.117.13. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1927$abc$1689$auto$opt_dff.cc:219:make_patterns_logic$498, asynchronously reset by \reset
Extracted 5 gates and 8 wires to a netlist network with 3 inputs and 4 outputs.

3.117.13.1. Executing ABC.

3.117.14. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1934$abc$1652$auto$opt_dff.cc:219:make_patterns_logic$522, asynchronously reset by \reset
Extracted 8 gates and 10 wires to a netlist network with 2 inputs and 4 outputs.

3.117.14.1. Executing ABC.

3.117.15. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1946$abc$1581$auto$opt_dff.cc:219:make_patterns_logic$480, asynchronously reset by \reset
Extracted 27 gates and 35 wires to a netlist network with 8 inputs and 11 outputs.

3.117.15.1. Executing ABC.

3.117.16. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2012$abc$1646$auto$opt_dff.cc:219:make_patterns_logic$477, asynchronously reset by \reset
Extracted 14 gates and 27 wires to a netlist network with 13 inputs and 9 outputs.

3.117.16.1. Executing ABC.

3.117.17. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2037$lo09, asynchronously reset by \reset
Extracted 35 gates and 36 wires to a netlist network with 1 inputs and 2 outputs.

3.117.17.1. Executing ABC.

3.117.18. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 80 gates and 102 wires to a netlist network with 22 inputs and 40 outputs.

3.117.18.1. Executing ABC.

yosys> abc -dff

3.118. Executing ABC pass (technology mapping using ABC).

3.118.1. Summary of detected clock domains:
  6 cells in clk=\clock, en=$abc$2121$abc$1833$abc$1639$auto$opt_dff.cc:219:make_patterns_logic$446, arst=\reset, srst={ }
  6 cells in clk=\clock, en=$abc$2128$abc$1842$abc$1741$auto$opt_dff.cc:219:make_patterns_logic$493, arst=\reset, srst={ }
  6 cells in clk=\clock, en=$abc$2136$abc$1853$abc$1733$auto$opt_dff.cc:219:make_patterns_logic$430, arst=\reset, srst={ }
  8 cells in clk=\clock, en=$abc$2146$abc$1862$abc$1711$auto$opt_dff.cc:219:make_patterns_logic$531, arst=\reset, srst={ }
  7 cells in clk=\clock, en=$abc$2156$abc$1872$abc$1725$auto$opt_dff.cc:219:make_patterns_logic$439, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$abc$2163$abc$1882$abc$1700$auto$opt_dff.cc:219:make_patterns_logic$472, arst=\reset, srst={ }
  4 cells in clk=\clock, en=$abc$2174$abc$1893$abc$1646$auto$opt_dff.cc:219:make_patterns_logic$505, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$2180$abc$1900$abc$1632$auto$opt_dff.cc:219:make_patterns_logic$514, arst=\reset, srst={ }
  1 cells in clk=\clock, en=$abc$2121$abc$1833$abc$1639$auto$opt_dff.cc:194:make_patterns_logic$517, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$abc$2190$abc$1910$abc$1621$auto$opt_dff.cc:219:make_patterns_logic$459, arst=\reset, srst={ }
  3 cells in clk=\clock, en=$abc$2201$abc$1921$abc$1719$auto$opt_dff.cc:219:make_patterns_logic$543, arst=\reset, srst={ }
  5 cells in clk=\clock, en=$abc$2207$abc$1927$abc$1689$auto$opt_dff.cc:219:make_patterns_logic$498, arst=\reset, srst={ }
  8 cells in clk=\clock, en=$abc$2214$abc$1934$abc$1652$auto$opt_dff.cc:219:make_patterns_logic$522, arst=\reset, srst={ }
  26 cells in clk=\clock, en=$abc$2226$abc$1946$abc$1581$auto$opt_dff.cc:219:make_patterns_logic$480, arst=\reset, srst={ }
  15 cells in clk=\clock, en=$abc$2255$abc$2012$abc$1646$auto$opt_dff.cc:219:make_patterns_logic$477, arst=\reset, srst={ }
  35 cells in clk=\clock, en=$abc$2317$lo09, arst=\reset, srst={ }
  79 cells in clk=\clock, en={ }, arst=\reset, srst={ }

3.118.2. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2121$abc$1833$abc$1639$auto$opt_dff.cc:219:make_patterns_logic$446, asynchronously reset by \reset
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 4 outputs.

3.118.2.1. Executing ABC.

3.118.3. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2128$abc$1842$abc$1741$auto$opt_dff.cc:219:make_patterns_logic$493, asynchronously reset by \reset
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 2 outputs.

3.118.3.1. Executing ABC.

3.118.4. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2136$abc$1853$abc$1733$auto$opt_dff.cc:219:make_patterns_logic$430, asynchronously reset by \reset
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 2 outputs.

3.118.4.1. Executing ABC.

3.118.5. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2146$abc$1862$abc$1711$auto$opt_dff.cc:219:make_patterns_logic$531, asynchronously reset by \reset
Extracted 8 gates and 16 wires to a netlist network with 8 inputs and 5 outputs.

3.118.5.1. Executing ABC.

3.118.6. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2156$abc$1872$abc$1725$auto$opt_dff.cc:219:make_patterns_logic$439, asynchronously reset by \reset
Extracted 7 gates and 13 wires to a netlist network with 6 inputs and 3 outputs.

3.118.6.1. Executing ABC.

3.118.7. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2163$abc$1882$abc$1700$auto$opt_dff.cc:219:make_patterns_logic$472, asynchronously reset by \reset
Extracted 9 gates and 17 wires to a netlist network with 8 inputs and 3 outputs.

3.118.7.1. Executing ABC.

3.118.8. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2174$abc$1893$abc$1646$auto$opt_dff.cc:219:make_patterns_logic$505, asynchronously reset by \reset
Extracted 4 gates and 8 wires to a netlist network with 4 inputs and 3 outputs.

3.118.8.1. Executing ABC.

3.118.9. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2180$abc$1900$abc$1632$auto$opt_dff.cc:219:make_patterns_logic$514, asynchronously reset by \reset
Extracted 5 gates and 10 wires to a netlist network with 5 inputs and 3 outputs.

3.118.9.1. Executing ABC.

3.118.10. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2406$abc$2121$abc$1833$abc$1639$auto$opt_dff.cc:194:make_patterns_logic$517, asynchronously reset by \reset
Extracted 1 gates and 2 wires to a netlist network with 1 inputs and 1 outputs.

3.118.10.1. Executing ABC.

3.118.11. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2190$abc$1910$abc$1621$auto$opt_dff.cc:219:make_patterns_logic$459, asynchronously reset by \reset
Extracted 9 gates and 18 wires to a netlist network with 9 inputs and 3 outputs.

3.118.11.1. Executing ABC.

3.118.12. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2201$abc$1921$abc$1719$auto$opt_dff.cc:219:make_patterns_logic$543, asynchronously reset by \reset
Extracted 3 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

3.118.12.1. Executing ABC.

3.118.13. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2207$abc$1927$abc$1689$auto$opt_dff.cc:219:make_patterns_logic$498, asynchronously reset by \reset
Extracted 5 gates and 8 wires to a netlist network with 3 inputs and 4 outputs.

3.118.13.1. Executing ABC.

3.118.14. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2214$abc$1934$abc$1652$auto$opt_dff.cc:219:make_patterns_logic$522, asynchronously reset by \reset
Extracted 8 gates and 10 wires to a netlist network with 2 inputs and 4 outputs.

3.118.14.1. Executing ABC.

3.118.15. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2226$abc$1946$abc$1581$auto$opt_dff.cc:219:make_patterns_logic$480, asynchronously reset by \reset
Extracted 26 gates and 33 wires to a netlist network with 7 inputs and 12 outputs.

3.118.15.1. Executing ABC.

3.118.16. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2255$abc$2012$abc$1646$auto$opt_dff.cc:219:make_patterns_logic$477, asynchronously reset by \reset
Extracted 15 gates and 29 wires to a netlist network with 14 inputs and 8 outputs.

3.118.16.1. Executing ABC.

3.118.17. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2317$lo09, asynchronously reset by \reset
Extracted 35 gates and 36 wires to a netlist network with 1 inputs and 2 outputs.

3.118.17.1. Executing ABC.

3.118.18. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, asynchronously reset by \reset
Extracted 79 gates and 101 wires to a netlist network with 22 inputs and 42 outputs.

3.118.18.1. Executing ABC.

yosys> opt_ffinv

3.119. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.120. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.121. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

yosys> opt_muxtree

3.122. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.123. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.124. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.125. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.126. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$2600$auto$blifparse.cc:362:parse_blif$2605 ($_DFF_PP0_) from module b13 (D = $abc$2600$lo03, Q = $abc$2600$lo04).

yosys> opt_clean

3.127. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 1 unused cells and 1427 unused wires.
<suppressed ~13 debug messages>

yosys> opt_expr

3.128. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_muxtree

3.129. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.130. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.131. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.132. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.133. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.134. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..

yosys> opt_expr

3.135. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 2

yosys> bmuxmap

3.136. Executing BMUXMAP pass.

yosys> demuxmap

3.137. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_XvksR0/abc_tmp_1.scr

3.138. Executing ABC pass (technology mapping using ABC).

3.138.1. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Extracted 177 gates and 218 wires to a netlist network with 41 inputs and 46 outputs.

3.138.1.1. Executing ABC.
DE:   #PIs =  41  #Luts =    53  Max Lvl =   3  Avg Lvl =   1.15  [   0.16 sec. at Pass 0]{firstMap}
DE:   #PIs =  41  #Luts =    52  Max Lvl =   4  Avg Lvl =   1.39  [   0.34 sec. at Pass 1]{initMapFlow}
DE:   #PIs =  41  #Luts =    52  Max Lvl =   4  Avg Lvl =   1.39  [   0.28 sec. at Pass 2]{map}
DE:   #PIs =  41  #Luts =    52  Max Lvl =   4  Avg Lvl =   1.39  [   0.52 sec. at Pass 3]{postMap}
DE:   #PIs =  41  #Luts =    52  Max Lvl =   4  Avg Lvl =   1.39  [   0.60 sec. at Pass 4]{map}
DE:   #PIs =  41  #Luts =    51  Max Lvl =   4  Avg Lvl =   1.39  [   1.36 sec. at Pass 5]{postMap}
DE:   #PIs =  41  #Luts =    51  Max Lvl =   4  Avg Lvl =   1.39  [   1.36 sec. at Pass 6]{map}
DE:   #PIs =  41  #Luts =    51  Max Lvl =   4  Avg Lvl =   1.39  [   1.63 sec. at Pass 7]{postMap}
DE:   #PIs =  41  #Luts =    51  Max Lvl =   4  Avg Lvl =   1.39  [   1.46 sec. at Pass 8]{map}
DE:   #PIs =  41  #Luts =    51  Max Lvl =   4  Avg Lvl =   1.39  [   2.86 sec. at Pass 9]{pushMap}
DE:   #PIs =  41  #Luts =    51  Max Lvl =   4  Avg Lvl =   1.39  [   1.75 sec. at Pass 10]{finalMap}

yosys> opt_expr

3.139. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.140. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.141. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.142. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.143. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.144. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.145. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.146. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 218 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.147. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.148. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 2 inverters.

yosys> stat

3.149. Printing statistics.

=== b13 ===

   Number of wires:                 99
   Number of wire bits:            115
   Number of public wires:          18
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 96
     $_DFFE_PP0N_                    1
     $_DFFE_PP0P_                   32
     $_DFFE_PP1P_                    2
     $_DFF_PP0_                     10
     $lut                           51


yosys> shregmap -minlen 8 -maxlen 20

3.150. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.151. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.152. Printing statistics.

=== b13 ===

   Number of wires:                 99
   Number of wire bits:            115
   Number of public wires:          18
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 96
     $_DFFE_PP0N_                    1
     $_DFFE_PP0P_                   32
     $_DFFE_PP1P_                    2
     $_DFF_PP0_                     10
     $lut                           51


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.153. Executing TECHMAP pass (map to technology primitives).

3.153.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.153.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.153.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0N_ for cells of type $_DFFE_PP0N_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFFE_PP1P_ for cells of type $_DFFE_PP1P_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~278 debug messages>

yosys> opt_expr -mux_undef

3.154. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~524 debug messages>

yosys> simplemap

3.155. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.156. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge

3.157. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
<suppressed ~255 debug messages>
Removed a total of 85 cells.

yosys> opt_dff -nodffe -nosdff

3.158. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.159. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 1 unused cells and 343 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.160. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
<suppressed ~9 debug messages>

yosys> opt_merge -nomux

3.161. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.162. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.163. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.164. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.165. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.166. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.167. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.168. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_XvksR0/abc_tmp_2.scr

3.169. Executing ABC pass (technology mapping using ABC).

3.169.1. Extracting gate netlist of module `\b13' to `<abc-temp-dir>/input.blif'..
Extracted 152 gates and 196 wires to a netlist network with 42 inputs and 46 outputs.

3.169.1.1. Executing ABC.
DE:   #PIs =  42  #Luts =    51  Max Lvl =   3  Avg Lvl =   1.15  [   0.18 sec. at Pass 0]{firstMap}
DE:   #PIs =  42  #Luts =    51  Max Lvl =   3  Avg Lvl =   1.15  [   0.60 sec. at Pass 1]{initMapFlow}
DE:   #PIs =  42  #Luts =    51  Max Lvl =   3  Avg Lvl =   1.15  [   0.19 sec. at Pass 2]{map}
DE:   #PIs =  42  #Luts =    51  Max Lvl =   3  Avg Lvl =   1.15  [   0.27 sec. at Pass 3]{postMap}
DE:   #PIs =  42  #Luts =    51  Max Lvl =   3  Avg Lvl =   1.15  [   0.66 sec. at Pass 4]{map}
DE:   #PIs =  42  #Luts =    51  Max Lvl =   3  Avg Lvl =   1.15  [   1.35 sec. at Pass 5]{postMap}
DE:   #PIs =  42  #Luts =    51  Max Lvl =   3  Avg Lvl =   1.15  [   2.58 sec. at Pass 6]{pushMap}
DE:   #PIs =  42  #Luts =    51  Max Lvl =   3  Avg Lvl =   1.15  [   1.39 sec. at Pass 7]{finalMap}

yosys> opt_expr

3.170. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.

yosys> opt_merge -nomux

3.171. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.172. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.173. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b13.
Performed a total of 0 changes.

yosys> opt_merge

3.174. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b13'.
Removed a total of 0 cells.

yosys> opt_share

3.175. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.176. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.177. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 170 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.178. Executing OPT_EXPR pass (perform const folding).
Optimizing module b13.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.179. Executing HIERARCHY pass (managing design hierarchy).

3.179.1. Analyzing design hierarchy..
Top module:  \b13

3.179.2. Analyzing design hierarchy..
Top module:  \b13
Removed 0 unused modules.

yosys> stat

3.180. Printing statistics.

=== b13 ===

   Number of wires:                 99
   Number of wire bits:            115
   Number of public wires:          18
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 96
     $lut                           51
     dffsre                         45


yosys> opt_clean -purge

3.181. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b13..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.182. Executing Verilog backend.
Dumping module `\b13'.

End of script. Logfile hash: 3da089ba80, CPU: user 1.00s system 0.11s, MEM: 38.41 MB peak
Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)
Time spent: 98% 6x abc (51 sec), 0% 33x opt_expr (0 sec), ...
real 38.01
user 45.29
sys 7.38
