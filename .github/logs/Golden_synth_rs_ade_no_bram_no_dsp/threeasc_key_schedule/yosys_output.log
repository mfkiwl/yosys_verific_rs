
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.92
 Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl dual_mem.vhd tb_key_schedule.vhd key_schedule.vhd

yosys> verific -vhdl dual_mem.vhd tb_key_schedule.vhd key_schedule.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'dual_mem.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_1164' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_1164.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.textio' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/textio.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_unsigned' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_unsigned.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_arith' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_arith.vdb'
VERIFIC-INFO [VHDL-1012] dual_mem.vhd:20: analyzing entity 'dual_mem'
VERIFIC-INFO [VHDL-1010] dual_mem.vhd:33: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'tb_key_schedule.vhd'
VERIFIC-INFO [VHDL-1012] tb_key_schedule.vhd:20: analyzing entity 'tb_key_schedule'
VERIFIC-INFO [VHDL-1010] tb_key_schedule.vhd:23: analyzing architecture 'behavior'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'key_schedule.vhd'
VERIFIC-INFO [VHDL-1012] key_schedule.vhd:22: analyzing entity 'key_schedule'
VERIFIC-INFO [VHDL-1010] key_schedule.vhd:35: analyzing architecture 'behavioral'

yosys> synth_rs -top key_schedule -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.79

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top key_schedule

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] key_schedule.vhd:22: processing 'key_schedule(Behavioral)'
VERIFIC-INFO [VHDL-1067] dual_mem.vhd:20: processing 'dual_mem(rtl)'
VERIFIC-INFO [VHDL-1754] dual_mem.vhd:35: extracting RAM for identifier 'RAM'
Importing module key_schedule.
Importing module dual_mem(rtl).

3.4.1. Analyzing design hierarchy..
Top module:  \key_schedule
Used module:     \dual_mem(rtl)

3.4.2. Analyzing design hierarchy..
Top module:  \key_schedule
Used module:     \dual_mem(rtl)
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module dual_mem(rtl).
Optimizing module key_schedule.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.6. Executing BMUXMAP pass.

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).
Deleting now unused module dual_mem(rtl).
<suppressed ~2 debug messages>

yosys> bmuxmap

3.9. Executing BMUXMAP pass.

yosys> demuxmap

3.10. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.11. Executing TRIBUF pass.

yosys> deminout

3.12. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~56 debug messages>

yosys> opt_clean

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 65 unused wires.
<suppressed ~30 debug messages>

yosys> check

3.15. Executing CHECK pass (checking for obvious problems).
Checking module key_schedule...
Found and reported 0 problems.

yosys> opt_expr

3.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.18. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

yosys> opt_reduce

3.19. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.20. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~51 debug messages>
Removed a total of 17 cells.

yosys> opt_share

3.21. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.22. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$gen_sub_keys.w_3_i_tmp_old_reg$key_schedule.vhd:130$187 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.w_2_i_tmp_old_reg$key_schedule.vhd:130$186 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.w_1_i_tmp_old_reg$key_schedule.vhd:130$185 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.w_0_i_tmp_old_reg$key_schedule.vhd:130$184 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_3_reg$key_schedule.vhd:130$191 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_2_reg$key_schedule.vhd:130$190 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_1_reg$key_schedule.vhd:130$189 ($aldff) from module key_schedule.
Removing never-active async load on $verific$gen_sub_keys.tmp_0_reg$key_schedule.vhd:130$188 ($aldff) from module key_schedule.
Removing never-active async load on $verific$count_5_reg$key_schedule.vhd:62$104 ($aldff) from module key_schedule.
Removing never-active async load on $verific$count_10_reg$key_schedule.vhd:77$111 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_2.$verific$read_dpra_reg$dual_mem.vhd:51$230 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_2.$verific$read_a_reg$dual_mem.vhd:51$229 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_1.$verific$read_dpra_reg$dual_mem.vhd:51$230 ($aldff) from module key_schedule.
Removing never-active async load on $flatten\S_BOX_DUAL_1.$verific$read_a_reg$dual_mem.vhd:51$229 ($aldff) from module key_schedule.

yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_muxtree

3.25. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

yosys> opt_reduce

3.26. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.28. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.29. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.31. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 2

yosys> fsm -encoding binary

3.32. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.32.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.32.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.32.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> fsm_opt

3.32.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.32.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.32.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.32.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.34. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

yosys> opt_reduce

3.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.38. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.39. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$gen_sub_keys.w_3_i_tmp_old_reg$key_schedule.vhd:130$187 ($dff) from module key_schedule (D = $verific$n1773$81, Q = \gen_sub_keys.w_3_i_tmp_old).
Adding EN signal on $verific$gen_sub_keys.w_2_i_tmp_old_reg$key_schedule.vhd:130$186 ($dff) from module key_schedule (D = $verific$n1674$78, Q = \gen_sub_keys.w_2_i_tmp_old).
Adding EN signal on $verific$gen_sub_keys.w_1_i_tmp_old_reg$key_schedule.vhd:130$185 ($dff) from module key_schedule (D = $verific$n1575$75, Q = \gen_sub_keys.w_1_i_tmp_old).
Adding EN signal on $verific$gen_sub_keys.w_0_i_tmp_old_reg$key_schedule.vhd:130$184 ($dff) from module key_schedule (D = $verific$n1476$72, Q = \gen_sub_keys.w_0_i_tmp_old).
Adding EN signal on $verific$gen_sub_keys.tmp_3_reg$key_schedule.vhd:130$191 ($dff) from module key_schedule (D = $verific$n2169$93, Q = \gen_sub_keys.tmp_3).
Adding EN signal on $verific$gen_sub_keys.tmp_2_reg$key_schedule.vhd:130$190 ($dff) from module key_schedule (D = $verific$n2070$90, Q = \gen_sub_keys.tmp_2).
Adding EN signal on $verific$gen_sub_keys.tmp_1_reg$key_schedule.vhd:130$189 ($dff) from module key_schedule (D = $verific$n1971$87, Q = \gen_sub_keys.tmp_1).
Adding EN signal on $verific$gen_sub_keys.tmp_0_reg$key_schedule.vhd:130$188 ($dff) from module key_schedule (D = $verific$n1872$84, Q = \gen_sub_keys.tmp_0).
Adding EN signal on $verific$count_5_reg$key_schedule.vhd:62$104 ($dff) from module key_schedule (D = $verific$n90$25, Q = \count_5).
Adding EN signal on $verific$count_10_reg$key_schedule.vhd:77$111 ($dff) from module key_schedule (D = $verific$n190$32, Q = \count_10).

yosys> opt_clean

3.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~10 debug messages>

yosys> opt_muxtree

3.42. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

yosys> opt_reduce

3.43. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.44. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~111 debug messages>
Removed a total of 37 cells.

yosys> opt_share

3.45. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.46. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 37 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_muxtree

3.49. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

yosys> opt_reduce

3.50. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.52. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.53. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.55. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 3

yosys> wreduce -keepdc

3.56. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from port B of cell key_schedule.$verific$add_7$key_schedule.vhd:59$100 ($add).
Removed top 3 bits (of 4) from port B of cell key_schedule.$verific$add_19$key_schedule.vhd:74$107 ($add).
Removed top 2 bits (of 3) from port A of cell key_schedule.$verific$equal_30$key_schedule.vhd:116$116 ($eq).
Removed top 4 bits (of 7) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$366 ($ne).
Removed top 1 bits (of 3) from port A of cell key_schedule.$verific$equal_43$key_schedule.vhd:119$129 ($eq).
Removed top 1 bits (of 3) from port A of cell key_schedule.$verific$equal_47$key_schedule.vhd:122$133 ($eq).
Removed top 2 bits (of 5) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$390 ($ne).
Removed top 3 bits (of 6) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$379 ($ne).
Removed top 1 bits (of 4) from port B of cell key_schedule.$auto$opt_dff.cc:195:make_patterns_logic$399 ($ne).
Removed top 3 bits (of 4) from wire key_schedule.$auto$bmuxmap.cc:58:execute$237.
Removed top 1 bits (of 2) from wire key_schedule.$auto$bmuxmap.cc:58:execute$242.
Removed top 7 bits (of 8) from wire key_schedule.$auto$bmuxmap.cc:58:execute$247.
Removed top 1 bits (of 4) from wire key_schedule.$auto$bmuxmap.cc:58:execute$256.
Removed top 1 bits (of 4) from wire key_schedule.$auto$bmuxmap.cc:58:execute$275.
Removed top 1 bits (of 4) from wire key_schedule.$auto$bmuxmap.cc:58:execute$294.

yosys> peepopt

3.57. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.59. Executing BMUXMAP pass.

yosys> demuxmap

3.60. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.61. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module key_schedule:
  creating $macc model for $verific$add_19$key_schedule.vhd:74$107 ($add).
  creating $macc model for $verific$add_7$key_schedule.vhd:59$100 ($add).
  creating $alu model for $macc $verific$add_7$key_schedule.vhd:59$100.
  creating $alu model for $macc $verific$add_19$key_schedule.vhd:74$107.
  creating $alu cell for $verific$add_19$key_schedule.vhd:74$107: $auto$alumacc.cc:485:replace_alu$462
  creating $alu cell for $verific$add_7$key_schedule.vhd:59$100: $auto$alumacc.cc:485:replace_alu$465
  created 2 $alu and 0 $macc cells.

yosys> opt_expr

3.62. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.63. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.64. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

yosys> opt_reduce

3.65. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.66. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.67. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.68. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.69. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.70. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> stat

3.71. Printing statistics.

=== key_schedule ===

   Number of wires:                131
   Number of wire bits:           1897
   Number of public wires:          40
   Number of public wire bits:     704
   Number of memories:               2
   Number of memory bits:         4096
   Number of processes:              0
   Number of cells:                114
     $alu                            2
     $and                            2
     $dff                            4
     $dffe                          10
     $eq                             5
     $memrd_v2                       4
     $memwr_v2                       2
     $mux                           61
     $ne                             8
     $reduce_and                     8
     $reduce_bool                    3
     $xor                            5


yosys> memory -nomap

3.72. Executing MEMORY pass.

yosys> opt_mem

3.72.1. Executing OPT_MEM pass (optimize memories).
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 0
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 1
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 2
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 3
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 4
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 5
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 6
key_schedule.S_BOX_DUAL_1.RAM: removing const-0 lane 7
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 0
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 1
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 2
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 3
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 4
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 5
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 6
key_schedule.S_BOX_DUAL_2.RAM: removing const-0 lane 7
Performed a total of 2 transformations.

yosys> opt_mem_priority

3.72.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.72.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.72.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.72.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.72.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 4 unused cells and 4 unused wires.
<suppressed ~8 debug messages>

yosys> memory_share

3.72.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.72.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.72.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> memory_collect

3.72.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.73. Printing statistics.

=== key_schedule ===

   Number of wires:                127
   Number of wire bits:           1865
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                104
     $alu                            2
     $and                            2
     $dffe                          10
     $eq                             5
     $mux                           61
     $ne                             8
     $reduce_and                     8
     $reduce_bool                    3
     $xor                            5


yosys> muxpack

3.74. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converting key_schedule.$verific$mux_57$key_schedule.vhd:128$142 ... key_schedule.$verific$mux_58$key_schedule.vhd:128$143 to a pmux with 2 cases.
Converting key_schedule.$verific$mux_61$key_schedule.vhd:128$146 ... key_schedule.$verific$mux_63$key_schedule.vhd:128$148 to a pmux with 3 cases.
Converting key_schedule.$verific$mux_67$key_schedule.vhd:128$152 ... key_schedule.$verific$mux_70$key_schedule.vhd:128$155 to a pmux with 4 cases.
Converted 9 (p)mux cells into 3 pmux cells.
<suppressed ~48 debug messages>

yosys> opt_clean

3.75. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

yosys> pmuxtree

3.76. Executing PMUXTREE pass.

yosys> muxpack

3.77. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~44 debug messages>

yosys> memory_map

3.78. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.79. Printing statistics.

=== key_schedule ===

   Number of wires:                128
   Number of wire bits:           1866
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                102
     $alu                            2
     $and                            2
     $dffe                          10
     $eq                             5
     $mux                           58
     $ne                             8
     $or                             1
     $reduce_and                     8
     $reduce_bool                    3
     $xor                            5


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.80. Executing TECHMAP pass (map to technology primitives).

3.80.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.80.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.80.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $and.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
No more expansions possible.
<suppressed ~632 debug messages>

yosys> stat

3.81. Printing statistics.

=== key_schedule ===

   Number of wires:                258
   Number of wire bits:           4318
   Number of public wires:          36
   Number of public wire bits:     672
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1496
     $_AND_                         42
     $_DFFE_PP_                    263
     $_MUX_                        917
     $_NOT_                         12
     $_OR_                          55
     $_XOR_                        207


yosys> opt_expr

3.82. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~390 debug messages>

yosys> opt_merge -nomux

3.83. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~105 debug messages>
Removed a total of 35 cells.

yosys> opt_muxtree

3.84. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.85. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.86. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.87. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.88. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.89. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 6 unused cells and 130 unused wires.
<suppressed ~7 debug messages>

yosys> opt_expr

3.90. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_muxtree

3.91. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.92. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.93. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.94. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.95. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.96. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.97. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 2

yosys> opt_expr -full

3.98. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~442 debug messages>

yosys> techmap -map +/techmap.v

3.99. Executing TECHMAP pass (map to technology primitives).

3.99.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.99.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.100. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.101. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_muxtree

3.102. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.103. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.104. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.105. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.106. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 1 unused cells and 18 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.107. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_muxtree

3.108. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.109. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.110. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.111. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.112. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..

yosys> opt_expr

3.113. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 2

yosys> abc -dff

3.114. Executing ABC pass (technology mapping using ABC).

3.114.1. Summary of detected clock domains:
  132 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$373, arst={ }, srst={ }
  40 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$454, arst={ }, srst={ }
  67 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$428, arst={ }, srst={ }
  68 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$439, arst={ }, srst={ }
  68 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$448, arst={ }, srst={ }
  24 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$451, arst={ }, srst={ }
  133 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$384, arst={ }, srst={ }
  133 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$393, arst={ }, srst={ }
  110 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$400, arst={ }, srst={ }
  77 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$415, arst={ }, srst={ }

3.114.2. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$373
Extracted 132 gates and 204 wires to a netlist network with 71 inputs and 33 outputs.

3.114.2.1. Executing ABC.

3.114.3. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$454
Extracted 40 gates and 45 wires to a netlist network with 3 inputs and 10 outputs.

3.114.3.1. Executing ABC.

3.114.4. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$428
Extracted 67 gates and 105 wires to a netlist network with 37 inputs and 33 outputs.

3.114.4.1. Executing ABC.

3.114.5. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$439
Extracted 68 gates and 106 wires to a netlist network with 37 inputs and 35 outputs.

3.114.5.1. Executing ABC.

3.114.6. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$448
Extracted 68 gates and 105 wires to a netlist network with 36 inputs and 34 outputs.

3.114.6.1. Executing ABC.

3.114.7. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$451
Extracted 24 gates and 27 wires to a netlist network with 2 inputs and 5 outputs.

3.114.7.1. Executing ABC.

3.114.8. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$384
Extracted 133 gates and 205 wires to a netlist network with 71 inputs and 67 outputs.

3.114.8.1. Executing ABC.

3.114.9. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$393
Extracted 133 gates and 204 wires to a netlist network with 70 inputs and 67 outputs.

3.114.9.1. Executing ABC.

3.114.10. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$400
Extracted 110 gates and 156 wires to a netlist network with 45 inputs and 45 outputs.

3.114.10.1. Executing ABC.

3.114.11. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$415
Extracted 77 gates and 123 wires to a netlist network with 45 inputs and 38 outputs.

3.114.11.1. Executing ABC.

yosys> abc -dff

3.115. Executing ABC pass (technology mapping using ABC).

3.115.1. Summary of detected clock domains:
  186 cells in clk=\clk, en=$abc$2877$auto$opt_dff.cc:219:make_patterns_logic$384, arst={ }, srst={ }
  13 cells in clk=\clk, en=$abc$2863$auto$opt_dff.cc:194:make_patterns_logic$451, arst={ }, srst={ }
  229 cells in clk=\clk, en=$abc$3107$auto$opt_dff.cc:219:make_patterns_logic$393, arst={ }, srst={ }
  67 cells in clk=\clk, en=$abc$2763$auto$opt_dff.cc:219:make_patterns_logic$448, arst={ }, srst={ }
  128 cells in clk=\clk, en=$abc$3337$auto$opt_dff.cc:219:make_patterns_logic$400, arst={ }, srst={ }
  188 cells in clk=\clk, en=$abc$2328$auto$opt_dff.cc:219:make_patterns_logic$373, arst={ }, srst={ }
  32 cells in clk=\clk, en=$abc$2525$auto$opt_dff.cc:194:make_patterns_logic$454, arst={ }, srst={ }
  68 cells in clk=\clk, en=$abc$2562$auto$opt_dff.cc:219:make_patterns_logic$428, arst={ }, srst={ }
  67 cells in clk=\clk, en=$abc$2662$auto$opt_dff.cc:219:make_patterns_logic$439, arst={ }, srst={ }
  67 cells in clk=\clk, en=$abc$3497$auto$opt_dff.cc:219:make_patterns_logic$415, arst={ }, srst={ }

3.115.2. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2877$auto$opt_dff.cc:219:make_patterns_logic$384
Extracted 186 gates and 277 wires to a netlist network with 91 inputs and 55 outputs.

3.115.2.1. Executing ABC.

3.115.3. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2863$auto$opt_dff.cc:194:make_patterns_logic$451
Extracted 13 gates and 15 wires to a netlist network with 2 inputs and 5 outputs.

3.115.3.1. Executing ABC.

3.115.4. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3107$auto$opt_dff.cc:219:make_patterns_logic$393
Extracted 229 gates and 330 wires to a netlist network with 101 inputs and 68 outputs.

3.115.4.1. Executing ABC.

3.115.5. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2763$auto$opt_dff.cc:219:make_patterns_logic$448
Extracted 67 gates and 103 wires to a netlist network with 36 inputs and 34 outputs.

3.115.5.1. Executing ABC.

3.115.6. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3337$auto$opt_dff.cc:219:make_patterns_logic$400
Extracted 128 gates and 175 wires to a netlist network with 47 inputs and 43 outputs.

3.115.6.1. Executing ABC.

3.115.7. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2328$auto$opt_dff.cc:219:make_patterns_logic$373
Extracted 188 gates and 265 wires to a netlist network with 77 inputs and 36 outputs.

3.115.7.1. Executing ABC.

3.115.8. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2525$auto$opt_dff.cc:194:make_patterns_logic$454
Extracted 32 gates and 35 wires to a netlist network with 3 inputs and 11 outputs.

3.115.8.1. Executing ABC.

3.115.9. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2562$auto$opt_dff.cc:219:make_patterns_logic$428
Extracted 68 gates and 106 wires to a netlist network with 38 inputs and 34 outputs.

3.115.9.1. Executing ABC.

3.115.10. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$2662$auto$opt_dff.cc:219:make_patterns_logic$439
Extracted 67 gates and 104 wires to a netlist network with 37 inputs and 34 outputs.

3.115.10.1. Executing ABC.

3.115.11. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3497$auto$opt_dff.cc:219:make_patterns_logic$415
Extracted 67 gates and 104 wires to a netlist network with 37 inputs and 33 outputs.

3.115.11.1. Executing ABC.

yosys> abc -dff

3.116. Executing ABC pass (technology mapping using ABC).

3.116.1. Summary of detected clock domains:
  67 cells in clk=\clk, en=$abc$4572$abc$2662$auto$opt_dff.cc:219:make_patterns_logic$439, arst={ }, srst={ }
  166 cells in clk=\clk, en=$abc$3607$abc$2877$auto$opt_dff.cc:219:make_patterns_logic$384, arst={ }, srst={ }
  13 cells in clk=\clk, en=$abc$3764$abc$2863$auto$opt_dff.cc:194:make_patterns_logic$451, arst={ }, srst={ }
  179 cells in clk=\clk, en=$abc$3778$abc$3107$auto$opt_dff.cc:219:make_patterns_logic$393, arst={ }, srst={ }
  45 cells in clk=\clk, en=$abc$4009$abc$2763$auto$opt_dff.cc:219:make_patterns_logic$448, arst={ }, srst={ }
  168 cells in clk=\clk, en=$abc$4109$abc$3337$auto$opt_dff.cc:219:make_patterns_logic$400, arst={ }, srst={ }
  139 cells in clk=\clk, en=$abc$4270$abc$2328$auto$opt_dff.cc:219:make_patterns_logic$373, arst={ }, srst={ }
  32 cells in clk=\clk, en=$abc$4438$abc$2525$auto$opt_dff.cc:194:make_patterns_logic$454, arst={ }, srst={ }
  68 cells in clk=\clk, en=$abc$4471$abc$2562$auto$opt_dff.cc:219:make_patterns_logic$428, arst={ }, srst={ }
  67 cells in clk=\clk, en=$abc$4672$abc$3497$auto$opt_dff.cc:219:make_patterns_logic$415, arst={ }, srst={ }

3.116.2. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4572$abc$2662$auto$opt_dff.cc:219:make_patterns_logic$439
Extracted 67 gates and 104 wires to a netlist network with 37 inputs and 34 outputs.

3.116.2.1. Executing ABC.

3.116.3. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3607$abc$2877$auto$opt_dff.cc:219:make_patterns_logic$384
Extracted 166 gates and 268 wires to a netlist network with 102 inputs and 67 outputs.

3.116.3.1. Executing ABC.

3.116.4. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3764$abc$2863$auto$opt_dff.cc:194:make_patterns_logic$451
Extracted 13 gates and 15 wires to a netlist network with 2 inputs and 5 outputs.

3.116.4.1. Executing ABC.

3.116.5. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$3778$abc$3107$auto$opt_dff.cc:219:make_patterns_logic$393
Extracted 179 gates and 249 wires to a netlist network with 70 inputs and 49 outputs.

3.116.5.1. Executing ABC.

3.116.6. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4009$abc$2763$auto$opt_dff.cc:219:make_patterns_logic$448
Extracted 45 gates and 83 wires to a netlist network with 38 inputs and 35 outputs.

3.116.6.1. Executing ABC.

3.116.7. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4109$abc$3337$auto$opt_dff.cc:219:make_patterns_logic$400
Extracted 168 gates and 233 wires to a netlist network with 65 inputs and 66 outputs.

3.116.7.1. Executing ABC.

3.116.8. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4270$abc$2328$auto$opt_dff.cc:219:make_patterns_logic$373
Extracted 139 gates and 215 wires to a netlist network with 76 inputs and 36 outputs.

3.116.8.1. Executing ABC.

3.116.9. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4438$abc$2525$auto$opt_dff.cc:194:make_patterns_logic$454
Extracted 32 gates and 35 wires to a netlist network with 3 inputs and 11 outputs.

3.116.9.1. Executing ABC.

3.116.10. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4471$abc$2562$auto$opt_dff.cc:219:make_patterns_logic$428
Extracted 68 gates and 106 wires to a netlist network with 38 inputs and 34 outputs.

3.116.10.1. Executing ABC.

3.116.11. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4672$abc$3497$auto$opt_dff.cc:219:make_patterns_logic$415
Extracted 67 gates and 104 wires to a netlist network with 37 inputs and 33 outputs.

3.116.11.1. Executing ABC.

yosys> abc -dff

3.117. Executing ABC pass (technology mapping using ABC).

3.117.1. Summary of detected clock domains:
  68 cells in clk=\clk, en=$abc$5757$abc$4471$abc$2562$auto$opt_dff.cc:219:make_patterns_logic$428, arst={ }, srst={ }
  67 cells in clk=\clk, en=$abc$4772$abc$4572$abc$2662$auto$opt_dff.cc:219:make_patterns_logic$439, arst={ }, srst={ }
  229 cells in clk=\clk, en=$abc$4872$abc$3607$abc$2877$auto$opt_dff.cc:219:make_patterns_logic$384, arst={ }, srst={ }
  13 cells in clk=\clk, en=$abc$5102$abc$3764$abc$2863$auto$opt_dff.cc:194:make_patterns_logic$451, arst={ }, srst={ }
  157 cells in clk=\clk, en=$abc$5116$abc$3778$abc$3107$auto$opt_dff.cc:219:make_patterns_logic$393, arst={ }, srst={ }
  67 cells in clk=\clk, en=$abc$5293$abc$4009$abc$2763$auto$opt_dff.cc:219:make_patterns_logic$448, arst={ }, srst={ }
  133 cells in clk=\clk, en=$abc$5395$abc$4109$abc$3337$auto$opt_dff.cc:219:make_patterns_logic$400, arst={ }, srst={ }
  113 cells in clk=\clk, en=$abc$5578$abc$4270$abc$2328$auto$opt_dff.cc:219:make_patterns_logic$373, arst={ }, srst={ }
  32 cells in clk=\clk, en=$abc$5724$abc$4438$abc$2525$auto$opt_dff.cc:194:make_patterns_logic$454, arst={ }, srst={ }
  67 cells in clk=\clk, en=$abc$5858$abc$4672$abc$3497$auto$opt_dff.cc:219:make_patterns_logic$415, arst={ }, srst={ }

3.117.2. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5757$abc$4471$abc$2562$auto$opt_dff.cc:219:make_patterns_logic$428
Extracted 68 gates and 106 wires to a netlist network with 38 inputs and 34 outputs.

3.117.2.1. Executing ABC.

3.117.3. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4772$abc$4572$abc$2662$auto$opt_dff.cc:219:make_patterns_logic$439
Extracted 67 gates and 104 wires to a netlist network with 37 inputs and 34 outputs.

3.117.3.1. Executing ABC.

3.117.4. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$4872$abc$3607$abc$2877$auto$opt_dff.cc:219:make_patterns_logic$384
Extracted 229 gates and 333 wires to a netlist network with 104 inputs and 67 outputs.

3.117.4.1. Executing ABC.

3.117.5. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5102$abc$3764$abc$2863$auto$opt_dff.cc:194:make_patterns_logic$451
Extracted 13 gates and 15 wires to a netlist network with 2 inputs and 5 outputs.

3.117.5.1. Executing ABC.

3.117.6. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5116$abc$3778$abc$3107$auto$opt_dff.cc:219:make_patterns_logic$393
Extracted 157 gates and 228 wires to a netlist network with 71 inputs and 62 outputs.

3.117.6.1. Executing ABC.

3.117.7. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5293$abc$4009$abc$2763$auto$opt_dff.cc:219:make_patterns_logic$448
Extracted 67 gates and 103 wires to a netlist network with 36 inputs and 34 outputs.

3.117.7.1. Executing ABC.

3.117.8. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5395$abc$4109$abc$3337$auto$opt_dff.cc:219:make_patterns_logic$400
Extracted 133 gates and 183 wires to a netlist network with 50 inputs and 48 outputs.

3.117.8.1. Executing ABC.

3.117.9. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5578$abc$4270$abc$2328$auto$opt_dff.cc:219:make_patterns_logic$373
Extracted 113 gates and 189 wires to a netlist network with 76 inputs and 36 outputs.

3.117.9.1. Executing ABC.

3.117.10. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5724$abc$4438$abc$2525$auto$opt_dff.cc:194:make_patterns_logic$454
Extracted 32 gates and 35 wires to a netlist network with 3 inputs and 11 outputs.

3.117.10.1. Executing ABC.

3.117.11. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$5858$abc$4672$abc$3497$auto$opt_dff.cc:219:make_patterns_logic$415
Extracted 67 gates and 104 wires to a netlist network with 37 inputs and 33 outputs.

3.117.11.1. Executing ABC.

yosys> opt_ffinv

3.118. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.119. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.120. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_muxtree

3.121. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.122. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.123. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.124. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.125. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.126. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 5881 unused wires.
<suppressed ~9 debug messages>

yosys> opt_expr

3.127. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> bmuxmap

3.128. Executing BMUXMAP pass.

yosys> demuxmap

3.129. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_n2fY6K/abc_tmp_1.scr

3.130. Executing ABC pass (technology mapping using ABC).

3.130.1. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Extracted 694 gates and 960 wires to a netlist network with 266 inputs and 274 outputs.

3.130.1.1. Executing ABC.
DE:   #PIs = 266  #Luts =   282  Max Lvl =   2  Avg Lvl =   1.03  [   0.14 sec. at Pass 0]{firstMap}
DE:   #PIs = 266  #Luts =   282  Max Lvl =   2  Avg Lvl =   1.03  [   1.52 sec. at Pass 1]{initMapFlow}
DE:   #PIs = 266  #Luts =   282  Max Lvl =   2  Avg Lvl =   1.03  [   0.40 sec. at Pass 2]{map}
DE:   #PIs = 266  #Luts =   277  Max Lvl =   2  Avg Lvl =   1.38  [   0.59 sec. at Pass 3]{postMap}
DE:   #PIs = 266  #Luts =   276  Max Lvl =   2  Avg Lvl =   1.39  [   0.47 sec. at Pass 4]{map}
DE:   #PIs = 266  #Luts =   274  Max Lvl =   2  Avg Lvl =   1.39  [   0.88 sec. at Pass 5]{postMap}
DE:   #PIs = 266  #Luts =   274  Max Lvl =   2  Avg Lvl =   1.39  [   0.59 sec. at Pass 6]{map}
DE:   #PIs = 266  #Luts =   274  Max Lvl =   2  Avg Lvl =   1.39  [   0.66 sec. at Pass 7]{postMap}
DE:   #PIs = 266  #Luts =   274  Max Lvl =   2  Avg Lvl =   1.39  [   0.63 sec. at Pass 8]{map}
DE:   #PIs = 266  #Luts =   274  Max Lvl =   2  Avg Lvl =   1.39  [   0.60 sec. at Pass 9]{pushMap}
DE:   #PIs = 266  #Luts =   274  Max Lvl =   2  Avg Lvl =   1.39  [   0.46 sec. at Pass 10]{finalMap}

yosys> opt_expr

3.131. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.132. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.133. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.134. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.135. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.136. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.137. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.138. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 961 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.139. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.140. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.141. Printing statistics.

=== key_schedule ===

   Number of wires:                420
   Number of wire bits:            930
   Number of public wires:          27
   Number of public wire bits:     537
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                537
     $_DFFE_PP_                    263
     $lut                          274


yosys> shregmap -minlen 8 -maxlen 20

3.142. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.143. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.144. Printing statistics.

=== key_schedule ===

   Number of wires:                420
   Number of wire bits:            930
   Number of public wires:          27
   Number of public wire bits:     537
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                537
     $_DFFE_PP0P_                  263
     $lut                          274


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.145. Executing TECHMAP pass (map to technology primitives).

3.145.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.145.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.145.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~936 debug messages>

yosys> opt_expr -mux_undef

3.146. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~2257 debug messages>

yosys> simplemap

3.147. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.148. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge

3.149. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~1746 debug messages>
Removed a total of 582 cells.

yosys> opt_dff -nodffe -nosdff

3.150. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.151. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 2159 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.152. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
<suppressed ~103 debug messages>

yosys> opt_merge -nomux

3.153. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.154. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.155. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.156. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.157. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.158. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.159. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 102 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.160. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_n2fY6K/abc_tmp_2.scr

3.161. Executing ABC pass (technology mapping using ABC).

3.161.1. Extracting gate netlist of module `\key_schedule' to `<abc-temp-dir>/input.blif'..
Extracted 694 gates and 962 wires to a netlist network with 266 inputs and 274 outputs.

3.161.1.1. Executing ABC.
DE:   #PIs = 266  #Luts =   274  Max Lvl =   2  Avg Lvl =   1.03  [   0.03 sec. at Pass 0]{firstMap}
DE:   #PIs = 266  #Luts =   274  Max Lvl =   2  Avg Lvl =   1.03  [   0.32 sec. at Pass 1]{initMapFlow}
DE:   #PIs = 266  #Luts =   274  Max Lvl =   2  Avg Lvl =   1.03  [   0.14 sec. at Pass 2]{map}
DE:   #PIs = 266  #Luts =   274  Max Lvl =   2  Avg Lvl =   1.03  [   0.14 sec. at Pass 3]{postMap}
DE:   #PIs = 266  #Luts =   274  Max Lvl =   2  Avg Lvl =   1.03  [   0.17 sec. at Pass 4]{map}
DE:   #PIs = 266  #Luts =   274  Max Lvl =   2  Avg Lvl =   1.03  [   0.34 sec. at Pass 5]{postMap}
DE:   #PIs = 266  #Luts =   274  Max Lvl =   2  Avg Lvl =   1.03  [   0.20 sec. at Pass 6]{pushMap}
DE:   #PIs = 266  #Luts =   274  Max Lvl =   2  Avg Lvl =   1.03  [   0.09 sec. at Pass 7]{finalMap}

yosys> opt_expr

3.162. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.

yosys> opt_merge -nomux

3.163. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.164. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_schedule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.165. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_schedule.
Performed a total of 0 changes.

yosys> opt_merge

3.166. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_schedule'.
Removed a total of 0 cells.

yosys> opt_share

3.167. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.168. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.169. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 818 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.170. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_schedule.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.171. Executing HIERARCHY pass (managing design hierarchy).

3.171.1. Analyzing design hierarchy..
Top module:  \key_schedule

3.171.2. Analyzing design hierarchy..
Top module:  \key_schedule
Removed 0 unused modules.

yosys> stat

3.172. Printing statistics.

=== key_schedule ===

   Number of wires:                420
   Number of wire bits:            930
   Number of public wires:          27
   Number of public wire bits:     537
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                537
     $lut                          274
     dffsre                        263


yosys> opt_clean -purge

3.173. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_schedule..
Removed 0 unused cells and 18 unused wires.
<suppressed ~18 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.174. Executing Verilog backend.
Dumping module `\key_schedule'.

End of script. Logfile hash: 928dac820d, CPU: user 2.70s system 0.05s, MEM: 47.56 MB peak
Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)
Time spent: 88% 6x abc (19 sec), 3% 32x opt_expr (0 sec), ...
real 27.74
user 17.05
sys 4.51
