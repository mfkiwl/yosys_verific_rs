
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.92
 Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl modmult32.vhd modmult.vhd rsacypher.vhd

yosys> verific -vhdl modmult32.vhd modmult.vhd rsacypher.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'modmult32.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_1164' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_1164.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.textio' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/textio.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_arith' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_arith.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_unsigned' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_unsigned.vdb'
VERIFIC-INFO [VHDL-1012] modmult32.vhd:11: analyzing entity 'modmult32'
VERIFIC-INFO [VHDL-1010] modmult32.vhd:23: analyzing architecture 'modmult'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'modmult.vhd'
VERIFIC-INFO [VHDL-1012] modmult.vhd:11: analyzing entity 'modmult32'
VERIFIC-INFO [VHDL-1010] modmult.vhd:23: analyzing architecture 'modmult'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'rsacypher.vhd'
VERIFIC-INFO [VHDL-1012] rsacypher.vhd:11: analyzing entity 'rsacypher'
VERIFIC-INFO [VHDL-1010] rsacypher.vhd:24: analyzing architecture 'behavioral'

yosys> synth_rs -top RSACypher -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.79

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top RSACypher

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] rsacypher.vhd:11: processing 'RSACypher(Behavioral)'
VERIFIC-INFO [VHDL-1067] modmult32.vhd:11: processing 'modmult32(mpwid=1024)(modmult)'
Importing module RSACypher.
Importing module modmult32(mpwid=1024)(modmult).

3.4.1. Analyzing design hierarchy..
Top module:  \RSACypher
Used module:     \modmult32(mpwid=1024)(modmult)

3.4.2. Analyzing design hierarchy..
Top module:  \RSACypher
Used module:     \modmult32(mpwid=1024)(modmult)
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module modmult32(mpwid=1024)(modmult).
<suppressed ~4 debug messages>
Optimizing module RSACypher.
<suppressed ~4 debug messages>

yosys> bmuxmap

3.6. Executing BMUXMAP pass.

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).
Deleting now unused module modmult32(mpwid=1024)(modmult).
<suppressed ~2 debug messages>

yosys> bmuxmap

3.9. Executing BMUXMAP pass.

yosys> demuxmap

3.10. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.11. Executing TRIBUF pass.

yosys> deminout

3.12. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.
<suppressed ~2 debug messages>

yosys> opt_clean

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..
Removed 0 unused cells and 89 unused wires.
<suppressed ~59 debug messages>

yosys> check

3.15. Executing CHECK pass (checking for obvious problems).
Checking module RSACypher...
Found and reported 0 problems.

yosys> opt_expr

3.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.

yosys> opt_merge -nomux

3.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.18. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \RSACypher..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $flatten\modmult.$auto$bmuxmap.cc:60:execute$262: { \modmult.modstate [1] \modmult.prodreg3 [1024:0] } -> { 1'0 \modmult.prodreg3 [1024:0] }
      Replacing known input bits on port A of cell $flatten\modmult.$auto$bmuxmap.cc:60:execute$260: { \modmult.modstate [0] \modmult.prodreg2 [1024:0] } -> { 1'0 \modmult.prodreg2 [1024:0] }
      Replacing known input bits on port A of cell $flatten\modmult.$verific$i41$modmult32.vhd:77$223: \modmult.first -> 1'1
      Replacing known input bits on port A of cell $flatten\modmult.$verific$i51$modmult32.vhd:86$233: \modmult.first -> 1'0
      Replacing known input bits on port A of cell $flatten\modmult.$verific$mux_22$modmult32.vhd:57$206: \modmult.mcreg1 -> { \modmult.mcreg1 [1025] 1'0 \modmult.mcreg1 [1023:0] }
      Replacing known input bits on port A of cell $flatten\modsqr.$auto$bmuxmap.cc:60:execute$262: { \modsqr.modstate [1] \modsqr.prodreg3 [1024:0] } -> { 1'0 \modsqr.prodreg3 [1024:0] }
      Replacing known input bits on port A of cell $flatten\modsqr.$auto$bmuxmap.cc:60:execute$260: { \modsqr.modstate [0] \modsqr.prodreg2 [1024:0] } -> { 1'0 \modsqr.prodreg2 [1024:0] }
      Replacing known input bits on port A of cell $flatten\modsqr.$verific$i41$modmult32.vhd:77$223: \modsqr.first -> 1'1
      Replacing known input bits on port A of cell $flatten\modsqr.$verific$i51$modmult32.vhd:86$233: \modsqr.first -> 1'0
      Replacing known input bits on port A of cell $flatten\modsqr.$verific$mux_22$modmult32.vhd:57$206: \modsqr.mcreg1 -> { \modsqr.mcreg1 [1025] 1'0 \modsqr.mcreg1 [1023:0] }
      Replacing known input bits on port A of cell $verific$i13$rsacypher.vhd:102$81: \done -> 1'1
      Replacing known input bits on port A of cell $verific$i27$rsacypher.vhd:115$93: \done -> 1'0
      Replacing known input bits on port A of cell $verific$i20$rsacypher.vhd:109$87: \done -> 1'0
      Replacing known input bits on port A of cell $verific$i75$rsacypher.vhd:189$120: \multgo -> 1'0
      Replacing known input bits on port A of cell $verific$i79$rsacypher.vhd:197$123: \multgo -> 1'0
      Replacing known input bits on port A of cell $verific$i78$rsacypher.vhd:195$122: \multgo -> 1'0
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

yosys> opt_reduce

3.19. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \RSACypher.
Performed a total of 0 changes.

yosys> opt_merge

3.20. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_share

3.21. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.22. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$tempin_reg$rsacypher.vhd:173$118 ($aldff) from module RSACypher.
Changing const-value async load to async reset on $verific$sqrin_reg$rsacypher.vhd:173$119 ($aldff) from module RSACypher.
Changing const-value async load to async reset on $verific$root_reg$rsacypher.vhd:138$108 ($aldff) from module RSACypher.
Changing const-value async load to async reset on $verific$multgo_reg$rsacypher.vhd:205$126 ($aldff) from module RSACypher.
Changing const-value async load to async reset on $verific$modreg_reg_2$rsacypher.vhd:138$109 ($aldff) from module RSACypher.
Changing const-value async load to async reset on $verific$done_reg$rsacypher.vhd:116$98 ($aldff) from module RSACypher.
Removing never-active async load on $verific$cypher_reg$rsacypher.vhd:116$99 ($aldff) from module RSACypher.
Changing const-value async load to async reset on $verific$count_reg$rsacypher.vhd:116$97 ($aldff) from module RSACypher.
Removing never-active async load on $flatten\modsqr.$verific$prodreg_reg$modmult32.vhd:88$254 ($aldff) from module RSACypher.
Removing never-active async load on $flatten\modsqr.$verific$mpreg_reg$modmult32.vhd:88$246 ($aldff) from module RSACypher.
Removing never-active async load on $flatten\modsqr.$verific$modreg2_reg$modmult32.vhd:88$252 ($aldff) from module RSACypher.
Removing never-active async load on $flatten\modsqr.$verific$modreg1_reg$modmult32.vhd:88$250 ($aldff) from module RSACypher.
Removing never-active async load on $flatten\modsqr.$verific$mcreg_reg$modmult32.vhd:88$248 ($aldff) from module RSACypher.
Changing const-value async load to async reset on $flatten\modsqr.$verific$first_reg$modmult32.vhd:88$245 ($aldff) from module RSACypher.
Removing never-active async load on $flatten\modsqr.$verific$count_reg$modmult32.vhd:88$256 ($aldff) from module RSACypher.
Removing never-active async load on $flatten\modmult.$verific$prodreg_reg$modmult32.vhd:88$254 ($aldff) from module RSACypher.
Removing never-active async load on $flatten\modmult.$verific$mpreg_reg$modmult32.vhd:88$246 ($aldff) from module RSACypher.
Removing never-active async load on $flatten\modmult.$verific$modreg2_reg$modmult32.vhd:88$252 ($aldff) from module RSACypher.
Removing never-active async load on $flatten\modmult.$verific$modreg1_reg$modmult32.vhd:88$250 ($aldff) from module RSACypher.
Removing never-active async load on $flatten\modmult.$verific$mcreg_reg$modmult32.vhd:88$248 ($aldff) from module RSACypher.
Changing const-value async load to async reset on $flatten\modmult.$verific$first_reg$modmult32.vhd:88$245 ($aldff) from module RSACypher.
Removing never-active async load on $flatten\modmult.$verific$count_reg$modmult32.vhd:88$256 ($aldff) from module RSACypher.

yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.

yosys> opt_muxtree

3.25. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \RSACypher..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.26. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \RSACypher.
Performed a total of 0 changes.

yosys> opt_merge

3.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
Removed a total of 0 cells.

yosys> opt_share

3.28. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.29. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..

yosys> opt_expr

3.31. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.
MAX OPT ITERATION = 2

yosys> fsm -encoding binary

3.32. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.32.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.32.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.32.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..

yosys> fsm_opt

3.32.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.32.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.32.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.32.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.

yosys> opt_merge -nomux

3.34. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \RSACypher..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \RSACypher.
Performed a total of 0 changes.

yosys> opt_merge

3.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
Removed a total of 0 cells.

yosys> opt_share

3.38. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.39. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$tempin_reg$rsacypher.vhd:173$118 ($adff) from module RSACypher (D = $verific$n50247$52, Q = \tempin).
Adding EN signal on $verific$sqrin_reg$rsacypher.vhd:173$119 ($adff) from module RSACypher (D = $verific$n52297$53, Q = \sqrin).
Adding EN signal on $verific$root_reg$rsacypher.vhd:138$108 ($adff) from module RSACypher (D = $verific$n31796$42, Q = \root).
Adding EN signal on $verific$modreg_reg_2$rsacypher.vhd:138$109 ($adff) from module RSACypher (D = \inMod, Q = \modreg).
Adding EN signal on $verific$cypher_reg$rsacypher.vhd:116$99 ($dff) from module RSACypher (D = \modmult.prodreg4 [1023:0], Q = \cypher).
Adding EN signal on $verific$count_reg$rsacypher.vhd:116$97 ($adff) from module RSACypher (D = $verific$n17442$32, Q = \count).
Adding EN signal on $flatten\modsqr.$verific$prodreg_reg$modmult32.vhd:88$254 ($dff) from module RSACypher (D = $flatten\modsqr.$verific$n39203$175, Q = \modsqr.prodreg).
Adding EN signal on $flatten\modsqr.$verific$mpreg_reg$modmult32.vhd:88$246 ($dff) from module RSACypher (D = $flatten\modsqr.$verific$n35097$171, Q = \modsqr.mpreg).
Adding EN signal on $flatten\modsqr.$verific$modreg2_reg$modmult32.vhd:88$252 ($dff) from module RSACypher (D = { 1'0 \modreg 1'0 }, Q = \modsqr.modreg2).
Adding EN signal on $flatten\modsqr.$verific$modreg1_reg$modmult32.vhd:88$250 ($dff) from module RSACypher (D = { 2'00 \modreg }, Q = \modsqr.modreg1).
Adding EN signal on $flatten\modsqr.$verific$mcreg_reg$modmult32.vhd:88$248 ($dff) from module RSACypher (D = $flatten\modsqr.$verific$n36122$172, Q = \modsqr.mcreg).
Adding EN signal on $flatten\modsqr.$verific$count_reg$modmult32.vhd:88$256 ($dff) from module RSACypher (D = $flatten\modsqr.$verific$n40230$176, Q = \modsqr.count).
Adding EN signal on $flatten\modmult.$verific$prodreg_reg$modmult32.vhd:88$254 ($dff) from module RSACypher (D = $flatten\modmult.$verific$n39203$175, Q = \modmult.prodreg).
Adding EN signal on $flatten\modmult.$verific$mpreg_reg$modmult32.vhd:88$246 ($dff) from module RSACypher (D = $flatten\modmult.$verific$n35097$171, Q = \modmult.mpreg).
Adding EN signal on $flatten\modmult.$verific$modreg2_reg$modmult32.vhd:88$252 ($dff) from module RSACypher (D = { 1'0 \modreg 1'0 }, Q = \modmult.modreg2).
Adding EN signal on $flatten\modmult.$verific$modreg1_reg$modmult32.vhd:88$250 ($dff) from module RSACypher (D = { 2'00 \modreg }, Q = \modmult.modreg1).
Adding EN signal on $flatten\modmult.$verific$mcreg_reg$modmult32.vhd:88$248 ($dff) from module RSACypher (D = $flatten\modmult.$verific$n36122$172, Q = \modmult.mcreg).
Adding EN signal on $flatten\modmult.$verific$count_reg$modmult32.vhd:88$256 ($dff) from module RSACypher (D = $flatten\modmult.$verific$n40230$176, Q = \modmult.count).
Setting constant 0-bit at position 1024 on $auto$ff.cc:262:slice$362 ($dffe) from module RSACypher.
Setting constant 0-bit at position 1025 on $auto$ff.cc:262:slice$362 ($dffe) from module RSACypher.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$357 ($dffe) from module RSACypher.
Setting constant 0-bit at position 1025 on $auto$ff.cc:262:slice$357 ($dffe) from module RSACypher.
Setting constant 0-bit at position 1024 on $auto$ff.cc:262:slice$316 ($dffe) from module RSACypher.
Setting constant 0-bit at position 1025 on $auto$ff.cc:262:slice$316 ($dffe) from module RSACypher.
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$311 ($dffe) from module RSACypher.
Setting constant 0-bit at position 1025 on $auto$ff.cc:262:slice$311 ($dffe) from module RSACypher.
Setting constant 0-bit at position 1023 on $auto$ff.cc:262:slice$282 ($adffe) from module RSACypher.

yosys> opt_clean

3.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..
Removed 26 unused cells and 26 unused wires.
<suppressed ~27 debug messages>

yosys> opt_expr

3.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.
<suppressed ~1 debug messages>

yosys> opt_muxtree

3.42. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \RSACypher..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

yosys> opt_reduce

3.43. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \RSACypher.
Performed a total of 0 changes.

yosys> opt_merge

3.44. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
<suppressed ~117 debug messages>
Removed a total of 39 cells.

yosys> opt_share

3.45. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.46. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..
Removed 0 unused cells and 37 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.

yosys> opt_muxtree

3.49. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \RSACypher..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

yosys> opt_reduce

3.50. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \RSACypher.
Performed a total of 0 changes.

yosys> opt_merge

3.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
Removed a total of 0 cells.

yosys> opt_share

3.52. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.53. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..

yosys> opt_expr

3.55. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.
MAX OPT ITERATION = 3

yosys> wreduce -keepdc

3.56. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell RSACypher.$auto$opt_dff.cc:195:make_patterns_logic$343 ($ne).
Removed top 1 bits (of 1024) from mux cell RSACypher.$verific$mux_25$rsacypher.vhd:115$92 ($mux).
Removed top 1 bits (of 2) from port B of cell RSACypher.$auto$opt_dff.cc:195:make_patterns_logic$297 ($ne).
Removed top 1 bits (of 1026) from mux cell RSACypher.$flatten\modsqr.$verific$mux_22$modmult32.vhd:57$206 ($mux).
Removed top 1 bits (of 1027) from port A of cell RSACypher.$flatten\modsqr.$verific$sub_12$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$195 ($sub).
Removed top 2 bits (of 1027) from port B of cell RSACypher.$flatten\modsqr.$verific$sub_12$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$195 ($sub).
Removed top 1 bits (of 1027) from port Y of cell RSACypher.$flatten\modsqr.$verific$sub_12$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$195 ($sub).
Removed top 1 bits (of 1027) from port A of cell RSACypher.$flatten\modsqr.$verific$sub_18$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$202 ($sub).
Removed top 3 bits (of 1027) from port B of cell RSACypher.$flatten\modsqr.$verific$sub_18$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$202 ($sub).
Removed top 2 bits (of 1027) from port Y of cell RSACypher.$flatten\modsqr.$verific$sub_18$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$202 ($sub).
Removed top 1 bits (of 1026) from port A of cell RSACypher.$flatten\modsqr.$verific$sub_18$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$202 ($sub).
Removed top 32 bits (of 33) from port B of cell RSACypher.$flatten\modsqr.$verific$sub_45$modmult32.vhd:82$227 ($sub).
Removed top 1 bits (of 33) from port Y of cell RSACypher.$flatten\modsqr.$verific$sub_45$modmult32.vhd:82$227 ($sub).
Removed top 1 bits (of 33) from port A of cell RSACypher.$flatten\modsqr.$verific$sub_45$modmult32.vhd:82$227 ($sub).
Removed top 1 bits (of 1027) from port A of cell RSACypher.$flatten\modsqr.$verific$sub_9$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$191 ($sub).
Removed top 3 bits (of 1027) from port B of cell RSACypher.$flatten\modsqr.$verific$sub_9$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$191 ($sub).
Removed top 1 bits (of 1027) from port Y of cell RSACypher.$flatten\modsqr.$verific$sub_9$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$191 ($sub).
Removed top 2 bits (of 4) from port B of cell RSACypher.$auto$opt_dff.cc:195:make_patterns_logic$288 ($ne).
Removed top 1 bits (of 1026) from mux cell RSACypher.$flatten\modmult.$verific$mux_22$modmult32.vhd:57$206 ($mux).
Removed top 1 bits (of 1027) from port A of cell RSACypher.$flatten\modmult.$verific$sub_12$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$195 ($sub).
Removed top 2 bits (of 1027) from port B of cell RSACypher.$flatten\modmult.$verific$sub_12$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$195 ($sub).
Removed top 1 bits (of 1027) from port Y of cell RSACypher.$flatten\modmult.$verific$sub_12$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$195 ($sub).
Removed top 1 bits (of 1027) from port A of cell RSACypher.$flatten\modmult.$verific$sub_18$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$202 ($sub).
Removed top 3 bits (of 1027) from port B of cell RSACypher.$flatten\modmult.$verific$sub_18$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$202 ($sub).
Removed top 2 bits (of 1027) from port Y of cell RSACypher.$flatten\modmult.$verific$sub_18$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$202 ($sub).
Removed top 1 bits (of 1026) from port A of cell RSACypher.$flatten\modmult.$verific$sub_18$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$202 ($sub).
Removed top 32 bits (of 33) from port B of cell RSACypher.$flatten\modmult.$verific$sub_45$modmult32.vhd:82$227 ($sub).
Removed top 1 bits (of 33) from port Y of cell RSACypher.$flatten\modmult.$verific$sub_45$modmult32.vhd:82$227 ($sub).
Removed top 1 bits (of 33) from port A of cell RSACypher.$flatten\modmult.$verific$sub_45$modmult32.vhd:82$227 ($sub).
Removed top 1 bits (of 1027) from port A of cell RSACypher.$flatten\modmult.$verific$sub_9$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$191 ($sub).
Removed top 3 bits (of 1027) from port B of cell RSACypher.$flatten\modmult.$verific$sub_9$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$191 ($sub).
Removed top 1 bits (of 1027) from port Y of cell RSACypher.$flatten\modmult.$verific$sub_9$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$191 ($sub).
Removed top 1 bits (of 1024) from mux cell RSACypher.$verific$mux_11$rsacypher.vhd:102$80 ($mux).
Removed top 1 bits (of 1024) from mux cell RSACypher.$verific$mux_24$rsacypher.vhd:115$91 ($mux).
Removed top 1 bits (of 1024) from mux cell RSACypher.$verific$mux_23$rsacypher.vhd:115$90 ($mux).
Removed top 1 bits (of 1024) from mux cell RSACypher.$verific$mux_22$rsacypher.vhd:114$89 ($mux).
Removed top 1 bits (of 33) from wire RSACypher.$flatten\modmult.$verific$n28838$162.
Removed top 1 bits (of 33) from wire RSACypher.$flatten\modsqr.$verific$n28838$162.
Removed top 1 bits (of 1024) from wire RSACypher.$verific$n10260$25.
Removed top 1 bits (of 1024) from wire RSACypher.$verific$n14367$29.
Removed top 1 bits (of 1024) from wire RSACypher.$verific$n17442$32.
Removed top 1 bits (of 1024) from wire RSACypher.count.

yosys> peepopt

3.57. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.59. Executing BMUXMAP pass.

yosys> demuxmap

3.60. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.61. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module RSACypher:
  creating $macc model for $flatten\modmult.$verific$add_4$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$187 ($add).
  creating $macc model for $flatten\modmult.$verific$sub_12$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$195 ($sub).
  creating $macc model for $flatten\modmult.$verific$sub_18$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$202 ($sub).
  creating $macc model for $flatten\modmult.$verific$sub_45$modmult32.vhd:82$227 ($sub).
  creating $macc model for $flatten\modmult.$verific$sub_9$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$191 ($sub).
  creating $macc model for $flatten\modsqr.$verific$add_4$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$187 ($add).
  creating $macc model for $flatten\modsqr.$verific$sub_12$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$195 ($sub).
  creating $macc model for $flatten\modsqr.$verific$sub_18$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$202 ($sub).
  creating $macc model for $flatten\modsqr.$verific$sub_45$modmult32.vhd:82$227 ($sub).
  creating $macc model for $flatten\modsqr.$verific$sub_9$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$191 ($sub).
  creating $alu model for $macc $flatten\modsqr.$verific$sub_9$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$191.
  creating $alu model for $macc $flatten\modsqr.$verific$sub_45$modmult32.vhd:82$227.
  creating $alu model for $macc $flatten\modsqr.$verific$sub_18$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$202.
  creating $alu model for $macc $flatten\modsqr.$verific$sub_12$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$195.
  creating $alu model for $macc $flatten\modsqr.$verific$add_4$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$187.
  creating $alu model for $macc $flatten\modmult.$verific$sub_9$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$191.
  creating $alu model for $macc $flatten\modmult.$verific$sub_45$modmult32.vhd:82$227.
  creating $alu model for $macc $flatten\modmult.$verific$sub_18$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$202.
  creating $alu model for $macc $flatten\modmult.$verific$sub_12$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$195.
  creating $alu model for $macc $flatten\modmult.$verific$add_4$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$187.
  creating $alu cell for $flatten\modmult.$verific$add_4$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$187: $auto$alumacc.cc:485:replace_alu$396
  creating $alu cell for $flatten\modmult.$verific$sub_12$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$195: $auto$alumacc.cc:485:replace_alu$399
  creating $alu cell for $flatten\modmult.$verific$sub_18$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$202: $auto$alumacc.cc:485:replace_alu$402
  creating $alu cell for $flatten\modmult.$verific$sub_45$modmult32.vhd:82$227: $auto$alumacc.cc:485:replace_alu$405
  creating $alu cell for $flatten\modmult.$verific$sub_9$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$191: $auto$alumacc.cc:485:replace_alu$408
  creating $alu cell for $flatten\modsqr.$verific$add_4$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$187: $auto$alumacc.cc:485:replace_alu$411
  creating $alu cell for $flatten\modsqr.$verific$sub_12$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$195: $auto$alumacc.cc:485:replace_alu$414
  creating $alu cell for $flatten\modsqr.$verific$sub_18$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$202: $auto$alumacc.cc:485:replace_alu$417
  creating $alu cell for $flatten\modsqr.$verific$sub_45$modmult32.vhd:82$227: $auto$alumacc.cc:485:replace_alu$420
  creating $alu cell for $flatten\modsqr.$verific$sub_9$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:1113$191: $auto$alumacc.cc:485:replace_alu$423
  created 10 $alu and 0 $macc cells.

yosys> opt_expr

3.62. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.

yosys> opt_merge -nomux

3.63. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.64. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \RSACypher..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

yosys> opt_reduce

3.65. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \RSACypher.
Performed a total of 0 changes.

yosys> opt_merge

3.66. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
Removed a total of 0 cells.

yosys> opt_share

3.67. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.68. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.69. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..

yosys> opt_expr

3.70. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.
MAX OPT ITERATION = 1

yosys> stat

3.71. Printing statistics.

=== RSACypher ===

   Number of wires:                167
   Number of wire bits:          95816
   Number of public wires:          65
   Number of public wire bits:   42111
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                115
     $adff                           4
     $adffe                          5
     $alu                           10
     $and                            2
     $dffe                          11
     $logic_not                      5
     $mux                           57
     $ne                             7
     $not                            3
     $or                             2
     $reduce_and                     7
     $reduce_bool                    2


yosys> memory -nomap

3.72. Executing MEMORY pass.

yosys> opt_mem

3.72.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.72.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.72.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.72.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.72.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.72.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..

yosys> memory_share

3.72.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.72.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.72.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..

yosys> memory_collect

3.72.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.73. Printing statistics.

=== RSACypher ===

   Number of wires:                167
   Number of wire bits:          95816
   Number of public wires:          65
   Number of public wire bits:   42111
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                115
     $adff                           4
     $adffe                          5
     $alu                           10
     $and                            2
     $dffe                          11
     $logic_not                      5
     $mux                           57
     $ne                             7
     $not                            3
     $or                             2
     $reduce_and                     7
     $reduce_bool                    2


yosys> muxpack

3.74. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~49 debug messages>

yosys> opt_clean

3.75. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..

yosys> pmuxtree

3.76. Executing PMUXTREE pass.

yosys> muxpack

3.77. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~49 debug messages>

yosys> memory_map

3.78. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.79. Printing statistics.

=== RSACypher ===

   Number of wires:                167
   Number of wire bits:          95816
   Number of public wires:          65
   Number of public wire bits:   42111
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                115
     $adff                           4
     $adffe                          5
     $alu                           10
     $and                            2
     $dffe                          11
     $logic_not                      5
     $mux                           57
     $ne                             7
     $not                            3
     $or                             2
     $reduce_and                     7
     $reduce_bool                    2


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.80. Executing TECHMAP pass (map to technology primitives).

3.80.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.80.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.80.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$130a76e03963c88ca9987db240dc0110af07a56a\_80_rs_alu for cells of type $alu.
Using template $paramod$1e6cb4da090695ab4e86da4773a4ce02031988eb\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using template $paramod$3610213784db1a48da1a816ed51f313dcc1c7217\_80_rs_alu for cells of type $alu.
Using template $paramod$c04af8dbf0e5d1d69bbccb2c7bd8a93fc9ef54dc\_90_alu for cells of type $alu.
Using template $paramod$6f9ffea2b7b6a403359c05f0e310a6484fe00ec9\_80_rs_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000010000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
No more expansions possible.
<suppressed ~13363 debug messages>

yosys> stat

3.81. Printing statistics.

=== RSACypher ===

   Number of wires:               8835
   Number of wire bits:         239080
   Number of public wires:          65
   Number of public wire bits:   42111
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:             103432
     $_AND_                       8409
     $_DFFE_PP0P_                 5119
     $_DFFE_PP_                   9288
     $_DFF_PP0_                      1
     $_DFF_PP1_                      3
     $_MUX_                      47399
     $_NOT_                       8278
     $_OR_                        8363
     $_XOR_                      10418
     adder_carry                  6154


yosys> opt_expr

3.82. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.
<suppressed ~9562 debug messages>

yosys> opt_merge -nomux

3.83. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
<suppressed ~24699 debug messages>
Removed a total of 8233 cells.

yosys> opt_muxtree

3.84. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \RSACypher..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.85. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \RSACypher.
Performed a total of 0 changes.

yosys> opt_merge

3.86. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
Removed a total of 0 cells.

yosys> opt_share

3.87. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.88. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.89. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..
Removed 2096 unused cells and 384 unused wires.
<suppressed ~2097 debug messages>

yosys> opt_expr

3.90. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.

yosys> opt_muxtree

3.91. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \RSACypher..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.92. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \RSACypher.
Performed a total of 0 changes.

yosys> opt_merge

3.93. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
Removed a total of 0 cells.

yosys> opt_share

3.94. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.95. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.96. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..

yosys> opt_expr

3.97. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.
MAX OPT ITERATION = 2

yosys> opt_expr -full

3.98. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.
<suppressed ~17486 debug messages>

yosys> techmap -map +/techmap.v

3.99. Executing TECHMAP pass (map to technology primitives).

3.99.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.99.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.100. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.

yosys> opt_merge -nomux

3.101. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.102. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \RSACypher..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.103. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \RSACypher.
Performed a total of 0 changes.

yosys> opt_merge

3.104. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.105. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.106. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.107. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.
MAX OPT ITERATION = 1

yosys> abc -dff

3.108. Executing ABC pass (technology mapping using ABC).

3.108.1. Summary of detected clock domains:
  2049 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$314, arst={ }, srst={ }
  2048 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$360, arst={ }, srst={ }
  14788 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$291, arst=\reset, srst={ }
  13138 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$300, arst={ }, srst={ }
  12068 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$346, arst={ }, srst={ }
  7784 cells in clk=\clk, en={ }, arst=\reset, srst={ }
  3073 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$264, arst=\reset, srst={ }
  13254 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$280, arst={ }, srst={ }
  1025 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$273, arst=\reset, srst={ }

3.108.2. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$314
Extracted 2049 gates and 3075 wires to a netlist network with 1026 inputs and 1025 outputs.

3.108.2.1. Executing ABC.

3.108.3. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$360
Extracted 2048 gates and 3072 wires to a netlist network with 1024 inputs and 1024 outputs.

3.108.3.1. Executing ABC.

3.108.4. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$291, asynchronously reset by \reset
Extracted 13763 gates and 17870 wires to a netlist network with 4106 inputs and 4627 outputs.

3.108.4.1. Executing ABC.

3.108.5. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$300
Extracted 11086 gates and 16235 wires to a netlist network with 5147 inputs and 5650 outputs.

3.108.5.1. Executing ABC.

3.108.6. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$346
Extracted 10017 gates and 16170 wires to a netlist network with 6151 inputs and 5649 outputs.

3.108.6.1. Executing ABC.

3.108.7. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by \reset
Extracted 7783 gates and 15524 wires to a netlist network with 7739 inputs and 5142 outputs.

3.108.7.1. Executing ABC.

3.108.8. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$264, asynchronously reset by \reset
Extracted 3073 gates and 6147 wires to a netlist network with 3074 inputs and 3073 outputs.

3.108.8.1. Executing ABC.

3.108.9. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$280
Extracted 12229 gates and 15310 wires to a netlist network with 3081 inputs and 3095 outputs.

3.108.9.1. Executing ABC.

3.108.10. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$273, asynchronously reset by \reset
Extracted 1025 gates and 2051 wires to a netlist network with 1026 inputs and 1025 outputs.

3.108.10.1. Executing ABC.

yosys> abc -dff

3.109. Executing ABC pass (technology mapping using ABC).

3.109.1. Summary of detected clock domains:
  8439 cells in clk=\clk, en={ }, arst=\reset, srst={ }
  2574 cells in clk=\clk, en=$abc$110617$auto$opt_dff.cc:219:make_patterns_logic$291, arst=\reset, srst={ }
  8093 cells in clk=\clk, en=$abc$163546$auto$opt_dff.cc:194:make_patterns_logic$264, arst=\reset, srst={ }
  15460 cells in clk=\clk, en=$abc$172764$auto$opt_dff.cc:219:make_patterns_logic$280, arst={ }, srst={ }
  25477 cells in clk=\clk, en=$abc$127723$auto$opt_dff.cc:219:make_patterns_logic$300, arst={ }, srst={ }
  10405 cells in clk=\clk, en=$abc$140743$auto$opt_dff.cc:219:make_patterns_logic$346, arst={ }, srst={ }
  2050 cells in clk=\clk, en=$abc$104470$auto$opt_dff.cc:219:make_patterns_logic$314, arst={ }, srst={ }
  2049 cells in clk=\clk, en=$abc$153725$auto$opt_dff.cc:219:make_patterns_logic$360, arst={ }, srst={ }
  1025 cells in clk=\clk, en=$abc$189254$auto$opt_dff.cc:219:make_patterns_logic$273, arst=\reset, srst={ }

3.109.2. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by \reset
Extracted 8439 gates and 16814 wires to a netlist network with 8375 inputs and 5784 outputs.

3.109.2.1. Executing ABC.

3.109.3. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$110617$auto$opt_dff.cc:219:make_patterns_logic$291, asynchronously reset by \reset
Extracted 2574 gates and 4629 wires to a netlist network with 2055 inputs and 2550 outputs.

3.109.3.1. Executing ABC.

3.109.4. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$163546$auto$opt_dff.cc:194:make_patterns_logic$264, asynchronously reset by \reset
Extracted 8093 gates and 14795 wires to a netlist network with 6702 inputs and 4097 outputs.

3.109.4.1. Executing ABC.

3.109.5. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$172764$auto$opt_dff.cc:219:make_patterns_logic$280
Extracted 14434 gates and 17515 wires to a netlist network with 3081 inputs and 4119 outputs.

3.109.5.1. Executing ABC.

3.109.6. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$127723$auto$opt_dff.cc:219:make_patterns_logic$300
Extracted 22400 gates and 28550 wires to a netlist network with 6150 inputs and 8749 outputs.

3.109.6.1. Executing ABC.

3.109.7. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$140743$auto$opt_dff.cc:219:make_patterns_logic$346
Extracted 8354 gates and 14510 wires to a netlist network with 6156 inputs and 7198 outputs.

3.109.7.1. Executing ABC.

3.109.8. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$104470$auto$opt_dff.cc:219:make_patterns_logic$314
Extracted 2050 gates and 3076 wires to a netlist network with 1026 inputs and 1026 outputs.

3.109.8.1. Executing ABC.

3.109.9. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$153725$auto$opt_dff.cc:219:make_patterns_logic$360
Extracted 2049 gates and 3075 wires to a netlist network with 1026 inputs and 1025 outputs.

3.109.9.1. Executing ABC.

3.109.10. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$189254$auto$opt_dff.cc:219:make_patterns_logic$273, asynchronously reset by \reset
Extracted 1025 gates and 2051 wires to a netlist network with 1026 inputs and 1025 outputs.

3.109.10.1. Executing ABC.

yosys> abc -dff

3.110. Executing ABC pass (technology mapping using ABC).

3.110.1. Summary of detected clock domains:
  2049 cells in clk=\clk, en=$abc$273190$abc$153725$auto$opt_dff.cc:219:make_patterns_logic$360, arst={ }, srst={ }
  7676 cells in clk=\clk, en={ }, arst=\reset, srst={ }
  14233 cells in clk=\clk, en=$abc$200735$abc$110617$auto$opt_dff.cc:219:make_patterns_logic$291, arst=\reset, srst={ }
  11357 cells in clk=\clk, en=$abc$231440$abc$127723$auto$opt_dff.cc:219:make_patterns_logic$300, arst={ }, srst={ }
  2049 cells in clk=\clk, en=$abc$270115$abc$104470$auto$opt_dff.cc:219:make_patterns_logic$314, arst={ }, srst={ }
  9259 cells in clk=\clk, en=$abc$205338$abc$163546$auto$opt_dff.cc:194:make_patterns_logic$264, arst=\reset, srst={ }
  14832 cells in clk=\clk, en=$abc$216604$abc$172764$auto$opt_dff.cc:219:make_patterns_logic$280, arst={ }, srst={ }
  10589 cells in clk=\clk, en=$abc$256108$abc$140743$auto$opt_dff.cc:219:make_patterns_logic$346, arst={ }, srst={ }
  1025 cells in clk=\clk, en=$abc$276264$abc$189254$auto$opt_dff.cc:219:make_patterns_logic$273, arst=\reset, srst={ }

3.110.2. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$273190$abc$153725$auto$opt_dff.cc:219:make_patterns_logic$360
Extracted 2049 gates and 3075 wires to a netlist network with 1026 inputs and 1025 outputs.

3.110.2.1. Executing ABC.

3.110.3. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by \reset
Extracted 7676 gates and 15329 wires to a netlist network with 7653 inputs and 5052 outputs.

3.110.3.1. Executing ABC.

3.110.4. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$200735$abc$110617$auto$opt_dff.cc:219:make_patterns_logic$291, asynchronously reset by \reset
Extracted 13211 gates and 17316 wires to a netlist network with 4105 inputs and 4612 outputs.

3.110.4.1. Executing ABC.

3.110.5. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$231440$abc$127723$auto$opt_dff.cc:219:make_patterns_logic$300
Extracted 9302 gates and 15396 wires to a netlist network with 6094 inputs and 7304 outputs.

3.110.5.1. Executing ABC.

3.110.6. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$270115$abc$104470$auto$opt_dff.cc:219:make_patterns_logic$314
Extracted 2049 gates and 3075 wires to a netlist network with 1026 inputs and 1025 outputs.

3.110.6.1. Executing ABC.

3.110.7. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$205338$abc$163546$auto$opt_dff.cc:194:make_patterns_logic$264, asynchronously reset by \reset
Extracted 9259 gates and 16957 wires to a netlist network with 7698 inputs and 4031 outputs.

3.110.7.1. Executing ABC.

3.110.8. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$216604$abc$172764$auto$opt_dff.cc:219:make_patterns_logic$280
Extracted 13807 gates and 16888 wires to a netlist network with 3081 inputs and 4120 outputs.

3.110.8.1. Executing ABC.

3.110.9. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$256108$abc$140743$auto$opt_dff.cc:219:make_patterns_logic$346
Extracted 8537 gates and 14690 wires to a netlist network with 6153 inputs and 7025 outputs.

3.110.9.1. Executing ABC.

3.110.10. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$276264$abc$189254$auto$opt_dff.cc:219:make_patterns_logic$273, asynchronously reset by \reset
Extracted 1025 gates and 2051 wires to a netlist network with 1026 inputs and 1025 outputs.

3.110.10.1. Executing ABC.

yosys> abc -dff

3.111. Executing ABC pass (technology mapping using ABC).

3.111.1. Summary of detected clock domains:
  2049 cells in clk=\clk, en=$abc$279338$abc$273190$abc$153725$auto$opt_dff.cc:219:make_patterns_logic$360, arst={ }, srst={ }
  13586 cells in clk=\clk, en=$abc$333248$abc$216604$abc$172764$auto$opt_dff.cc:219:make_patterns_logic$280, arst={ }, srst={ }
  7349 cells in clk=\clk, en={ }, arst=\reset, srst={ }
  3911 cells in clk=\clk, en=$abc$290095$abc$200735$abc$110617$auto$opt_dff.cc:219:make_patterns_logic$291, arst=\reset, srst={ }
  21691 cells in clk=\clk, en=$abc$305018$abc$231440$abc$127723$auto$opt_dff.cc:219:make_patterns_logic$300, arst={ }, srst={ }
  2049 cells in clk=\clk, en=$abc$318974$abc$270115$abc$104470$auto$opt_dff.cc:219:make_patterns_logic$314, arst={ }, srst={ }
  9126 cells in clk=\clk, en=$abc$322048$abc$205338$abc$163546$auto$opt_dff.cc:194:make_patterns_logic$264, arst=\reset, srst={ }
  10937 cells in clk=\clk, en=$abc$347064$abc$256108$abc$140743$auto$opt_dff.cc:219:make_patterns_logic$346, arst={ }, srst={ }
  1025 cells in clk=\clk, en=$abc$360648$abc$276264$abc$189254$auto$opt_dff.cc:219:make_patterns_logic$273, arst=\reset, srst={ }

3.111.2. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$279338$abc$273190$abc$153725$auto$opt_dff.cc:219:make_patterns_logic$360
Extracted 2049 gates and 3075 wires to a netlist network with 1026 inputs and 1025 outputs.

3.111.2.1. Executing ABC.

3.111.3. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$333248$abc$216604$abc$172764$auto$opt_dff.cc:219:make_patterns_logic$280
Extracted 12561 gates and 15642 wires to a netlist network with 3081 inputs and 4121 outputs.

3.111.3.1. Executing ABC.

3.111.4. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, asynchronously reset by \reset
Extracted 7158 gates and 13215 wires to a netlist network with 6057 inputs and 4238 outputs.

3.111.4.1. Executing ABC.

3.111.5. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$290095$abc$200735$abc$110617$auto$opt_dff.cc:219:make_patterns_logic$291, asynchronously reset by \reset
Extracted 3881 gates and 6006 wires to a netlist network with 2125 inputs and 1610 outputs.

3.111.5.1. Executing ABC.

3.111.6. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$305018$abc$231440$abc$127723$auto$opt_dff.cc:219:make_patterns_logic$300
Extracted 18858 gates and 24416 wires to a netlist network with 5558 inputs and 7713 outputs.

3.111.6.1. Executing ABC.

3.111.7. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$318974$abc$270115$abc$104470$auto$opt_dff.cc:219:make_patterns_logic$314
Extracted 2049 gates and 3075 wires to a netlist network with 1026 inputs and 1025 outputs.

3.111.7.1. Executing ABC.

3.111.8. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$322048$abc$205338$abc$163546$auto$opt_dff.cc:194:make_patterns_logic$264, asynchronously reset by \reset
Extracted 9103 gates and 16346 wires to a netlist network with 7243 inputs and 3322 outputs.

3.111.8.1. Executing ABC.

3.111.9. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$347064$abc$256108$abc$140743$auto$opt_dff.cc:219:make_patterns_logic$346
Extracted 8885 gates and 15061 wires to a netlist network with 6176 inputs and 7699 outputs.

3.111.9.1. Executing ABC.

3.111.10. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$360648$abc$276264$abc$189254$auto$opt_dff.cc:219:make_patterns_logic$273, asynchronously reset by \reset
Extracted 1025 gates and 2051 wires to a netlist network with 1026 inputs and 1025 outputs.

3.111.10.1. Executing ABC.

yosys> opt_ffinv

3.112. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.113. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.
<suppressed ~3561 debug messages>

yosys> opt_merge -nomux

3.114. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
<suppressed ~2724 debug messages>
Removed a total of 908 cells.

yosys> opt_muxtree

3.115. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \RSACypher..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.116. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \RSACypher.
Performed a total of 0 changes.

yosys> opt_merge

3.117. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
Removed a total of 0 cells.

yosys> opt_share

3.118. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.119. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.120. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..
Removed 0 unused cells and 439570 unused wires.
<suppressed ~14 debug messages>

yosys> opt_expr

3.121. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.
MAX OPT ITERATION = 1

yosys> bmuxmap

3.122. Executing BMUXMAP pass.

yosys> demuxmap

3.123. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_0yw3zd/abc_tmp_1.scr

3.124. Executing ABC pass (technology mapping using ABC).

3.124.1. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Extracted 51268 gates and 71829 wires to a netlist network with 20561 inputs and 19541 outputs.

3.124.1.1. Executing ABC.
DE:   #PIs = 20561  #Luts = 25774  Max Lvl = 281  Avg Lvl =  79.99  [   1.20 sec. at Pass 0]{firstMap}
DE:   #PIs = 20561  #Luts = 23829  Max Lvl = 824  Avg Lvl = 224.08  [  60.34 sec. at Pass 1]{initMapFlow}
DE:   #PIs = 20561  #Luts = 23713  Max Lvl = 853  Avg Lvl = 244.56  [  19.78 sec. at Pass 2]{map}
DE:   #PIs = 20561  #Luts = 23592  Max Lvl = 735  Avg Lvl = 231.65  [  21.20 sec. at Pass 3]{postMap}
DE:   #PIs = 20561  #Luts = 23565  Max Lvl = 735  Avg Lvl = 231.49  [   6.49 sec. at Pass 4]{finalMap}

yosys> opt_expr

3.125. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.

yosys> opt_merge -nomux

3.126. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.127. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \RSACypher..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.128. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \RSACypher.
Performed a total of 0 changes.

yosys> opt_merge

3.129. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
Removed a total of 0 cells.

yosys> opt_share

3.130. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.131. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.132. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..
Removed 0 unused cells and 68756 unused wires.
<suppressed ~5 debug messages>

yosys> opt_expr

3.133. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.134. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.135. Printing statistics.

=== RSACypher ===

   Number of wires:              23374
   Number of wire bits:          66406
   Number of public wires:          48
   Number of public wire bits:   28728
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              44130
     $_DFFE_PP0P_                 5119
     $_DFFE_PP_                   9288
     $_DFF_PP0_                      4
     $lut                        23565
     adder_carry                  6154


yosys> shregmap -minlen 8 -maxlen 20

3.136. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.137. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.138. Printing statistics.

=== RSACypher ===

   Number of wires:              23374
   Number of wire bits:          66406
   Number of public wires:          48
   Number of public wire bits:   28728
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              44130
     $_DFFE_PP0P_                14407
     $_DFF_PP0_                      4
     $lut                        23565
     adder_carry                  6154


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.139. Executing TECHMAP pass (map to technology primitives).

3.139.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.139.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.139.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~52523 debug messages>

yosys> opt_expr -mux_undef

3.140. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.
<suppressed ~269828 debug messages>

yosys> simplemap

3.141. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.142. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.

yosys> opt_merge

3.143. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
<suppressed ~87186 debug messages>
Removed a total of 29062 cells.

yosys> opt_dff -nodffe -nosdff

3.144. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.145. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..
Removed 0 unused cells and 137653 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.146. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.
<suppressed ~8448 debug messages>

yosys> opt_merge -nomux

3.147. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
<suppressed ~54 debug messages>
Removed a total of 18 cells.

yosys> opt_muxtree

3.148. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \RSACypher..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.149. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \RSACypher.
Performed a total of 0 changes.

yosys> opt_merge

3.150. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
Removed a total of 0 cells.

yosys> opt_share

3.151. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.152. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.153. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..
Removed 0 unused cells and 1057 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.154. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_0yw3zd/abc_tmp_2.scr

3.155. Executing ABC pass (technology mapping using ABC).

3.155.1. Extracting gate netlist of module `\RSACypher' to `<abc-temp-dir>/input.blif'..
Extracted 59560 gates and 80123 wires to a netlist network with 20561 inputs and 19542 outputs.

3.155.1.1. Executing ABC.
DE:   #PIs = 20561  #Luts = 23972  Max Lvl = 436  Avg Lvl = 136.28  [   2.62 sec. at Pass 0]{firstMap}
DE:   #PIs = 20561  #Luts = 23505  Max Lvl = 762  Avg Lvl = 239.50  [  70.12 sec. at Pass 1]{initMapFlow}
DE:   #PIs = 20561  #Luts = 23439  Max Lvl = 920  Avg Lvl = 275.83  [  32.73 sec. at Pass 2]{map}
DE:   #PIs = 20561  #Luts = 23374  Max Lvl = 742  Avg Lvl = 224.59  [  34.89 sec. at Pass 3]{postMap}
DE:   #PIs = 20561  #Luts = 23373  Max Lvl = 742  Avg Lvl = 224.59  [  11.16 sec. at Pass 4]{finalMap}

yosys> opt_expr

3.156. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.

yosys> opt_merge -nomux

3.157. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.158. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \RSACypher..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.159. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \RSACypher.
Performed a total of 0 changes.

yosys> opt_merge

3.160. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\RSACypher'.
Removed a total of 0 cells.

yosys> opt_share

3.161. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.162. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.163. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..
Removed 0 unused cells and 68605 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.164. Executing OPT_EXPR pass (perform const folding).
Optimizing module RSACypher.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.165. Executing HIERARCHY pass (managing design hierarchy).

3.165.1. Analyzing design hierarchy..
Top module:  \RSACypher

3.165.2. Analyzing design hierarchy..
Top module:  \RSACypher
Removed 0 unused modules.

yosys> stat

3.166. Printing statistics.

=== RSACypher ===

   Number of wires:              23182
   Number of wire bits:          66214
   Number of public wires:          48
   Number of public wire bits:   28728
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              43938
     $lut                        23373
     adder_carry                  6154
     dffsre                      14411


yosys> opt_clean -purge

3.167. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \RSACypher..
Removed 0 unused cells and 20 unused wires.
<suppressed ~20 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.168. Executing Verilog backend.
Dumping module `\RSACypher'.

End of script. Logfile hash: c08aa0544e, CPU: user 394.91s system 1.33s, MEM: 996.29 MB peak
Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)
Time spent: 60% 6x abc (527 sec), 15% 16x opt_dff (137 sec), ...
real 972.89
user 839.05
sys 37.70
