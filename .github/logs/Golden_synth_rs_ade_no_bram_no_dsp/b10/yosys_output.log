
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.92
 Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl b10.vhd

yosys> verific -vhdl b10.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'b10.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-INFO [VHDL-1012] b10.vhd:1: analyzing entity 'b10'
VERIFIC-INFO [VHDL-1010] b10.vhd:19: analyzing architecture 'behav'

yosys> synth_rs -top b10 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.79

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top b10

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] b10.vhd:1: processing 'b10(BEHAV)'
Importing module b10.

3.4.1. Analyzing design hierarchy..
Top module:  \b10

3.4.2. Analyzing design hierarchy..
Top module:  \b10
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.
<suppressed ~13 debug messages>

yosys> bmuxmap

3.6. Executing BMUXMAP pass.

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).

yosys> bmuxmap

3.9. Executing BMUXMAP pass.

yosys> demuxmap

3.10. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.11. Executing TRIBUF pass.

yosys> deminout

3.12. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.
<suppressed ~59 debug messages>

yosys> opt_clean

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..
Removed 3 unused cells and 32 unused wires.
<suppressed ~18 debug messages>

yosys> check

3.15. Executing CHECK pass (checking for obvious problems).
Checking module b10...
Found and reported 0 problems.

yosys> opt_expr

3.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.

yosys> opt_merge -nomux

3.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.18. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b10..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $verific$mux_95$b10.vhd:156$160: \stato -> 4'1001
      Replacing known input bits on port A of cell $verific$mux_79$b10.vhd:139$154: \stato -> 4'0110
      Replacing known input bits on port B of cell $verific$mux_68$b10.vhd:131$144: \stato -> 4'0101
      Replacing known input bits on port A of cell $verific$mux_64$b10.vhd:127$141: \stato -> 4'0100
      Replacing known input bits on port B of cell $verific$mux_35$b10.vhd:111$119: \stato -> 4'0010
      Replacing known input bits on port A of cell $verific$mux_15$b10.vhd:83$101: \stato -> 4'0001
      Replacing known input bits on port B of cell $verific$i37$b10.vhd:111$120: \key -> 1'1
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

yosys> opt_reduce

3.19. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b10.
Performed a total of 0 changes.

yosys> opt_merge

3.20. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
Removed a total of 0 cells.

yosys> opt_share

3.21. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.22. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $verific$voto3_reg$b10.vhd:165$179 ($aldff) from module b10.
Changing const-value async load to async reset on $verific$voto2_reg$b10.vhd:165$178 ($aldff) from module b10.
Changing const-value async load to async reset on $verific$voto1_reg$b10.vhd:165$177 ($aldff) from module b10.
Changing const-value async load to async reset on $verific$voto0_reg$b10.vhd:165$176 ($aldff) from module b10.
Changing const-value async load to async reset on $verific$v_out_reg$b10.vhd:165$185 ($aldff) from module b10.
Changing const-value async load to async reset on $verific$stato_reg$b10.vhd:165$175 ($aldff) from module b10.
Changing const-value async load to async reset on $verific$sign_reg$b10.vhd:165$180 ($aldff) from module b10.
Changing const-value async load to async reset on $verific$last_r_reg$b10.vhd:165$182 ($aldff) from module b10.
Changing const-value async load to async reset on $verific$last_g_reg$b10.vhd:165$181 ($aldff) from module b10.
Changing const-value async load to async reset on $verific$cts_reg$b10.vhd:165$183 ($aldff) from module b10.
Changing const-value async load to async reset on $verific$ctr_reg$b10.vhd:165$184 ($aldff) from module b10.

yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.
MAX OPT ITERATION = 1

yosys> fsm -encoding binary

3.25. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.25.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking b10.sign as FSM state register:
    Users of register don't seem to benefit from recoding.

yosys> fsm_extract

3.25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..

yosys> fsm_opt

3.25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.

yosys> opt_merge -nomux

3.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.28. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b10..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

yosys> opt_reduce

3.29. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b10.
Performed a total of 0 changes.

yosys> opt_merge

3.30. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
Removed a total of 0 cells.

yosys> opt_share

3.31. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.32. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $verific$voto3_reg$b10.vhd:165$179 ($adff) from module b10 (D = $auto$bmuxmap.cc:58:execute$337, Q = \voto3).
Adding EN signal on $verific$voto2_reg$b10.vhd:165$178 ($adff) from module b10 (D = $auto$bmuxmap.cc:58:execute$356, Q = \voto2).
Adding EN signal on $verific$voto1_reg$b10.vhd:165$177 ($adff) from module b10 (D = $auto$bmuxmap.cc:58:execute$375, Q = \voto1).
Adding EN signal on $verific$voto0_reg$b10.vhd:165$176 ($adff) from module b10 (D = $auto$bmuxmap.cc:58:execute$394, Q = \voto0).
Adding EN signal on $verific$v_out_reg$b10.vhd:165$185 ($adff) from module b10 (D = $auto$bmuxmap.cc:58:execute$204, Q = \v_out).
Adding EN signal on $verific$stato_reg$b10.vhd:165$175 ($adff) from module b10 (D = $auto$bmuxmap.cc:58:execute$261, Q = \stato).
Adding EN signal on $verific$sign_reg$b10.vhd:165$180 ($adff) from module b10 (D = $auto$bmuxmap.cc:58:execute$280, Q = \sign).
Adding EN signal on $verific$last_r_reg$b10.vhd:165$182 ($adff) from module b10 (D = $auto$bmuxmap.cc:58:execute$223, Q = \last_r).
Adding EN signal on $verific$last_g_reg$b10.vhd:165$181 ($adff) from module b10 (D = $auto$bmuxmap.cc:58:execute$242, Q = \last_g).
Adding EN signal on $verific$cts_reg$b10.vhd:165$183 ($adff) from module b10 (D = $auto$bmuxmap.cc:58:execute$318, Q = \cts).
Adding EN signal on $verific$ctr_reg$b10.vhd:165$184 ($adff) from module b10 (D = $auto$bmuxmap.cc:58:execute$299, Q = \ctr).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$494 ($adffe) from module b10.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$494 ($adffe) from module b10.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$494 ($adffe) from module b10.

yosys> opt_clean

3.33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..

yosys> opt_expr

3.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.
<suppressed ~20 debug messages>

yosys> opt_muxtree

3.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b10..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

yosys> opt_reduce

3.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b10.
Performed a total of 0 changes.

yosys> opt_merge

3.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
<suppressed ~156 debug messages>
Removed a total of 52 cells.

yosys> opt_share

3.38. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.39. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..
Removed 0 unused cells and 49 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.

yosys> opt_muxtree

3.42. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b10..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

yosys> opt_reduce

3.43. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b10.
Performed a total of 0 changes.

yosys> opt_merge

3.44. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
Removed a total of 0 cells.

yosys> opt_share

3.45. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.46. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..

yosys> opt_expr

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.
MAX OPT ITERATION = 3

yosys> wreduce -keepdc

3.49. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 7) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$417 ($ne).
Removed top 2 bits (of 6) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$398 ($ne).
Removed top 2 bits (of 5) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$400 ($ne).
Removed top 3 bits (of 5) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$402 ($ne).
Removed top 1 bits (of 5) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$404 ($ne).
Removed top 1 bits (of 3) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$412 ($ne).
Removed top 1 bits (of 4) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$410 ($ne).
Removed top 2 bits (of 7) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$438 ($ne).
Removed top 2 bits (of 4) from mux cell b10.$verific$mux_15$b10.vhd:83$101 ($mux).
Removed top 3 bits (of 4) from mux cell b10.$verific$mux_35$b10.vhd:111$119 ($mux).
Removed top 2 bits (of 4) from mux cell b10.$verific$mux_68$b10.vhd:131$144 ($mux).
Removed top 3 bits (of 4) from mux cell b10.$verific$mux_79$b10.vhd:139$154 ($mux).
Removed top 2 bits (of 4) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$429 ($ne).
Removed top 2 bits (of 4) from mux cell b10.$verific$mux_95$b10.vhd:156$160 ($mux).
Removed top 2 bits (of 6) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$511 ($ne).
Removed top 1 bits (of 2) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$506 ($ne).
Removed top 2 bits (of 3) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$504 ($ne).
Removed top 3 bits (of 4) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$502 ($ne).
Removed top 4 bits (of 5) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$496 ($ne).
Removed top 1 bits (of 5) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$491 ($ne).
Removed top 1 bits (of 4) from mux cell b10.$auto$bmuxmap.cc:60:execute$246 ($mux).
Removed top 1 bits (of 3) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$482 ($ne).
Removed top 1 bits (of 4) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$478 ($ne).
Removed top 1 bits (of 5) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$474 ($ne).
Removed top 1 bits (of 4) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$547 ($ne).
Removed top 1 bits (of 5) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$560 ($ne).
Removed top 1 bits (of 4) from port B of cell b10.$auto$opt_dff.cc:195:make_patterns_logic$562 ($ne).
Removed top 12 bits (of 32) from wire b10.$auto$bmuxmap.cc:58:execute$187.
Removed top 8 bits (of 16) from wire b10.$auto$bmuxmap.cc:58:execute$196.
Removed top 4 bits (of 8) from wire b10.$auto$bmuxmap.cc:58:execute$201.
Removed top 3 bits (of 8) from wire b10.$auto$bmuxmap.cc:58:execute$206.
Removed top 2 bits (of 4) from wire b10.$auto$bmuxmap.cc:58:execute$215.
Removed top 1 bits (of 2) from wire b10.$auto$bmuxmap.cc:58:execute$220.
Removed top 3 bits (of 8) from wire b10.$auto$bmuxmap.cc:58:execute$225.
Removed top 2 bits (of 4) from wire b10.$auto$bmuxmap.cc:58:execute$234.
Removed top 1 bits (of 2) from wire b10.$auto$bmuxmap.cc:58:execute$239.
Removed top 8 bits (of 32) from wire b10.$auto$bmuxmap.cc:58:execute$244.
Removed top 4 bits (of 16) from wire b10.$auto$bmuxmap.cc:58:execute$253.
Removed top 16 bits (of 32) from wire b10.$auto$bmuxmap.cc:58:execute$263.
Removed top 4 bits (of 16) from wire b10.$auto$bmuxmap.cc:58:execute$272.
Removed top 3 bits (of 8) from wire b10.$auto$bmuxmap.cc:58:execute$282.
Removed top 2 bits (of 4) from wire b10.$auto$bmuxmap.cc:58:execute$291.
Removed top 3 bits (of 8) from wire b10.$auto$bmuxmap.cc:58:execute$301.
Removed top 1 bits (of 4) from wire b10.$auto$bmuxmap.cc:58:execute$310.
Removed top 3 bits (of 8) from wire b10.$auto$bmuxmap.cc:58:execute$320.
Removed top 1 bits (of 4) from wire b10.$auto$bmuxmap.cc:58:execute$329.
Removed top 3 bits (of 8) from wire b10.$auto$bmuxmap.cc:58:execute$339.
Removed top 1 bits (of 4) from wire b10.$auto$bmuxmap.cc:58:execute$348.
Removed top 3 bits (of 8) from wire b10.$auto$bmuxmap.cc:58:execute$358.
Removed top 1 bits (of 4) from wire b10.$auto$bmuxmap.cc:58:execute$367.
Removed top 2 bits (of 8) from wire b10.$auto$bmuxmap.cc:58:execute$377.
Removed top 1 bits (of 4) from wire b10.$auto$bmuxmap.cc:58:execute$386.
Removed top 2 bits (of 4) from wire b10.$verific$n101$80.
Removed top 2 bits (of 4) from wire b10.$verific$n144$84.
Removed top 2 bits (of 4) from wire b10.$verific$n28$75.
Removed top 1 bits (of 4) from wire b10.$verific$n82$77.

yosys> peepopt

3.50. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.51. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..
Removed 0 unused cells and 28 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.52. Executing BMUXMAP pass.

yosys> demuxmap

3.53. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.54. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module b10:
  created 0 $alu and 0 $macc cells.

yosys> opt_expr

3.55. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.

yosys> opt_merge -nomux

3.56. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.57. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b10..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

yosys> opt_reduce

3.58. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b10.
Performed a total of 0 changes.

yosys> opt_merge

3.59. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
Removed a total of 0 cells.

yosys> opt_share

3.60. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.61. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.62. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..

yosys> opt_expr

3.63. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.
MAX OPT ITERATION = 1

yosys> stat

3.64. Printing statistics.

=== b10 ===

   Number of wires:                157
   Number of wire bits:            397
   Number of public wires:          21
   Number of public wire bits:      33
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                187
     $adffe                         11
     $and                            8
     $mux                          119
     $ne                            26
     $not                            7
     $reduce_and                    10
     $reduce_bool                    2
     $xor                            4


yosys> memory -nomap

3.65. Executing MEMORY pass.

yosys> opt_mem

3.65.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.65.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.65.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.65.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.65.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.65.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..

yosys> memory_share

3.65.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.65.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.65.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..

yosys> memory_collect

3.65.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.66. Printing statistics.

=== b10 ===

   Number of wires:                157
   Number of wire bits:            397
   Number of public wires:          21
   Number of public wire bits:      33
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                187
     $adffe                         11
     $and                            8
     $mux                          119
     $ne                            26
     $not                            7
     $reduce_and                    10
     $reduce_bool                    2
     $xor                            4


yosys> muxpack

3.67. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~103 debug messages>

yosys> opt_clean

3.68. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..

yosys> pmuxtree

3.69. Executing PMUXTREE pass.

yosys> muxpack

3.70. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~103 debug messages>

yosys> memory_map

3.71. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.72. Printing statistics.

=== b10 ===

   Number of wires:                157
   Number of wire bits:            397
   Number of public wires:          21
   Number of public wire bits:      33
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                187
     $adffe                         11
     $and                            8
     $mux                          119
     $ne                            26
     $not                            7
     $reduce_and                    10
     $reduce_bool                    2
     $xor                            4


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.73. Executing TECHMAP pass (map to technology primitives).

3.73.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.73.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.73.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_bool.
No more expansions possible.
<suppressed ~258 debug messages>

yosys> stat

3.74. Printing statistics.

=== b10 ===

   Number of wires:                279
   Number of wire bits:            662
   Number of public wires:          21
   Number of public wire bits:      33
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                507
     $_AND_                         64
     $_DFFE_PP0P_                   17
     $_MUX_                        206
     $_NOT_                          7
     $_OR_                          93
     $_XOR_                        120


yosys> opt_expr

3.75. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.
<suppressed ~124 debug messages>

yosys> opt_merge -nomux

3.76. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
<suppressed ~357 debug messages>
Removed a total of 119 cells.

yosys> opt_muxtree

3.77. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.78. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b10.
Performed a total of 0 changes.

yosys> opt_merge

3.79. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
Removed a total of 0 cells.

yosys> opt_share

3.80. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.81. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.82. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..
Removed 4 unused cells and 125 unused wires.
<suppressed ~5 debug messages>

yosys> opt_expr

3.83. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.

yosys> opt_muxtree

3.84. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.85. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b10.
Performed a total of 0 changes.

yosys> opt_merge

3.86. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
Removed a total of 0 cells.

yosys> opt_share

3.87. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.88. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.89. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..

yosys> opt_expr

3.90. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.
MAX OPT ITERATION = 2

yosys> opt_expr -full

3.91. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.
<suppressed ~112 debug messages>

yosys> techmap -map +/techmap.v

3.92. Executing TECHMAP pass (map to technology primitives).

3.92.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.92.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.93. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.

yosys> opt_merge -nomux

3.94. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_muxtree

3.95. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.96. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b10.
Performed a total of 0 changes.

yosys> opt_merge

3.97. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.98. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.99. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..
Removed 0 unused cells and 46 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.100. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.
MAX OPT ITERATION = 1

yosys> abc -dff

3.101. Executing ABC pass (technology mapping using ABC).

3.101.1. Summary of detected clock domains:
  117 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$492, arst=\reset, srst={ }
  8 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$507, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$573, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$554, arst=\reset, srst={ }
  14 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$524, arst=\reset, srst={ }
  7 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$434, arst=\reset, srst={ }
  10 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$455, arst=\reset, srst={ }
  11 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$470, arst=\reset, srst={ }
  12 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$485, arst=\reset, srst={ }
  9 cells in clk=\clock, en=$auto$opt_dff.cc:219:make_patterns_logic$413, arst=\reset, srst={ }

3.101.2. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$492, asynchronously reset by \reset
Extracted 117 gates and 140 wires to a netlist network with 21 inputs and 31 outputs.

3.101.2.1. Executing ABC.

3.101.3. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$507, asynchronously reset by \reset
Extracted 8 gates and 16 wires to a netlist network with 8 inputs and 4 outputs.

3.101.3.1. Executing ABC.

3.101.4. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$573, asynchronously reset by \reset
Extracted 9 gates and 19 wires to a netlist network with 10 inputs and 2 outputs.

3.101.4.1. Executing ABC.

3.101.5. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$554, asynchronously reset by \reset
Extracted 9 gates and 18 wires to a netlist network with 9 inputs and 4 outputs.

3.101.5.1. Executing ABC.

3.101.6. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$524, asynchronously reset by \reset
Extracted 14 gates and 26 wires to a netlist network with 12 inputs and 4 outputs.

3.101.6.1. Executing ABC.

3.101.7. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$434, asynchronously reset by \reset
Extracted 7 gates and 14 wires to a netlist network with 7 inputs and 5 outputs.

3.101.7.1. Executing ABC.

3.101.8. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$455, asynchronously reset by \reset
Extracted 10 gates and 19 wires to a netlist network with 9 inputs and 6 outputs.

3.101.8.1. Executing ABC.

3.101.9. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$470, asynchronously reset by \reset
Extracted 11 gates and 22 wires to a netlist network with 11 inputs and 8 outputs.

3.101.9.1. Executing ABC.

3.101.10. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$485, asynchronously reset by \reset
Extracted 12 gates and 25 wires to a netlist network with 13 inputs and 8 outputs.

3.101.10.1. Executing ABC.

3.101.11. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $auto$opt_dff.cc:219:make_patterns_logic$413, asynchronously reset by \reset
Extracted 9 gates and 18 wires to a netlist network with 9 inputs and 5 outputs.

3.101.11.1. Executing ABC.

yosys> abc -dff

3.102. Executing ABC pass (technology mapping using ABC).

3.102.1. Summary of detected clock domains:
  13 cells in clk=\clock, en=$abc$1702$auto$opt_dff.cc:219:make_patterns_logic$434, arst=\reset, srst={ }
  14 cells in clk=\clock, en=$abc$1673$auto$opt_dff.cc:219:make_patterns_logic$554, arst=\reset, srst={ }
  14 cells in clk=\clock, en=$abc$1661$auto$opt_dff.cc:219:make_patterns_logic$573, arst=\reset, srst={ }
  20 cells in clk=\clock, en=$abc$1712$auto$opt_dff.cc:219:make_patterns_logic$455, arst=\reset, srst={ }
  12 cells in clk=\clock, en=$abc$1651$auto$opt_dff.cc:219:make_patterns_logic$507, arst=\reset, srst={ }
  12 cells in clk=\clock, en=$abc$1738$auto$opt_dff.cc:219:make_patterns_logic$485, arst=\reset, srst={ }
  69 cells in clk=\clock, en=$abc$1543$auto$opt_dff.cc:219:make_patterns_logic$492, arst=\reset, srst={ }
  13 cells in clk=\clock, en=$abc$1724$auto$opt_dff.cc:219:make_patterns_logic$470, arst=\reset, srst={ }
  15 cells in clk=\clock, en=$abc$1685$auto$opt_dff.cc:219:make_patterns_logic$524, arst=\reset, srst={ }
  12 cells in clk=\clock, en=$abc$1759$auto$opt_dff.cc:219:make_patterns_logic$413, arst=\reset, srst={ }

3.102.2. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1702$auto$opt_dff.cc:219:make_patterns_logic$434, asynchronously reset by \reset
Extracted 13 gates and 25 wires to a netlist network with 12 inputs and 4 outputs.

3.102.2.1. Executing ABC.

3.102.3. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1673$auto$opt_dff.cc:219:make_patterns_logic$554, asynchronously reset by \reset
Extracted 14 gates and 23 wires to a netlist network with 9 inputs and 3 outputs.

3.102.3.1. Executing ABC.

3.102.4. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1661$auto$opt_dff.cc:219:make_patterns_logic$573, asynchronously reset by \reset
Extracted 14 gates and 27 wires to a netlist network with 13 inputs and 6 outputs.

3.102.4.1. Executing ABC.

3.102.5. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1712$auto$opt_dff.cc:219:make_patterns_logic$455, asynchronously reset by \reset
Extracted 20 gates and 35 wires to a netlist network with 15 inputs and 9 outputs.

3.102.5.1. Executing ABC.

3.102.6. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1651$auto$opt_dff.cc:219:make_patterns_logic$507, asynchronously reset by \reset
Extracted 12 gates and 21 wires to a netlist network with 9 inputs and 6 outputs.

3.102.6.1. Executing ABC.

3.102.7. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1738$auto$opt_dff.cc:219:make_patterns_logic$485, asynchronously reset by \reset
Extracted 12 gates and 24 wires to a netlist network with 12 inputs and 6 outputs.

3.102.7.1. Executing ABC.

3.102.8. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1543$auto$opt_dff.cc:219:make_patterns_logic$492, asynchronously reset by \reset
Extracted 69 gates and 81 wires to a netlist network with 12 inputs and 23 outputs.

3.102.8.1. Executing ABC.

3.102.9. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1724$auto$opt_dff.cc:219:make_patterns_logic$470, asynchronously reset by \reset
Extracted 13 gates and 25 wires to a netlist network with 12 inputs and 7 outputs.

3.102.9.1. Executing ABC.

3.102.10. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1685$auto$opt_dff.cc:219:make_patterns_logic$524, asynchronously reset by \reset
Extracted 15 gates and 27 wires to a netlist network with 12 inputs and 5 outputs.

3.102.10.1. Executing ABC.

3.102.11. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1759$auto$opt_dff.cc:219:make_patterns_logic$413, asynchronously reset by \reset
Extracted 12 gates and 23 wires to a netlist network with 11 inputs and 5 outputs.

3.102.11.1. Executing ABC.

yosys> abc -dff

3.103. Executing ABC pass (technology mapping using ABC).

3.103.1. Summary of detected clock domains:
  15 cells in clk=\clock, en=$abc$1958$abc$1685$auto$opt_dff.cc:219:make_patterns_logic$524, arst=\reset, srst={ }
  12 cells in clk=\clock, en=$abc$1771$abc$1702$auto$opt_dff.cc:219:make_patterns_logic$434, arst=\reset, srst={ }
  13 cells in clk=\clock, en=$abc$1785$abc$1673$auto$opt_dff.cc:219:make_patterns_logic$554, arst=\reset, srst={ }
  13 cells in clk=\clock, en=$abc$1799$abc$1661$auto$opt_dff.cc:219:make_patterns_logic$573, arst=\reset, srst={ }
  14 cells in clk=\clock, en=$abc$1816$abc$1712$auto$opt_dff.cc:219:make_patterns_logic$455, arst=\reset, srst={ }
  10 cells in clk=\clock, en=$abc$1837$abc$1651$auto$opt_dff.cc:219:make_patterns_logic$507, arst=\reset, srst={ }
  12 cells in clk=\clock, en=$abc$1851$abc$1738$auto$opt_dff.cc:219:make_patterns_logic$485, arst=\reset, srst={ }
  70 cells in clk=\clock, en=$abc$1871$abc$1543$auto$opt_dff.cc:219:make_patterns_logic$492, arst=\reset, srst={ }
  18 cells in clk=\clock, en=$abc$1944$abc$1724$auto$opt_dff.cc:219:make_patterns_logic$470, arst=\reset, srst={ }
  13 cells in clk=\clock, en=$abc$1976$abc$1759$auto$opt_dff.cc:219:make_patterns_logic$413, arst=\reset, srst={ }

3.103.2. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1958$abc$1685$auto$opt_dff.cc:219:make_patterns_logic$524, asynchronously reset by \reset
Extracted 15 gates and 27 wires to a netlist network with 12 inputs and 5 outputs.

3.103.2.1. Executing ABC.

3.103.3. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1771$abc$1702$auto$opt_dff.cc:219:make_patterns_logic$434, asynchronously reset by \reset
Extracted 12 gates and 24 wires to a netlist network with 12 inputs and 4 outputs.

3.103.3.1. Executing ABC.

3.103.4. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1785$abc$1673$auto$opt_dff.cc:219:make_patterns_logic$554, asynchronously reset by \reset
Extracted 13 gates and 22 wires to a netlist network with 9 inputs and 4 outputs.

3.103.4.1. Executing ABC.

3.103.5. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1799$abc$1661$auto$opt_dff.cc:219:make_patterns_logic$573, asynchronously reset by \reset
Extracted 13 gates and 26 wires to a netlist network with 13 inputs and 5 outputs.

3.103.5.1. Executing ABC.

3.103.6. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1816$abc$1712$auto$opt_dff.cc:219:make_patterns_logic$455, asynchronously reset by \reset
Extracted 14 gates and 28 wires to a netlist network with 14 inputs and 5 outputs.

3.103.6.1. Executing ABC.

3.103.7. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1837$abc$1651$auto$opt_dff.cc:219:make_patterns_logic$507, asynchronously reset by \reset
Extracted 10 gates and 19 wires to a netlist network with 9 inputs and 4 outputs.

3.103.7.1. Executing ABC.

3.103.8. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1851$abc$1738$auto$opt_dff.cc:219:make_patterns_logic$485, asynchronously reset by \reset
Extracted 12 gates and 25 wires to a netlist network with 13 inputs and 6 outputs.

3.103.8.1. Executing ABC.

3.103.9. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1871$abc$1543$auto$opt_dff.cc:219:make_patterns_logic$492, asynchronously reset by \reset
Extracted 70 gates and 81 wires to a netlist network with 11 inputs and 24 outputs.

3.103.9.1. Executing ABC.

3.103.10. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1944$abc$1724$auto$opt_dff.cc:219:make_patterns_logic$470, asynchronously reset by \reset
Extracted 18 gates and 33 wires to a netlist network with 15 inputs and 9 outputs.

3.103.10.1. Executing ABC.

3.103.11. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1976$abc$1759$auto$opt_dff.cc:219:make_patterns_logic$413, asynchronously reset by \reset
Extracted 13 gates and 25 wires to a netlist network with 12 inputs and 6 outputs.

3.103.11.1. Executing ABC.

yosys> abc -dff

3.104. Executing ABC pass (technology mapping using ABC).

3.104.1. Summary of detected clock domains:
  17 cells in clk=\clock, en=$abc$2170$abc$1944$abc$1724$auto$opt_dff.cc:219:make_patterns_logic$470, arst=\reset, srst={ }
  14 cells in clk=\clock, en=$abc$2008$abc$1771$abc$1702$auto$opt_dff.cc:219:make_patterns_logic$434, arst=\reset, srst={ }
  11 cells in clk=\clock, en=$abc$2022$abc$1785$abc$1673$auto$opt_dff.cc:219:make_patterns_logic$554, arst=\reset, srst={ }
  12 cells in clk=\clock, en=$abc$2037$abc$1799$abc$1661$auto$opt_dff.cc:219:make_patterns_logic$573, arst=\reset, srst={ }
  14 cells in clk=\clock, en=$abc$2053$abc$1816$abc$1712$auto$opt_dff.cc:219:make_patterns_logic$455, arst=\reset, srst={ }
  12 cells in clk=\clock, en=$abc$2069$abc$1837$abc$1651$auto$opt_dff.cc:219:make_patterns_logic$507, arst=\reset, srst={ }
  13 cells in clk=\clock, en=$abc$2081$abc$1851$abc$1738$auto$opt_dff.cc:219:make_patterns_logic$485, arst=\reset, srst={ }
  65 cells in clk=\clock, en=$abc$2102$abc$1871$abc$1543$auto$opt_dff.cc:219:make_patterns_logic$492, arst=\reset, srst={ }
  14 cells in clk=\clock, en=$abc$1990$abc$1958$abc$1685$auto$opt_dff.cc:219:make_patterns_logic$524, arst=\reset, srst={ }
  13 cells in clk=\clock, en=$abc$2189$abc$1976$abc$1759$auto$opt_dff.cc:219:make_patterns_logic$413, arst=\reset, srst={ }

3.104.2. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2170$abc$1944$abc$1724$auto$opt_dff.cc:219:make_patterns_logic$470, asynchronously reset by \reset
Extracted 17 gates and 29 wires to a netlist network with 12 inputs and 7 outputs.

3.104.2.1. Executing ABC.

3.104.3. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2008$abc$1771$abc$1702$auto$opt_dff.cc:219:make_patterns_logic$434, asynchronously reset by \reset
Extracted 14 gates and 25 wires to a netlist network with 11 inputs and 6 outputs.

3.104.3.1. Executing ABC.

3.104.4. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2022$abc$1785$abc$1673$auto$opt_dff.cc:219:make_patterns_logic$554, asynchronously reset by \reset
Extracted 11 gates and 20 wires to a netlist network with 9 inputs and 2 outputs.

3.104.4.1. Executing ABC.

3.104.5. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2037$abc$1799$abc$1661$auto$opt_dff.cc:219:make_patterns_logic$573, asynchronously reset by \reset
Extracted 12 gates and 24 wires to a netlist network with 12 inputs and 4 outputs.

3.104.5.1. Executing ABC.

3.104.6. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2053$abc$1816$abc$1712$auto$opt_dff.cc:219:make_patterns_logic$455, asynchronously reset by \reset
Extracted 14 gates and 28 wires to a netlist network with 14 inputs and 5 outputs.

3.104.6.1. Executing ABC.

3.104.7. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2069$abc$1837$abc$1651$auto$opt_dff.cc:219:make_patterns_logic$507, asynchronously reset by \reset
Extracted 12 gates and 21 wires to a netlist network with 9 inputs and 6 outputs.

3.104.7.1. Executing ABC.

3.104.8. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2081$abc$1851$abc$1738$auto$opt_dff.cc:219:make_patterns_logic$485, asynchronously reset by \reset
Extracted 13 gates and 26 wires to a netlist network with 13 inputs and 6 outputs.

3.104.8.1. Executing ABC.

3.104.9. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2102$abc$1871$abc$1543$auto$opt_dff.cc:219:make_patterns_logic$492, asynchronously reset by \reset
Extracted 65 gates and 77 wires to a netlist network with 12 inputs and 24 outputs.

3.104.9.1. Executing ABC.

3.104.10. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$1990$abc$1958$abc$1685$auto$opt_dff.cc:219:make_patterns_logic$524, asynchronously reset by \reset
Extracted 14 gates and 26 wires to a netlist network with 12 inputs and 4 outputs.

3.104.10.1. Executing ABC.

3.104.11. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock, enabled by $abc$2189$abc$1976$abc$1759$auto$opt_dff.cc:219:make_patterns_logic$413, asynchronously reset by \reset
Extracted 13 gates and 25 wires to a netlist network with 12 inputs and 6 outputs.

3.104.11.1. Executing ABC.

yosys> opt_ffinv

3.105. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.106. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.
<suppressed ~1 debug messages>

yosys> opt_merge -nomux

3.107. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_muxtree

3.108. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.109. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b10.
Performed a total of 0 changes.

yosys> opt_merge

3.110. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
Removed a total of 0 cells.

yosys> opt_share

3.111. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.112. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.113. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..
Removed 0 unused cells and 1261 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.114. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.
MAX OPT ITERATION = 1

yosys> bmuxmap

3.115. Executing BMUXMAP pass.

yosys> demuxmap

3.116. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_dEgkaF/abc_tmp_1.scr

3.117. Executing ABC pass (technology mapping using ABC).

3.117.1. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Extracted 165 gates and 188 wires to a netlist network with 23 inputs and 20 outputs.

3.117.1.1. Executing ABC.
DE:   #PIs =  23  #Luts =    35  Max Lvl =   2  Avg Lvl =   1.45  [   0.09 sec. at Pass 0]{firstMap}
DE:   #PIs =  23  #Luts =    28  Max Lvl =   3  Avg Lvl =   1.70  [   0.27 sec. at Pass 1]{initMapFlow}
DE:   #PIs =  23  #Luts =    28  Max Lvl =   3  Avg Lvl =   1.70  [   0.23 sec. at Pass 2]{map}
DE:   #PIs =  23  #Luts =    28  Max Lvl =   2  Avg Lvl =   1.50  [   0.46 sec. at Pass 3]{postMap}
DE:   #PIs =  23  #Luts =    28  Max Lvl =   2  Avg Lvl =   1.50  [   0.66 sec. at Pass 4]{map}
DE:   #PIs =  23  #Luts =    28  Max Lvl =   2  Avg Lvl =   1.50  [   1.02 sec. at Pass 5]{postMap}
DE:   #PIs =  23  #Luts =    28  Max Lvl =   2  Avg Lvl =   1.50  [   1.97 sec. at Pass 6]{map}
DE:   #PIs =  23  #Luts =    28  Max Lvl =   2  Avg Lvl =   1.50  [   2.84 sec. at Pass 7]{pushMap}
DE:   #PIs =  23  #Luts =    28  Max Lvl =   2  Avg Lvl =   1.50  [   2.78 sec. at Pass 8]{finalMap}

yosys> opt_expr

3.118. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.

yosys> opt_merge -nomux

3.119. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.120. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.121. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b10.
Performed a total of 0 changes.

yosys> opt_merge

3.122. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
Removed a total of 0 cells.

yosys> opt_share

3.123. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.124. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.125. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..
Removed 0 unused cells and 188 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.126. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.127. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.128. Printing statistics.

=== b10 ===

   Number of wires:                 53
   Number of wire bits:             65
   Number of public wires:          19
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 45
     $_DFFE_PP0P_                   17
     $lut                           28


yosys> shregmap -minlen 8 -maxlen 20

3.129. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.130. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.131. Printing statistics.

=== b10 ===

   Number of wires:                 53
   Number of wire bits:             65
   Number of public wires:          19
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 45
     $_DFFE_PP0P_                   17
     $lut                           28


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.132. Executing TECHMAP pass (map to technology primitives).

3.132.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.132.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.132.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~198 debug messages>

yosys> opt_expr -mux_undef

3.133. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.
<suppressed ~849 debug messages>

yosys> simplemap

3.134. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.135. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.

yosys> opt_merge

3.136. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
<suppressed ~192 debug messages>
Removed a total of 64 cells.

yosys> opt_dff -nodffe -nosdff

3.137. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.138. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..
Removed 0 unused cells and 153 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.139. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.
<suppressed ~12 debug messages>

yosys> opt_merge -nomux

3.140. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.141. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.142. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b10.
Performed a total of 0 changes.

yosys> opt_merge

3.143. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
Removed a total of 0 cells.

yosys> opt_share

3.144. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.145. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.146. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.147. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_dEgkaF/abc_tmp_2.scr

3.148. Executing ABC pass (technology mapping using ABC).

3.148.1. Extracting gate netlist of module `\b10' to `<abc-temp-dir>/input.blif'..
Extracted 144 gates and 170 wires to a netlist network with 24 inputs and 21 outputs.

3.148.1.1. Executing ABC.
DE:   #PIs =  24  #Luts =    29  Max Lvl =   2  Avg Lvl =   1.38  [   0.23 sec. at Pass 0]{firstMap}
DE:   #PIs =  24  #Luts =    29  Max Lvl =   2  Avg Lvl =   1.38  [   0.61 sec. at Pass 1]{initMapFlow}
DE:   #PIs =  24  #Luts =    29  Max Lvl =   2  Avg Lvl =   1.38  [   0.30 sec. at Pass 2]{map}
DE:   #PIs =  24  #Luts =    29  Max Lvl =   2  Avg Lvl =   1.38  [   0.52 sec. at Pass 3]{postMap}
DE:   #PIs =  24  #Luts =    29  Max Lvl =   2  Avg Lvl =   1.38  [   0.43 sec. at Pass 4]{map}
DE:   #PIs =  24  #Luts =    29  Max Lvl =   2  Avg Lvl =   1.38  [   1.35 sec. at Pass 5]{postMap}
DE:   #PIs =  24  #Luts =    29  Max Lvl =   2  Avg Lvl =   1.38  [   2.99 sec. at Pass 6]{pushMap}
DE:   #PIs =  24  #Luts =    29  Max Lvl =   2  Avg Lvl =   1.38  [   2.73 sec. at Pass 7]{finalMap}

yosys> opt_expr

3.149. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.

yosys> opt_merge -nomux

3.150. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.151. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \b10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.152. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \b10.
Performed a total of 0 changes.

yosys> opt_merge

3.153. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\b10'.
Removed a total of 0 cells.

yosys> opt_share

3.154. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.155. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.156. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..
Removed 0 unused cells and 134 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.157. Executing OPT_EXPR pass (perform const folding).
Optimizing module b10.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.158. Executing HIERARCHY pass (managing design hierarchy).

3.158.1. Analyzing design hierarchy..
Top module:  \b10

3.158.2. Analyzing design hierarchy..
Top module:  \b10
Removed 0 unused modules.

yosys> stat

3.159. Printing statistics.

=== b10 ===

   Number of wires:                 54
   Number of wire bits:             66
   Number of public wires:          19
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 46
     $lut                           29
     dffsre                         17


yosys> opt_clean -purge

3.160. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \b10..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.161. Executing Verilog backend.
Dumping module `\b10'.

End of script. Logfile hash: c41110046d, CPU: user 0.84s system 0.04s, MEM: 38.08 MB peak
Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)
Time spent: 98% 6x abc (38 sec), 0% 26x opt_expr (0 sec), ...
real 33.54
user 31.43
sys 8.20
