
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.92
 Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl sha256_control.vhd sha256_hash_core.vhd sha256_Ki_rom.vhd sha256_Kt_rom.vhd sha256_msg_sch.vhd sha256_padding.vhd sha256_regs.vhd gv_sha256.vhd

yosys> verific -vhdl sha256_control.vhd sha256_hash_core.vhd sha256_Ki_rom.vhd sha256_Kt_rom.vhd sha256_msg_sch.vhd sha256_padding.vhd sha256_regs.vhd gv_sha256.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_control.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_1164' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_1164.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.textio' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/textio.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.numeric_std' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/numeric_std.vdb'
VERIFIC-INFO [VHDL-1012] sha256_control.vhd:250: analyzing entity 'sha256_control'
VERIFIC-INFO [VHDL-1010] sha256_control.vhd:278: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_hash_core.vhd'
VERIFIC-INFO [VHDL-1012] sha256_hash_core.vhd:60: analyzing entity 'sha256_hash_core'
VERIFIC-INFO [VHDL-1010] sha256_hash_core.vhd:86: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_Ki_rom.vhd'
VERIFIC-INFO [VHDL-1012] sha256_Ki_rom.vhd:56: analyzing entity 'sha256_ki_rom'
VERIFIC-INFO [VHDL-1010] sha256_Ki_rom.vhd:69: analyzing architecture 'behavioral'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_Kt_rom.vhd'
VERIFIC-INFO [VHDL-1012] sha256_Kt_rom.vhd:59: analyzing entity 'sha256_kt_rom'
VERIFIC-INFO [VHDL-1010] sha256_Kt_rom.vhd:66: analyzing architecture 'behavioral'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_msg_sch.vhd'
VERIFIC-INFO [VHDL-1012] sha256_msg_sch.vhd:54: analyzing entity 'sha256_msg_sch'
VERIFIC-INFO [VHDL-1010] sha256_msg_sch.vhd:64: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_padding.vhd'
VERIFIC-INFO [VHDL-1012] sha256_padding.vhd:58: analyzing entity 'sha256_padding'
VERIFIC-INFO [VHDL-1010] sha256_padding.vhd:70: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'sha256_regs.vhd'
VERIFIC-INFO [VHDL-1012] sha256_regs.vhd:55: analyzing entity 'sha256_regs'
VERIFIC-INFO [VHDL-1010] sha256_regs.vhd:95: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'gv_sha256.vhd'
VERIFIC-INFO [VHDL-1012] gv_sha256.vhd:80: analyzing entity 'gv_sha256'
VERIFIC-INFO [VHDL-1010] gv_sha256.vhd:108: analyzing architecture 'rtl'

yosys> synth_rs -top gv_sha256 -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.79

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top gv_sha256

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] gv_sha256.vhd:80: processing 'gv_sha256(rtl)'
VERIFIC-INFO [VHDL-1067] sha256_control.vhd:250: processing 'sha256_control(rtl)'
VERIFIC-INFO [VHDL-1172] sha256_control.vhd:553: 'others' clause is never selected
VERIFIC-INFO [VHDL-1067] sha256_padding.vhd:58: processing 'sha256_padding(rtl)'
VERIFIC-INFO [VHDL-1067] sha256_msg_sch.vhd:54: processing 'sha256_msg_sch(rtl)'
VERIFIC-INFO [VHDL-1067] sha256_hash_core.vhd:60: processing 'sha256_hash_core(rtl)'
VERIFIC-INFO [VHDL-1067] sha256_regs.vhd:55: processing 'sha256_regs(rtl)'
VERIFIC-INFO [VHDL-1067] sha256_Kt_rom.vhd:59: processing 'sha256_kt_rom(behavioral)'
VERIFIC-INFO [VHDL-1067] sha256_Ki_rom.vhd:56: processing 'sha256_ki_rom(behavioral)'
Importing module gv_sha256.
Importing module sha256_control(rtl).
Importing module sha256_hash_core(rtl).
Importing module sha256_ki_rom(behavioral).
Importing module sha256_kt_rom(behavioral).
Importing module sha256_msg_sch(rtl).
Importing module sha256_padding(rtl).
Importing module sha256_regs(rtl).

3.4.1. Analyzing design hierarchy..
Top module:  \gv_sha256
Used module:     \sha256_ki_rom(behavioral)
Used module:     \sha256_kt_rom(behavioral)
Used module:     \sha256_regs(rtl)
Used module:     \sha256_hash_core(rtl)
Used module:     \sha256_msg_sch(rtl)
Used module:     \sha256_padding(rtl)
Used module:     \sha256_control(rtl)

3.4.2. Analyzing design hierarchy..
Top module:  \gv_sha256
Used module:     \sha256_ki_rom(behavioral)
Used module:     \sha256_kt_rom(behavioral)
Used module:     \sha256_regs(rtl)
Used module:     \sha256_hash_core(rtl)
Used module:     \sha256_msg_sch(rtl)
Used module:     \sha256_padding(rtl)
Used module:     \sha256_control(rtl)
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha256_regs(rtl).
Optimizing module sha256_padding(rtl).
Optimizing module sha256_msg_sch(rtl).
Optimizing module sha256_kt_rom(behavioral).
<suppressed ~1 debug messages>
Optimizing module sha256_ki_rom(behavioral).
<suppressed ~8 debug messages>
Optimizing module sha256_hash_core(rtl).
Optimizing module sha256_control(rtl).
<suppressed ~16 debug messages>
Optimizing module gv_sha256.

yosys> bmuxmap

3.6. Executing BMUXMAP pass.

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).
Deleting now unused module sha256_control(rtl).
Deleting now unused module sha256_hash_core(rtl).
Deleting now unused module sha256_ki_rom(behavioral).
Deleting now unused module sha256_kt_rom(behavioral).
Deleting now unused module sha256_msg_sch(rtl).
Deleting now unused module sha256_padding(rtl).
Deleting now unused module sha256_regs(rtl).
<suppressed ~7 debug messages>

yosys> bmuxmap

3.9. Executing BMUXMAP pass.

yosys> demuxmap

3.10. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.11. Executing TRIBUF pass.

yosys> deminout

3.12. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~30 debug messages>

yosys> opt_clean

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 284 unused wires.
<suppressed ~202 debug messages>

yosys> check

3.15. Executing CHECK pass (checking for obvious problems).
Checking module gv_sha256...
Found and reported 0 problems.

yosys> opt_expr

3.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge -nomux

3.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.18. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $flatten\Inst_sha256_control.$auto$bmuxmap.cc:60:execute$1205: \Inst_sha256_control.hash_control_st_reg -> 3'110
      Replacing known input bits on port B of cell $flatten\Inst_sha256_control.$auto$bmuxmap.cc:60:execute$1204: \Inst_sha256_control.hash_control_st_reg -> 3'101
      Replacing known input bits on port A of cell $flatten\Inst_sha256_control.$verific$mux_116$sha256_control.vhd:537$278: \Inst_sha256_control.hash_control_st_reg -> 3'100
      Replacing known input bits on port A of cell $flatten\Inst_sha256_control.$verific$mux_81$sha256_control.vhd:492$263: \Inst_sha256_control.hash_control_st_reg -> 3'010
      Replacing known input bits on port A of cell $flatten\Inst_sha256_control.$verific$mux_74$sha256_control.vhd:481$260: \Inst_sha256_control.hash_control_st_reg -> 3'001
      Replacing known input bits on port A of cell $flatten\Inst_sha256_control.$verific$mux_72$sha256_control.vhd:480$258: \Inst_sha256_control.hash_control_st_reg -> 3'001
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~66 debug messages>

yosys> opt_reduce

3.19. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.20. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~117 debug messages>
Removed a total of 39 cells.

yosys> opt_share

3.21. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.22. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H7_reg$sha256_regs.vhd:144$1048 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H6_reg$sha256_regs.vhd:144$1047 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H5_reg$sha256_regs.vhd:144$1046 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H4_reg$sha256_regs.vhd:144$1045 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H3_reg$sha256_regs.vhd:144$1044 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H2_reg$sha256_regs.vhd:144$1043 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H1_reg$sha256_regs.vhd:144$1042 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_regs.$verific$reg_H0_reg$sha256_regs.vhd:144$1041 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r9_reg$sha256_msg_sch.vhd:141$865 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r8_reg$sha256_msg_sch.vhd:141$864 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r7_reg$sha256_msg_sch.vhd:141$863 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r6_reg$sha256_msg_sch.vhd:141$862 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r5_reg$sha256_msg_sch.vhd:141$861 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r4_reg$sha256_msg_sch.vhd:141$860 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r3_reg$sha256_msg_sch.vhd:141$859 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r2_reg$sha256_msg_sch.vhd:141$858 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r1_reg$sha256_msg_sch.vhd:141$857 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r15_reg$sha256_msg_sch.vhd:141$871 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r14_reg$sha256_msg_sch.vhd:141$870 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r13_reg$sha256_msg_sch.vhd:141$869 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r12_reg$sha256_msg_sch.vhd:141$868 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r11_reg$sha256_msg_sch.vhd:141$867 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r10_reg$sha256_msg_sch.vhd:141$866 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_msg_sch.$verific$r0_reg$sha256_msg_sch.vhd:141$856 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_h_reg$sha256_hash_core.vhd:142$441 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_g_reg$sha256_hash_core.vhd:142$440 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_f_reg$sha256_hash_core.vhd:142$439 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_e_reg$sha256_hash_core.vhd:142$438 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_d_reg$sha256_hash_core.vhd:142$437 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_c_reg$sha256_hash_core.vhd:142$436 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_b_reg$sha256_hash_core.vhd:142$435 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_hash_core.$verific$reg_a_reg$sha256_hash_core.vhd:142$434 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_control.$verific$st_cnt_reg_reg$sha256_control.vhd:403$243 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_control.$verific$msg_bit_cnt_reg_reg$sha256_control.vhd:390$236 ($aldff) from module gv_sha256.
Removing never-active async load on $flatten\Inst_sha256_control.$verific$hash_control_st_reg_reg$sha256_control.vhd:365$221 ($aldff) from module gv_sha256.

yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 13 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_muxtree

3.25. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~70 debug messages>

yosys> opt_reduce

3.26. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.28. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.29. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr

3.31. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
MAX OPT ITERATION = 2

yosys> fsm -encoding binary

3.32. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.32.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking gv_sha256.Inst_sha256_control.hash_control_st_reg as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

yosys> fsm_extract

3.32.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.32.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> fsm_opt

3.32.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.32.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.32.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.32.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge -nomux

3.34. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~70 debug messages>

yosys> opt_reduce

3.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.38. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.39. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H7_reg$sha256_regs.vhd:144$1048 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.H_i, Q = \Inst_sha256_regs.reg_H7).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H6_reg$sha256_regs.vhd:144$1047 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.G_i, Q = \Inst_sha256_regs.reg_H6).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H5_reg$sha256_regs.vhd:144$1046 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.F_i, Q = \Inst_sha256_regs.reg_H5).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H4_reg$sha256_regs.vhd:144$1045 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.E_i, Q = \Inst_sha256_regs.reg_H4).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H3_reg$sha256_regs.vhd:144$1044 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.D_i, Q = \Inst_sha256_regs.reg_H3).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H2_reg$sha256_regs.vhd:144$1043 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.C_i, Q = \Inst_sha256_regs.reg_H2).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H1_reg$sha256_regs.vhd:144$1042 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.B_i, Q = \Inst_sha256_regs.reg_H1).
Adding EN signal on $flatten\Inst_sha256_regs.$verific$reg_H0_reg$sha256_regs.vhd:144$1041 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.A_i, Q = \Inst_sha256_regs.reg_H0).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r9_reg$sha256_msg_sch.vhd:141$865 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r10, Q = \Inst_sha256_msg_sch.r9).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r8_reg$sha256_msg_sch.vhd:141$864 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r9, Q = \Inst_sha256_msg_sch.r8).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r7_reg$sha256_msg_sch.vhd:141$863 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r8, Q = \Inst_sha256_msg_sch.r7).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r6_reg$sha256_msg_sch.vhd:141$862 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r7, Q = \Inst_sha256_msg_sch.r6).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r5_reg$sha256_msg_sch.vhd:141$861 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r6, Q = \Inst_sha256_msg_sch.r5).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r4_reg$sha256_msg_sch.vhd:141$860 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r5, Q = \Inst_sha256_msg_sch.r4).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r3_reg$sha256_msg_sch.vhd:141$859 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r4, Q = \Inst_sha256_msg_sch.r3).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r2_reg$sha256_msg_sch.vhd:141$858 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r3, Q = \Inst_sha256_msg_sch.r2).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r1_reg$sha256_msg_sch.vhd:141$857 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r2, Q = \Inst_sha256_msg_sch.r1).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r15_reg$sha256_msg_sch.vhd:141$871 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r0, Q = \Inst_sha256_msg_sch.r15).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r14_reg$sha256_msg_sch.vhd:141$870 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r15, Q = \Inst_sha256_msg_sch.r14).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r13_reg$sha256_msg_sch.vhd:141$869 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r14, Q = \Inst_sha256_msg_sch.r13).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r12_reg$sha256_msg_sch.vhd:141$868 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r13, Q = \Inst_sha256_msg_sch.r12).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r11_reg$sha256_msg_sch.vhd:141$867 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r12, Q = \Inst_sha256_msg_sch.r11).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r10_reg$sha256_msg_sch.vhd:141$866 ($dff) from module gv_sha256 (D = \Inst_sha256_msg_sch.r11, Q = \Inst_sha256_msg_sch.r10).
Adding EN signal on $flatten\Inst_sha256_msg_sch.$verific$r0_reg$sha256_msg_sch.vhd:141$856 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.Wt_i, Q = \Inst_sha256_msg_sch.r0).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_h_reg$sha256_hash_core.vhd:142$441 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_h, Q = \Inst_sha256_hash_core.reg_h).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_g_reg$sha256_hash_core.vhd:142$440 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_g, Q = \Inst_sha256_hash_core.reg_g).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_f_reg$sha256_hash_core.vhd:142$439 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_f, Q = \Inst_sha256_hash_core.reg_f).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_e_reg$sha256_hash_core.vhd:142$438 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_e, Q = \Inst_sha256_hash_core.reg_e).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_d_reg$sha256_hash_core.vhd:142$437 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_d, Q = \Inst_sha256_hash_core.reg_d).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_c_reg$sha256_hash_core.vhd:142$436 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_c, Q = \Inst_sha256_hash_core.reg_c).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_b_reg$sha256_hash_core.vhd:142$435 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_b, Q = \Inst_sha256_hash_core.reg_b).
Adding EN signal on $flatten\Inst_sha256_hash_core.$verific$reg_a_reg$sha256_hash_core.vhd:142$434 ($dff) from module gv_sha256 (D = \Inst_sha256_hash_core.next_reg_a, Q = \Inst_sha256_hash_core.reg_a).
Adding EN signal on $flatten\Inst_sha256_control.$verific$st_cnt_reg_reg$sha256_control.vhd:403$243 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n394$172, Q = \Inst_sha256_control.st_cnt_reg).
Adding EN signal on $flatten\Inst_sha256_control.$verific$sha_last_blk_reg_reg$sha256_control.vhd:377$229 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n37$116, Q = \Inst_sha256_control.sha_last_blk_reg).
Adding EN signal on $flatten\Inst_sha256_control.$verific$padding_reg_reg$sha256_control.vhd:377$230 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n39$118, Q = \Inst_sha256_control.padding_reg).
Adding EN signal on $flatten\Inst_sha256_control.$verific$pad_one_reg_reg$sha256_control.vhd:417$249 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n414$125, Q = \Inst_sha256_control.pad_one_reg).
Adding EN signal on $flatten\Inst_sha256_control.$verific$msg_bit_cnt_reg_reg$sha256_control.vhd:390$236 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n238$168, Q = \Inst_sha256_control.msg_bit_cnt_reg).
Adding EN signal on $flatten\Inst_sha256_control.$verific$hash_control_st_reg_reg$sha256_control.vhd:365$221 ($dff) from module gv_sha256 (D = $flatten\Inst_sha256_control.$verific$n24$164, Q = \Inst_sha256_control.hash_control_st_reg).

yosys> opt_clean

3.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 32 unused cells and 32 unused wires.
<suppressed ~33 debug messages>

yosys> opt_expr

3.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~7 debug messages>

yosys> opt_muxtree

3.42. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

yosys> opt_reduce

3.43. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.44. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_share

3.45. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.46. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_muxtree

3.49. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

yosys> opt_reduce

3.50. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.52. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.53. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr

3.55. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
MAX OPT ITERATION = 3

yosys> wreduce -keepdc

3.56. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port A of cell gv_sha256.$flatten\Inst_sha256_padding.$verific$equal_35$sha256_padding.vhd:138$968 ($eq).
Removed top 3 bits (of 32) from port A of cell gv_sha256.$flatten\Inst_sha256_msg_sch.$verific$xor_75$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:3548$896 ($xor).
Removed top 10 bits (of 32) from port A of cell gv_sha256.$flatten\Inst_sha256_msg_sch.$verific$xor_80$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:3548$901 ($xor).
Removed top 3 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_10$sha256_Kt_rom.vhd:84$655 ($eq).
Removed top 3 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_11$sha256_Kt_rom.vhd:85$656 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_12$sha256_Kt_rom.vhd:86$657 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_13$sha256_Kt_rom.vhd:87$658 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_14$sha256_Kt_rom.vhd:88$659 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_15$sha256_Kt_rom.vhd:89$660 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_16$sha256_Kt_rom.vhd:90$661 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_17$sha256_Kt_rom.vhd:91$662 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_18$sha256_Kt_rom.vhd:92$663 ($eq).
Removed top 2 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_19$sha256_Kt_rom.vhd:93$664 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_20$sha256_Kt_rom.vhd:94$665 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_21$sha256_Kt_rom.vhd:95$666 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_22$sha256_Kt_rom.vhd:96$667 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_23$sha256_Kt_rom.vhd:97$668 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_24$sha256_Kt_rom.vhd:98$669 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_25$sha256_Kt_rom.vhd:99$670 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_26$sha256_Kt_rom.vhd:100$671 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_27$sha256_Kt_rom.vhd:101$672 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_28$sha256_Kt_rom.vhd:102$673 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_29$sha256_Kt_rom.vhd:103$674 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_30$sha256_Kt_rom.vhd:104$675 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_31$sha256_Kt_rom.vhd:105$676 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_32$sha256_Kt_rom.vhd:106$677 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_33$sha256_Kt_rom.vhd:107$678 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_34$sha256_Kt_rom.vhd:108$679 ($eq).
Removed top 1 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_35$sha256_Kt_rom.vhd:109$680 ($eq).
Removed top 5 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_5$sha256_Kt_rom.vhd:79$650 ($eq).
Removed top 4 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_6$sha256_Kt_rom.vhd:80$651 ($eq).
Removed top 4 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_7$sha256_Kt_rom.vhd:81$652 ($eq).
Removed top 3 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_8$sha256_Kt_rom.vhd:82$653 ($eq).
Removed top 3 bits (of 6) from port A of cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$equal_9$sha256_Kt_rom.vhd:83$654 ($eq).
Removed top 1 bits (of 32) from mux cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$mux_68$sha256_Kt_rom.vhd:139$712 ($mux).
Removed top 1 bits (of 32) from mux cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$mux_69$sha256_Kt_rom.vhd:138$713 ($mux).
Removed top 1 bits (of 32) from mux cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$mux_70$sha256_Kt_rom.vhd:137$714 ($mux).
Removed top 1 bits (of 32) from mux cell gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$mux_71$sha256_Kt_rom.vhd:136$715 ($mux).
Removed top 1 bits (of 5) from port B of cell gv_sha256.$auto$opt_dff.cc:195:make_patterns_logic$1323 ($ne).
Removed top 1 bits (of 5) from port B of cell gv_sha256.$auto$opt_dff.cc:195:make_patterns_logic$1325 ($ne).
Removed top 2 bits (of 3) from port B of cell gv_sha256.$auto$opt_dff.cc:195:make_patterns_logic$1327 ($ne).
Removed top 2 bits (of 6) from mux cell gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:60:execute$1098 ($mux).
Removed top 1 bits (of 6) from mux cell gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:60:execute$1099 ($mux).
Removed top 1 bits (of 6) from mux cell gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:60:execute$1101 ($mux).
Removed top 1 bits (of 6) from mux cell gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:60:execute$1107 ($mux).
Removed top 1 bits (of 6) from mux cell gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:60:execute$1108 ($mux).
Removed top 1 bits (of 6) from mux cell gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:60:execute$1112 ($mux).
Removed top 1 bits (of 4) from mux cell gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:60:execute$1118 ($mux).
Removed top 2 bits (of 3) from port B of cell gv_sha256.$auto$opt_dff.cc:195:make_patterns_logic$1334 ($ne).
Removed top 58 bits (of 64) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$add_175$sha256_control.vhd:607$321 ($add).
Removed top 6 bits (of 7) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$add_184$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$327 ($add).
Removed top 3 bits (of 7) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$equal_108$sha256_control.vhd:532$272 ($eq).
Removed top 3 bits (of 7) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$equal_112$sha256_control.vhd:535$275 ($eq).
Removed top 3 bits (of 7) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$equal_70$sha256_control.vhd:478$256 ($eq).
Removed top 1 bits (of 7) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$equal_79$sha256_control.vhd:490$261 ($eq).
Removed top 2 bits (of 7) from port B of cell gv_sha256.$flatten\Inst_sha256_control.$verific$equal_93$sha256_control.vhd:513$267 ($eq).
Removed top 1 bits (of 2) from mux cell gv_sha256.$flatten\Inst_sha256_control.$verific$mux_114$sha256_control.vhd:537$276 ($mux).
Removed top 1 bits (of 3) from mux cell gv_sha256.$flatten\Inst_sha256_control.$verific$mux_72$sha256_control.vhd:480$258 ($mux).
Removed top 2 bits (of 3) from mux cell gv_sha256.$flatten\Inst_sha256_control.$verific$mux_81$sha256_control.vhd:492$263 ($mux).
Removed top 1 bits (of 8) from wire gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:58:execute$1116.
Removed top 1 bits (of 4) from wire gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:58:execute$1151.
Removed top 1 bits (of 4) from wire gv_sha256.$flatten\Inst_sha256_control.$auto$bmuxmap.cc:58:execute$1161.
Removed top 1 bits (of 3) from wire gv_sha256.$flatten\Inst_sha256_control.$verific$n463$178.
Removed top 2 bits (of 3) from wire gv_sha256.$flatten\Inst_sha256_control.$verific$n484$182.
Removed top 1 bits (of 2) from wire gv_sha256.$flatten\Inst_sha256_control.$verific$n547$192.
Removed top 1 bits (of 32) from wire gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$n107$583.
Removed top 1 bits (of 32) from wire gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$n140$584.
Removed top 1 bits (of 32) from wire gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$n173$585.
Removed top 1 bits (of 32) from wire gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$n206$586.
Removed top 17 bits (of 32) from wire gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$n74$582.

yosys> peepopt

3.57. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 12 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.59. Executing BMUXMAP pass.

yosys> demuxmap

3.60. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.61. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module gv_sha256:
  creating $macc model for $flatten\Inst_sha256_control.$verific$add_175$sha256_control.vhd:607$321 ($add).
  creating $macc model for $flatten\Inst_sha256_control.$verific$add_184$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$327 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_43$sha256_hash_core.vhd:161$458 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_45$sha256_hash_core.vhd:162$460 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_47$sha256_hash_core.vhd:163$462 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_49$sha256_hash_core.vhd:164$464 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_51$sha256_hash_core.vhd:165$466 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_53$sha256_hash_core.vhd:166$468 ($add).
  creating $macc model for $flatten\Inst_sha256_hash_core.$verific$add_55$sha256_hash_core.vhd:167$470 ($add).
  creating $macc model for $flatten\Inst_sha256_msg_sch.$verific$add_69$sha256_msg_sch.vhd:166$890 ($add).
  creating $macc model for $flatten\Inst_sha256_msg_sch.$verific$add_71$sha256_msg_sch.vhd:167$892 ($add).
  creating $macc model for $flatten\Inst_sha256_msg_sch.$verific$add_73$sha256_msg_sch.vhd:168$894 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_43$sha256_regs.vhd:158$1065 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_45$sha256_regs.vhd:159$1067 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_47$sha256_regs.vhd:160$1069 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_49$sha256_regs.vhd:161$1071 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_51$sha256_regs.vhd:162$1073 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_53$sha256_regs.vhd:163$1075 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_55$sha256_regs.vhd:164$1077 ($add).
  creating $macc model for $flatten\Inst_sha256_regs.$verific$add_57$sha256_regs.vhd:165$1079 ($add).
  merging $macc model for $flatten\Inst_sha256_msg_sch.$verific$add_73$sha256_msg_sch.vhd:168$894 into $flatten\Inst_sha256_msg_sch.$verific$add_71$sha256_msg_sch.vhd:167$892.
  merging $macc model for $flatten\Inst_sha256_msg_sch.$verific$add_71$sha256_msg_sch.vhd:167$892 into $flatten\Inst_sha256_msg_sch.$verific$add_69$sha256_msg_sch.vhd:166$890.
  merging $macc model for $flatten\Inst_sha256_hash_core.$verific$add_55$sha256_hash_core.vhd:167$470 into $flatten\Inst_sha256_hash_core.$verific$add_53$sha256_hash_core.vhd:166$468.
  merging $macc model for $flatten\Inst_sha256_hash_core.$verific$add_53$sha256_hash_core.vhd:166$468 into $flatten\Inst_sha256_hash_core.$verific$add_51$sha256_hash_core.vhd:165$466.
  merging $macc model for $flatten\Inst_sha256_hash_core.$verific$add_51$sha256_hash_core.vhd:165$466 into $flatten\Inst_sha256_hash_core.$verific$add_49$sha256_hash_core.vhd:164$464.
  merging $macc model for $flatten\Inst_sha256_hash_core.$verific$add_45$sha256_hash_core.vhd:162$460 into $flatten\Inst_sha256_hash_core.$verific$add_43$sha256_hash_core.vhd:161$458.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_45$sha256_regs.vhd:159$1067.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_43$sha256_regs.vhd:158$1065.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_47$sha256_regs.vhd:160$1069.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_49$sha256_regs.vhd:161$1071.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_51$sha256_regs.vhd:162$1073.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_53$sha256_regs.vhd:163$1075.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_55$sha256_regs.vhd:164$1077.
  creating $alu model for $macc $flatten\Inst_sha256_hash_core.$verific$add_47$sha256_hash_core.vhd:163$462.
  creating $alu model for $macc $flatten\Inst_sha256_regs.$verific$add_57$sha256_regs.vhd:165$1079.
  creating $alu model for $macc $flatten\Inst_sha256_control.$verific$add_184$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$327.
  creating $alu model for $macc $flatten\Inst_sha256_control.$verific$add_175$sha256_control.vhd:607$321.
  creating $macc cell for $flatten\Inst_sha256_hash_core.$verific$add_43$sha256_hash_core.vhd:161$458: $auto$alumacc.cc:365:replace_macc$1354
  creating $macc cell for $flatten\Inst_sha256_msg_sch.$verific$add_69$sha256_msg_sch.vhd:166$890: $auto$alumacc.cc:365:replace_macc$1355
  creating $macc cell for $flatten\Inst_sha256_hash_core.$verific$add_49$sha256_hash_core.vhd:164$464: $auto$alumacc.cc:365:replace_macc$1356
  creating $alu cell for $flatten\Inst_sha256_control.$verific$add_175$sha256_control.vhd:607$321: $auto$alumacc.cc:485:replace_alu$1357
  creating $alu cell for $flatten\Inst_sha256_control.$verific$add_184$../vhdl_packages/vhdl_2008/src/numeric_std-body.vhdl:482$327: $auto$alumacc.cc:485:replace_alu$1360
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_57$sha256_regs.vhd:165$1079: $auto$alumacc.cc:485:replace_alu$1363
  creating $alu cell for $flatten\Inst_sha256_hash_core.$verific$add_47$sha256_hash_core.vhd:163$462: $auto$alumacc.cc:485:replace_alu$1366
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_55$sha256_regs.vhd:164$1077: $auto$alumacc.cc:485:replace_alu$1369
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_53$sha256_regs.vhd:163$1075: $auto$alumacc.cc:485:replace_alu$1372
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_51$sha256_regs.vhd:162$1073: $auto$alumacc.cc:485:replace_alu$1375
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_49$sha256_regs.vhd:161$1071: $auto$alumacc.cc:485:replace_alu$1378
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_47$sha256_regs.vhd:160$1069: $auto$alumacc.cc:485:replace_alu$1381
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_43$sha256_regs.vhd:158$1065: $auto$alumacc.cc:485:replace_alu$1384
  creating $alu cell for $flatten\Inst_sha256_regs.$verific$add_45$sha256_regs.vhd:159$1067: $auto$alumacc.cc:485:replace_alu$1387
  created 11 $alu and 3 $macc cells.

yosys> opt_expr

3.62. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge -nomux

3.63. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.64. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

yosys> opt_reduce

3.65. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.66. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.67. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.68. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.69. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 6 unused cells and 6 unused wires.
<suppressed ~12 debug messages>

yosys> opt_expr

3.70. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_muxtree

3.71. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

yosys> opt_reduce

3.72. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.73. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.74. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.75. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.76. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr

3.77. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
MAX OPT ITERATION = 2

yosys> stat

3.78. Printing statistics.

=== gv_sha256 ===

   Number of wires:                567
   Number of wire bits:          10317
   Number of public wires:         305
   Number of public wire bits:    6756
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                367
     $alu                           11
     $and                           24
     $dffe                          38
     $eq                            70
     $logic_not                      1
     $macc                           3
     $mux                          179
     $ne                             5
     $not                            9
     $or                             8
     $reduce_and                     2
     $reduce_bool                    6
     $xor                           11


yosys> memory -nomap

3.79. Executing MEMORY pass.

yosys> opt_mem

3.79.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.79.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.79.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.79.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.79.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.79.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> memory_share

3.79.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.79.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.79.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> memory_collect

3.79.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.80. Printing statistics.

=== gv_sha256 ===

   Number of wires:                567
   Number of wire bits:          10317
   Number of public wires:         305
   Number of public wire bits:    6756
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                367
     $alu                           11
     $and                           24
     $dffe                          38
     $eq                            70
     $logic_not                      1
     $macc                           3
     $mux                          179
     $ne                             5
     $not                            9
     $or                             8
     $reduce_and                     2
     $reduce_bool                    6
     $xor                           11


yosys> muxpack

3.81. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converting gv_sha256.$flatten\Inst_sha256_control.$verific$i120$sha256_control.vhd:537$281 ... gv_sha256.$flatten\Inst_sha256_control.$verific$i127$sha256_control.vhd:538$287 to a pmux with 2 cases.
Converting gv_sha256.$flatten\Inst_sha256_control.$verific$mux_115$sha256_control.vhd:537$277 ... gv_sha256.$flatten\Inst_sha256_control.$verific$mux_125$sha256_control.vhd:538$286 to a pmux with 2 cases.
Converting gv_sha256.$flatten\Inst_sha256_control.$verific$mux_116$sha256_control.vhd:537$278 ... gv_sha256.$flatten\Inst_sha256_control.$verific$mux_124$sha256_control.vhd:538$285 to a pmux with 2 cases.
Converting gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$mux_68$sha256_Kt_rom.vhd:139$712 ... gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$mux_71$sha256_Kt_rom.vhd:136$715 to a pmux with 4 cases.
Converting gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$mux_72$sha256_Kt_rom.vhd:135$716 ... gv_sha256.$flatten\Inst_sha256_kt_rom.$verific$mux_129$sha256_Kt_rom.vhd:141$773 to a pmux with 58 cases.
Converting gv_sha256.$flatten\Inst_sha256_padding.$verific$mux_37$sha256_padding.vhd:139$970 ... gv_sha256.$flatten\Inst_sha256_padding.$verific$mux_38$sha256_padding.vhd:140$971 to a pmux with 2 cases.
Converted 70 (p)mux cells into 6 pmux cells.
<suppressed ~160 debug messages>

yosys> opt_clean

3.82. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 64 unused wires.
<suppressed ~1 debug messages>

yosys> pmuxtree

3.83. Executing PMUXTREE pass.

yosys> muxpack

3.84. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converting gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1604 ... gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1606 to a pmux with 2 cases.
Converting gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1552 ... gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1554 to a pmux with 2 cases.
Converting gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1512 ... gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1514 to a pmux with 2 cases.
Converting gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1468 ... gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1470 to a pmux with 2 cases.
Converting gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1448 ... gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1450 to a pmux with 2 cases.
Converting gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1432 ... gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1434 to a pmux with 2 cases.
Converting gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1420 ... gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1422 to a pmux with 2 cases.
Converting gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1410 ... gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1412 to a pmux with 2 cases.
Converting gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1394 ... gv_sha256.$auto$pmuxtree.cc:65:recursive_mux_generator$1396 to a pmux with 2 cases.
Converted 18 (p)mux cells into 9 pmux cells.
<suppressed ~160 debug messages>

yosys> memory_map

3.85. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.86. Printing statistics.

=== gv_sha256 ===

   Number of wires:                612
   Number of wire bits:          10454
   Number of public wires:         305
   Number of public wire bits:    6756
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                397
     $alu                           11
     $and                           24
     $dffe                          38
     $eq                            70
     $logic_not                      1
     $macc                           3
     $mux                          161
     $ne                             5
     $not                           15
     $or                            20
     $pmux                           9
     $reduce_and                     2
     $reduce_bool                    6
     $reduce_or                     21
     $xor                           11


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.87. Executing TECHMAP pass (map to technology primitives).

3.87.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.87.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.87.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$be80489e44a49c29884f59fd81c31ed03229cfc1\_80_rs_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper maccmap for cells of type $macc.
  add \Inst_sha256_hash_core.reg_h (32 bits, unsigned)
  add \Inst_sha256_hash_core.SIG1 (32 bits, unsigned)
  add \Inst_sha256_hash_core.Wt_i (32 bits, unsigned)
  add \Inst_sha256_hash_core.Kt_i (32 bits, unsigned)
  add \Inst_sha256_hash_core.Ch (32 bits, unsigned)
Using extmapper simplemap for cells of type $xor.
Using template $paramod$32e7c4d6f92ff4337599ece53082d2e88a82a9f2\_90_pmux for cells of type $pmux.
Using template $paramod$f08cf4b531f7b2bd95251b79857dfb970a6679fc\_90_pmux for cells of type $pmux.
Using template $paramod$8fabc56b80a569262acfc42757a02ca0b8e91278\_90_pmux for cells of type $pmux.
  add \Inst_sha256_hash_core.SIG0 (32 bits, unsigned)
  add \Inst_sha256_hash_core.sum3 (32 bits, unsigned)
  add \Inst_sha256_hash_core.Maj (32 bits, unsigned)
Using extmapper simplemap for cells of type $logic_not.
  add \Inst_sha256_msg_sch.r10 (32 bits, unsigned)
  add \Inst_sha256_msg_sch.r1 (32 bits, unsigned)
  add \Inst_sha256_msg_sch.s0 (32 bits, unsigned)
  add \Inst_sha256_msg_sch.s1 (32 bits, unsigned)
Using template $paramod$456e3104f75ba68afad552cb7fe4bdf07439f113\_80_rs_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$103b4016182df467cceab67bcf3e18e6361ec0fd\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000100000 for cells of type $fa.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
No more expansions possible.
<suppressed ~1952 debug messages>

yosys> stat

3.88. Printing statistics.

=== gv_sha256 ===

   Number of wires:               2573
   Number of wire bits:          29440
   Number of public wires:         305
   Number of public wire bits:    6756
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               9468
     $_AND_                       1389
     $_DFFE_PP_                   1101
     $_MUX_                       3197
     $_NOT_                        572
     $_OR_                        1106
     $_XOR_                       1751
     adder_carry                   352


yosys> opt_expr

3.89. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~2986 debug messages>

yosys> opt_merge -nomux

3.90. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~3102 debug messages>
Removed a total of 1034 cells.

yosys> opt_muxtree

3.91. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.92. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.93. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.94. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.95. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.96. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 569 unused cells and 1791 unused wires.
<suppressed ~570 debug messages>

yosys> opt_expr

3.97. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~1 debug messages>

yosys> opt_muxtree

3.98. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.99. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.100. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.101. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.102. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.103. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..

yosys> opt_expr

3.104. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
MAX OPT ITERATION = 2

yosys> opt_expr -full

3.105. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~377 debug messages>

yosys> techmap -map +/techmap.v

3.106. Executing TECHMAP pass (map to technology primitives).

3.106.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.106.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.107. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge -nomux

3.108. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_muxtree

3.109. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.110. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.111. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.112. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.113. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.114. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
MAX OPT ITERATION = 1

yosys> abc -dff

3.115. Executing ABC pass (technology mapping using ABC).

3.115.1. Summary of detected clock domains:
  20 cells in clk=\clk_i, en=$auto$opt_dff.cc:194:make_patterns_logic$1317, arst={ }, srst={ }
  13 cells in clk=\clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$1328, arst={ }, srst={ }
  31 cells in clk=\clk_i, en=$auto$opt_dff.cc:219:make_patterns_logic$1335, arst={ }, srst={ }
  283 cells in clk=\clk_i, en=$auto$opt_dff.cc:194:make_patterns_logic$1338, arst={ }, srst={ }
  98 cells in clk=\clk_i, en=$auto$opt_dff.cc:194:make_patterns_logic$1341, arst={ }, srst={ }
  49 cells in clk=\clk_i, en=$auto$opt_dff.cc:194:make_patterns_logic$1314, arst={ }, srst={ }
  3412 cells in clk=\clk_i, en=\Inst_sha256_hash_core.ce_i, arst={ }, srst={ }
  560 cells in clk=\clk_i, en=\Inst_sha256_hash_core.ld_i, arst={ }, srst={ }
  1282 cells in clk=\clk_i, en=\Inst_sha256_control.sch_ce, arst={ }, srst={ }

3.115.2. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $auto$opt_dff.cc:194:make_patterns_logic$1317
Extracted 20 gates and 37 wires to a netlist network with 15 inputs and 9 outputs.

3.115.2.1. Executing ABC.

3.115.3. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1328
Extracted 13 gates and 22 wires to a netlist network with 9 inputs and 3 outputs.

3.115.3.1. Executing ABC.

3.115.4. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1335
Extracted 31 gates and 43 wires to a netlist network with 11 inputs and 15 outputs.

3.115.4.1. Executing ABC.

3.115.5. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $auto$opt_dff.cc:194:make_patterns_logic$1338
Extracted 219 gates and 296 wires to a netlist network with 76 inputs and 138 outputs.

3.115.5.1. Executing ABC.

3.115.6. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $auto$opt_dff.cc:194:make_patterns_logic$1341
Extracted 98 gates and 132 wires to a netlist network with 32 inputs and 30 outputs.

3.115.6.1. Executing ABC.

3.115.7. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $auto$opt_dff.cc:194:make_patterns_logic$1314
Extracted 49 gates and 54 wires to a netlist network with 4 inputs and 19 outputs.

3.115.7.1. Executing ABC.

3.115.8. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$12901$Inst_sha256_hash_core.ce_i
Extracted 3124 gates and 3695 wires to a netlist network with 569 inputs and 504 outputs.

3.115.8.1. Executing ABC.

3.115.9. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$12901$Inst_sha256_hash_core.ld_i
Extracted 560 gates and 864 wires to a netlist network with 303 inputs and 543 outputs.

3.115.9.1. Executing ABC.

3.115.10. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$12901$Inst_sha256_control.sch_ce
Extracted 1282 gates and 1389 wires to a netlist network with 107 inputs and 32 outputs.

3.115.10.1. Executing ABC.

yosys> abc -dff

3.116. Executing ABC pass (technology mapping using ABC).

3.116.1. Summary of detected clock domains:
  17 cells in clk=\clk_i, en=$abc$12594$auto$opt_dff.cc:219:make_patterns_logic$1335, arst={ }, srst={ }
  78 cells in clk=\clk_i, en=$abc$12901$auto$opt_dff.cc:194:make_patterns_logic$1341, arst={ }, srst={ }
  26 cells in clk=\clk_i, en=$abc$12557$auto$opt_dff.cc:194:make_patterns_logic$1317, arst={ }, srst={ }
  12 cells in clk=\clk_i, en=$abc$12581$auto$opt_dff.cc:219:make_patterns_logic$1328, arst={ }, srst={ }
  50 cells in clk=\clk_i, en=$abc$12994$auto$opt_dff.cc:194:make_patterns_logic$1314, arst={ }, srst={ }
  708 cells in clk=\clk_i, en=$abc$12901$Inst_sha256_hash_core.ld_i, arst={ }, srst={ }
  283 cells in clk=\clk_i, en=$abc$12622$auto$opt_dff.cc:194:make_patterns_logic$1338, arst={ }, srst={ }
  3381 cells in clk=\clk_i, en=$abc$12901$Inst_sha256_hash_core.ce_i, arst={ }, srst={ }
  1254 cells in clk=\clk_i, en=$abc$12901$Inst_sha256_control.sch_ce, arst={ }, srst={ }

3.116.2. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$12594$auto$opt_dff.cc:219:make_patterns_logic$1335
Extracted 17 gates and 28 wires to a netlist network with 11 inputs and 11 outputs.

3.116.2.1. Executing ABC.

3.116.3. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$12901$auto$opt_dff.cc:194:make_patterns_logic$1341
Extracted 78 gates and 97 wires to a netlist network with 19 inputs and 21 outputs.

3.116.3.1. Executing ABC.

3.116.4. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$12557$auto$opt_dff.cc:194:make_patterns_logic$1317
Extracted 26 gates and 43 wires to a netlist network with 17 inputs and 13 outputs.

3.116.4.1. Executing ABC.

3.116.5. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$12581$auto$opt_dff.cc:219:make_patterns_logic$1328
Extracted 12 gates and 21 wires to a netlist network with 9 inputs and 3 outputs.

3.116.5.1. Executing ABC.

3.116.6. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$12994$auto$opt_dff.cc:194:make_patterns_logic$1314
Extracted 50 gates and 55 wires to a netlist network with 5 inputs and 19 outputs.

3.116.6.1. Executing ABC.

3.116.7. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$12901$Inst_sha256_hash_core.ld_i
Extracted 701 gates and 1107 wires to a netlist network with 406 inputs and 409 outputs.

3.116.7.1. Executing ABC.

3.116.8. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$12622$auto$opt_dff.cc:194:make_patterns_logic$1338
Extracted 219 gates and 297 wires to a netlist network with 78 inputs and 136 outputs.

3.116.8.1. Executing ABC.

3.116.9. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$12901$Inst_sha256_hash_core.ce_i
Extracted 3100 gates and 3586 wires to a netlist network with 486 inputs and 397 outputs.

3.116.9.1. Executing ABC.

3.116.10. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$12901$Inst_sha256_control.sch_ce
Extracted 1254 gates and 1368 wires to a netlist network with 114 inputs and 69 outputs.

3.116.10.1. Executing ABC.

yosys> abc -dff

3.117. Executing ABC pass (technology mapping using ABC).

3.117.1. Summary of detected clock domains:
  18 cells in clk=\clk_i, en=$abc$19064$abc$12594$auto$opt_dff.cc:219:make_patterns_logic$1335, arst={ }, srst={ }
  3693 cells in clk=\clk_i, en=$abc$20480$abc$12901$Inst_sha256_hash_core.ce_i, arst={ }, srst={ }
  23 cells in clk=\clk_i, en=$abc$19148$abc$12557$auto$opt_dff.cc:194:make_patterns_logic$1317, arst={ }, srst={ }
  11 cells in clk=\clk_i, en=$abc$19175$abc$12581$auto$opt_dff.cc:219:make_patterns_logic$1328, arst={ }, srst={ }
  50 cells in clk=\clk_i, en=$abc$19188$abc$12994$auto$opt_dff.cc:194:make_patterns_logic$1314, arst={ }, srst={ }
  656 cells in clk=\clk_i, en=$abc$19239$abc$12901$Inst_sha256_hash_core.ld_i, arst={ }, srst={ }
  62 cells in clk=\clk_i, en=$abc$19082$abc$12901$auto$opt_dff.cc:194:make_patterns_logic$1341, arst={ }, srst={ }
  279 cells in clk=\clk_i, en=$abc$20201$abc$12622$auto$opt_dff.cc:194:make_patterns_logic$1338, arst={ }, srst={ }
  1285 cells in clk=\clk_i, en=$abc$24086$abc$12901$Inst_sha256_control.sch_ce, arst={ }, srst={ }

3.117.2. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$19064$abc$12594$auto$opt_dff.cc:219:make_patterns_logic$1335
Extracted 18 gates and 28 wires to a netlist network with 10 inputs and 9 outputs.

3.117.2.1. Executing ABC.

3.117.3. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$20480$abc$12901$Inst_sha256_hash_core.ce_i
Extracted 3413 gates and 3956 wires to a netlist network with 543 inputs and 452 outputs.

3.117.3.1. Executing ABC.

3.117.4. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$19148$abc$12557$auto$opt_dff.cc:194:make_patterns_logic$1317
Extracted 23 gates and 38 wires to a netlist network with 15 inputs and 11 outputs.

3.117.4.1. Executing ABC.

3.117.5. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$19175$abc$12581$auto$opt_dff.cc:219:make_patterns_logic$1328
Extracted 11 gates and 20 wires to a netlist network with 9 inputs and 3 outputs.

3.117.5.1. Executing ABC.

3.117.6. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$19188$abc$12994$auto$opt_dff.cc:194:make_patterns_logic$1314
Extracted 50 gates and 55 wires to a netlist network with 5 inputs and 19 outputs.

3.117.6.1. Executing ABC.

3.117.7. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$19239$abc$12901$Inst_sha256_hash_core.ld_i
Extracted 648 gates and 1003 wires to a netlist network with 355 inputs and 356 outputs.

3.117.7.1. Executing ABC.

3.117.8. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$19082$abc$12901$auto$opt_dff.cc:194:make_patterns_logic$1341
Extracted 62 gates and 82 wires to a netlist network with 20 inputs and 19 outputs.

3.117.8.1. Executing ABC.

3.117.9. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$20201$abc$12622$auto$opt_dff.cc:194:make_patterns_logic$1338
Extracted 215 gates and 292 wires to a netlist network with 77 inputs and 136 outputs.

3.117.9.1. Executing ABC.

3.117.10. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$24086$abc$12901$Inst_sha256_control.sch_ce
Extracted 1285 gates and 1403 wires to a netlist network with 118 inputs and 72 outputs.

3.117.10.1. Executing ABC.

yosys> abc -dff

3.118. Executing ABC pass (technology mapping using ABC).

3.118.1. Summary of detected clock domains:
  285 cells in clk=\clk_i, en=$abc$30589$abc$20201$abc$12622$auto$opt_dff.cc:194:make_patterns_logic$1338, arst={ }, srst={ }
  17 cells in clk=\clk_i, en=$abc$25846$abc$19064$abc$12594$auto$opt_dff.cc:219:make_patterns_logic$1335, arst={ }, srst={ }
  16 cells in clk=\clk_i, en=$abc$29527$abc$19148$abc$12557$auto$opt_dff.cc:194:make_patterns_logic$1317, arst={ }, srst={ }
  3591 cells in clk=\clk_i, en=$abc$25865$abc$20480$abc$12901$Inst_sha256_hash_core.ce_i, arst={ }, srst={ }
  11 cells in clk=\clk_i, en=$abc$29550$abc$19175$abc$12581$auto$opt_dff.cc:219:make_patterns_logic$1328, arst={ }, srst={ }
  50 cells in clk=\clk_i, en=$abc$29563$abc$19188$abc$12994$auto$opt_dff.cc:194:make_patterns_logic$1314, arst={ }, srst={ }
  768 cells in clk=\clk_i, en=$abc$29614$abc$19239$abc$12901$Inst_sha256_hash_core.ld_i, arst={ }, srst={ }
  63 cells in clk=\clk_i, en=$abc$30525$abc$19082$abc$12901$auto$opt_dff.cc:194:make_patterns_logic$1341, arst={ }, srst={ }
  1285 cells in clk=\clk_i, en=$abc$30865$abc$24086$abc$12901$Inst_sha256_control.sch_ce, arst={ }, srst={ }

3.118.2. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$30589$abc$20201$abc$12622$auto$opt_dff.cc:194:make_patterns_logic$1338
Extracted 221 gates and 302 wires to a netlist network with 81 inputs and 142 outputs.

3.118.2.1. Executing ABC.

3.118.3. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$25846$abc$19064$abc$12594$auto$opt_dff.cc:219:make_patterns_logic$1335
Extracted 17 gates and 27 wires to a netlist network with 10 inputs and 9 outputs.

3.118.3.1. Executing ABC.

3.118.4. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$29527$abc$19148$abc$12557$auto$opt_dff.cc:194:make_patterns_logic$1317
Extracted 16 gates and 28 wires to a netlist network with 12 inputs and 5 outputs.

3.118.4.1. Executing ABC.

3.118.5. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$25865$abc$20480$abc$12901$Inst_sha256_hash_core.ce_i
Extracted 3311 gates and 3752 wires to a netlist network with 441 inputs and 354 outputs.

3.118.5.1. Executing ABC.

3.118.6. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$29550$abc$19175$abc$12581$auto$opt_dff.cc:219:make_patterns_logic$1328
Extracted 11 gates and 20 wires to a netlist network with 9 inputs and 3 outputs.

3.118.6.1. Executing ABC.

3.118.7. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$29563$abc$19188$abc$12994$auto$opt_dff.cc:194:make_patterns_logic$1314
Extracted 50 gates and 55 wires to a netlist network with 5 inputs and 19 outputs.

3.118.7.1. Executing ABC.

3.118.8. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$29614$abc$19239$abc$12901$Inst_sha256_hash_core.ld_i
Extracted 760 gates and 1207 wires to a netlist network with 447 inputs and 452 outputs.

3.118.8.1. Executing ABC.

3.118.9. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$30525$abc$19082$abc$12901$auto$opt_dff.cc:194:make_patterns_logic$1341
Extracted 63 gates and 83 wires to a netlist network with 20 inputs and 19 outputs.

3.118.9.1. Executing ABC.

3.118.10. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk_i, enabled by $abc$30865$abc$24086$abc$12901$Inst_sha256_control.sch_ce
Extracted 1285 gates and 1403 wires to a netlist network with 118 inputs and 71 outputs.

3.118.10.1. Executing ABC.

yosys> opt_ffinv

3.119. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.120. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~3 debug messages>

yosys> opt_merge -nomux

3.121. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~99 debug messages>
Removed a total of 33 cells.

yosys> opt_muxtree

3.122. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.123. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.124. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.125. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.126. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.127. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 27386 unused wires.
<suppressed ~127 debug messages>

yosys> opt_expr

3.128. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
MAX OPT ITERATION = 1

yosys> bmuxmap

3.129. Executing BMUXMAP pass.

yosys> demuxmap

3.130. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_IhbE8b/abc_tmp_1.scr

3.131. Executing ABC pass (technology mapping using ABC).

3.131.1. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Extracted 4586 gates and 5683 wires to a netlist network with 1097 inputs and 909 outputs.

3.131.1.1. Executing ABC.
DE:   #PIs = 1097  #Luts =  1639  Max Lvl =  20  Avg Lvl =   2.11  [   0.48 sec. at Pass 0]{firstMap}
DE:   #PIs = 1097  #Luts =  1554  Max Lvl =  38  Avg Lvl =   3.72  [  19.03 sec. at Pass 1]{initMapFlow}
DE:   #PIs = 1097  #Luts =  1515  Max Lvl =  35  Avg Lvl =   3.49  [   1.74 sec. at Pass 2]{map}
DE:   #PIs = 1097  #Luts =  1515  Max Lvl =  35  Avg Lvl =   3.49  [   5.41 sec. at Pass 3]{postMap}
DE:   #PIs = 1097  #Luts =  1508  Max Lvl =  32  Avg Lvl =   3.38  [   3.77 sec. at Pass 4]{map}
DE:   #PIs = 1097  #Luts =  1508  Max Lvl =  32  Avg Lvl =   3.38  [   5.69 sec. at Pass 5]{postMap}
DE:   #PIs = 1097  #Luts =  1503  Max Lvl =  33  Avg Lvl =   3.42  [   4.20 sec. at Pass 6]{map}
DE:   #PIs = 1097  #Luts =  1503  Max Lvl =  33  Avg Lvl =   3.42  [   5.64 sec. at Pass 7]{postMap}
DE:   #PIs = 1097  #Luts =  1502  Max Lvl =  34  Avg Lvl =   3.46  [   3.89 sec. at Pass 8]{map}
DE:   #PIs = 1097  #Luts =  1502  Max Lvl =  34  Avg Lvl =   3.46  [   5.59 sec. at Pass 9]{postMap}
DE:   #PIs = 1097  #Luts =  1501  Max Lvl =  34  Avg Lvl =   3.49  [   5.12 sec. at Pass 10]{map}
DE:   #PIs = 1097  #Luts =  1501  Max Lvl =  34  Avg Lvl =   3.49  [   6.04 sec. at Pass 11]{postMap}
DE:   #PIs = 1097  #Luts =  1501  Max Lvl =  34  Avg Lvl =   3.49  [   4.30 sec. at Pass 12]{map}
DE:   #PIs = 1097  #Luts =  1501  Max Lvl =  34  Avg Lvl =   3.49  [   5.71 sec. at Pass 13]{postMap}
DE:   #PIs = 1097  #Luts =  1501  Max Lvl =  34  Avg Lvl =   3.49  [   0.75 sec. at Pass 14]{finalMap}

yosys> opt_expr

3.132. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge -nomux

3.133. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.134. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.135. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.136. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.137. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.138. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.139. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 5624 unused wires.
<suppressed ~15 debug messages>

yosys> opt_expr

3.140. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.141. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 1 inverters.

yosys> stat

3.142. Printing statistics.

=== gv_sha256 ===

   Number of wires:               1958
   Number of wire bits:           6150
   Number of public wires:         165
   Number of public wire bits:    3663
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2954
     $_DFFE_PP_                   1101
     $lut                         1501
     adder_carry                   352


yosys> shregmap -minlen 8 -maxlen 20

3.143. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.144. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.145. Printing statistics.

=== gv_sha256 ===

   Number of wires:               1958
   Number of wire bits:           6150
   Number of public wires:         165
   Number of public wire bits:    3663
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2954
     $_DFFE_PP0P_                 1101
     $lut                         1501
     adder_carry                   352


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.146. Executing TECHMAP pass (map to technology primitives).

3.146.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.146.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.146.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~3839 debug messages>

yosys> opt_expr -mux_undef

3.147. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~15302 debug messages>

yosys> simplemap

3.148. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.149. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge

3.150. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~19788 debug messages>
Removed a total of 6596 cells.

yosys> opt_dff -nodffe -nosdff

3.151. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.152. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 9267 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.153. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
<suppressed ~345 debug messages>

yosys> opt_merge -nomux

3.154. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_muxtree

3.155. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.156. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.157. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.158. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.159. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.160. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 111 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.161. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_IhbE8b/abc_tmp_2.scr

3.162. Executing ABC pass (technology mapping using ABC).

3.162.1. Extracting gate netlist of module `\gv_sha256' to `<abc-temp-dir>/input.blif'..
Extracted 6333 gates and 7432 wires to a netlist network with 1097 inputs and 908 outputs.

3.162.1.1. Executing ABC.
DE:   #PIs = 1097  #Luts =  1520  Max Lvl =  25  Avg Lvl =   2.40  [   0.13 sec. at Pass 0]{firstMap}
DE:   #PIs = 1097  #Luts =  1520  Max Lvl =  25  Avg Lvl =   2.40  [  13.34 sec. at Pass 1]{initMapFlow}
DE:   #PIs = 1097  #Luts =  1499  Max Lvl =  34  Avg Lvl =   3.48  [   1.75 sec. at Pass 2]{map}
DE:   #PIs = 1097  #Luts =  1499  Max Lvl =  34  Avg Lvl =   3.48  [   3.23 sec. at Pass 3]{postMap}
DE:   #PIs = 1097  #Luts =  1496  Max Lvl =  34  Avg Lvl =   3.45  [   3.00 sec. at Pass 4]{map}
DE:   #PIs = 1097  #Luts =  1496  Max Lvl =  34  Avg Lvl =   3.45  [   6.19 sec. at Pass 5]{postMap}
DE:   #PIs = 1097  #Luts =  1496  Max Lvl =  34  Avg Lvl =   3.45  [   4.01 sec. at Pass 6]{map}
DE:   #PIs = 1097  #Luts =  1496  Max Lvl =  34  Avg Lvl =   3.45  [   8.33 sec. at Pass 7]{postMap}
DE:   #PIs = 1097  #Luts =  1496  Max Lvl =  34  Avg Lvl =   3.45  [   1.46 sec. at Pass 8]{finalMap}

yosys> opt_expr

3.163. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.

yosys> opt_merge -nomux

3.164. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.165. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gv_sha256..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.166. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gv_sha256.
Performed a total of 0 changes.

yosys> opt_merge

3.167. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gv_sha256'.
Removed a total of 0 cells.

yosys> opt_share

3.168. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.169. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.170. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 5134 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.171. Executing OPT_EXPR pass (perform const folding).
Optimizing module gv_sha256.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.172. Executing HIERARCHY pass (managing design hierarchy).

3.172.1. Analyzing design hierarchy..
Top module:  \gv_sha256

3.172.2. Analyzing design hierarchy..
Top module:  \gv_sha256
Removed 0 unused modules.

yosys> stat

3.173. Printing statistics.

=== gv_sha256 ===

   Number of wires:               1953
   Number of wire bits:           6145
   Number of public wires:         165
   Number of public wire bits:    3663
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2949
     $lut                         1496
     adder_carry                   352
     dffsre                       1101


yosys> opt_clean -purge

3.174. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gv_sha256..
Removed 0 unused cells and 122 unused wires.
<suppressed ~122 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.175. Executing Verilog backend.
Dumping module `\gv_sha256'.

End of script. Logfile hash: 99bfe071ab, CPU: user 24.70s system 0.15s, MEM: 109.62 MB peak
Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)
Time spent: 95% 6x abc (473 sec), 1% 17x opt_dff (9 sec), ...
real 165.04
user 459.83
sys 36.65
