
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.92
 Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vlog2k crc_unit.v bit_reversal.v host_interface.v crc_parrallel.v crc_datapath.v crc_ip.v crc_control_unit.v crc_comb.v

yosys> verific -vlog2k crc_unit.v bit_reversal.v host_interface.v crc_parrallel.v crc_datapath.v crc_ip.v crc_control_unit.v crc_comb.v

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'crc_unit.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'bit_reversal.v'
VERIFIC-WARNING [VERI-2329] bit_reversal.v:113: begin/end is required for generate-for in this mode of Verilog
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'host_interface.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'crc_parrallel.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'crc_datapath.v'
VERIFIC-WARNING [VERI-2329] crc_datapath.v:342: begin/end is required for generate-for in this mode of Verilog
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'crc_ip.v'
VERIFIC-INFO [VERI-2561] crc_ip.v:127: undeclared symbol 'reset_pending', assumed default net type 'wire'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'crc_control_unit.v'
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'crc_comb.v'

yosys> synth_rs -top crc_ip -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.79

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top crc_ip

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VERI-1018] crc_ip.v:75: compiling module 'crc_ip'
VERIFIC-INFO [VERI-1018] host_interface.v:75: compiling module 'host_interface'
VERIFIC-WARNING [VERI-1209] host_interface.v:195: expression size 3 truncated to fit in target size 2
VERIFIC-INFO [VERI-1018] crc_unit.v:75: compiling module 'crc_unit'
VERIFIC-INFO [VERI-1018] crc_datapath.v:75: compiling module 'crc_datapath'
VERIFIC-INFO [VERI-1018] bit_reversal.v:78: compiling module 'bit_reversal'
VERIFIC-INFO [VERI-1018] crc_parrallel.v:75: compiling module 'crc_parallel(CRC_SIZE=32)'
VERIFIC-INFO [VERI-1018] crc_comb.v:83: compiling module 'crc_comb(CRC_SIZE=32,MASK=32'b11111111111111111111111111111111)'
VERIFIC-INFO [VERI-1018] crc_control_unit.v:76: compiling module 'crc_control_unit'
Importing module crc_ip.
Importing module crc_unit.
Importing module crc_control_unit.
Importing module crc_datapath.
Importing module bit_reversal.
Importing module crc_parallel(CRC_SIZE=32).
Importing module crc_comb(CRC_SIZE=32,MASK=32'b11111111111111111111111111111111).
Importing module host_interface.

3.4.1. Analyzing design hierarchy..
Top module:  \crc_ip
Used module:     \crc_unit
Used module:         \crc_control_unit
Used module:         \crc_datapath
Used module:             \crc_parallel(CRC_SIZE=32)
Used module:                 \crc_comb(CRC_SIZE=32,MASK=32'b11111111111111111111111111111111)
Used module:             \bit_reversal
Used module:     \host_interface

3.4.2. Analyzing design hierarchy..
Top module:  \crc_ip
Used module:     \crc_unit
Used module:         \crc_control_unit
Used module:         \crc_datapath
Used module:             \crc_parallel(CRC_SIZE=32)
Used module:                 \crc_comb(CRC_SIZE=32,MASK=32'b11111111111111111111111111111111)
Used module:             \bit_reversal
Used module:     \host_interface
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module host_interface.
<suppressed ~7 debug messages>
Optimizing module crc_comb(CRC_SIZE=32,MASK=32'b11111111111111111111111111111111).
<suppressed ~1 debug messages>
Optimizing module crc_parallel(CRC_SIZE=32).
Optimizing module bit_reversal.
Optimizing module crc_datapath.
<suppressed ~9 debug messages>
Optimizing module crc_control_unit.
<suppressed ~5 debug messages>
Optimizing module crc_unit.
Optimizing module crc_ip.

yosys> bmuxmap

3.6. Executing BMUXMAP pass.

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).
Deleting now unused module bit_reversal.
Deleting now unused module crc_comb(CRC_SIZE=32,MASK=32'b11111111111111111111111111111111).
Deleting now unused module crc_control_unit.
Deleting now unused module crc_datapath.
Deleting now unused module crc_parallel(CRC_SIZE=32).
Deleting now unused module crc_unit.
Deleting now unused module host_interface.
<suppressed ~14 debug messages>

yosys> bmuxmap

3.9. Executing BMUXMAP pass.

yosys> demuxmap

3.10. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.11. Executing TRIBUF pass.

yosys> deminout

3.12. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.
<suppressed ~6 debug messages>

yosys> opt_clean

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..
Removed 2 unused cells and 2039 unused wires.
<suppressed ~217 debug messages>

yosys> check

3.15. Executing CHECK pass (checking for obvious problems).
Checking module crc_ip...
Found and reported 0 problems.

yosys> opt_expr

3.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.
<suppressed ~1 debug messages>

yosys> opt_merge -nomux

3.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
<suppressed ~48 debug messages>
Removed a total of 16 cells.

yosys> opt_muxtree

3.18. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \crc_ip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $flatten\CRC_UNIT.\CONTROL_UNIT.$auto$bmuxmap.cc:60:execute$2836: \CRC_UNIT.CONTROL_UNIT.state_reset -> { 2'11 \CRC_UNIT.CONTROL_UNIT.state_reset [0] }
      Replacing known input bits on port B of cell $flatten\CRC_UNIT.\CONTROL_UNIT.$auto$bmuxmap.cc:60:execute$2832: \CRC_UNIT.CONTROL_UNIT.state_reset -> 3'101
      Replacing known input bits on port A of cell $flatten\CRC_UNIT.\CONTROL_UNIT.$verific$mux_118$crc_control_unit.v:296$774: \CRC_UNIT.CONTROL_UNIT.state_reset -> 3'000
      Replacing known input bits on port B of cell $flatten\CRC_UNIT.\CONTROL_UNIT.$auto$bmuxmap.cc:60:execute$2846: \CRC_UNIT.CONTROL_UNIT.state_byte -> { 2'11 \CRC_UNIT.CONTROL_UNIT.state_byte [0] }
      Replacing known input bits on port B of cell $flatten\CRC_UNIT.\CONTROL_UNIT.$auto$bmuxmap.cc:60:execute$2842: \CRC_UNIT.CONTROL_UNIT.state_byte -> 3'101
      Replacing known input bits on port A of cell $flatten\CRC_UNIT.\CONTROL_UNIT.$verific$mux_64$crc_control_unit.v:219$739: \CRC_UNIT.CONTROL_UNIT.state_byte -> 3'000
      Replacing known input bits on port A of cell $flatten\CRC_UNIT.\CONTROL_UNIT.$verific$mux_33$crc_control_unit.v:178$718: \CRC_UNIT.CONTROL_UNIT.state_full -> 2'11
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

yosys> opt_reduce

3.19. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \crc_ip.
    New ctrl vector for $pmux cell $flatten\CRC_UNIT.\CONTROL_UNIT.$verific$select_82$crc_control_unit.v:263$751: { $flatten\CRC_UNIT.\CONTROL_UNIT.$verific$n22$602 $flatten\CRC_UNIT.\CONTROL_UNIT.$verific$n145$624 $flatten\CRC_UNIT.\CONTROL_UNIT.$verific$n26$606 }
  Optimizing cells in module \crc_ip.
Performed a total of 1 changes.

yosys> opt_merge

3.20. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_share

3.21. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.22. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $flatten\HOST_INTERFACE.$verific$htrans_pp_reg$host_interface.v:170$2734 ($aldff) from module crc_ip.
Removing never-active async load on $flatten\HOST_INTERFACE.$verific$hsize_pp_reg$host_interface.v:170$2733 ($aldff) from module crc_ip.
Removing never-active async load on $flatten\HOST_INTERFACE.$verific$haddr_pp_reg$host_interface.v:170$2732 ($aldff) from module crc_ip.
Removing never-active async load on $flatten\HOST_INTERFACE.$verific$crc_cr_ff_reg$host_interface.v:230$2792 ($aldff) from module crc_ip.
Removing never-active async load on $flatten\CRC_UNIT.\DATAPATH.$verific$size_ff_reg$crc_datapath.v:207$936 ($aldff) from module crc_ip.
Removing never-active async load on $flatten\CRC_UNIT.\DATAPATH.$verific$crc_poly_ff_reg$crc_datapath.v:299$974 ($aldff) from module crc_ip.
Removing never-active async load on $flatten\CRC_UNIT.\DATAPATH.$verific$crc_out_ff_reg$crc_datapath.v:276$963 ($aldff) from module crc_ip.
Removing never-active async load on $flatten\CRC_UNIT.\DATAPATH.$verific$crc_init_ff_reg$crc_datapath.v:266$958 ($aldff) from module crc_ip.
Removing never-active async load on $flatten\CRC_UNIT.\DATAPATH.$verific$crc_idr_ff_reg$crc_datapath.v:288$969 ($aldff) from module crc_ip.
Removing never-active async load on $flatten\CRC_UNIT.\DATAPATH.$verific$byte_ff_reg$crc_datapath.v:186$926 ($aldff) from module crc_ip.
Removing never-active async load on $flatten\CRC_UNIT.\DATAPATH.$verific$buffer_ff_reg$crc_datapath.v:186$925 ($aldff) from module crc_ip.
Removing never-active async load on $flatten\CRC_UNIT.\DATAPATH.$verific$bf_size_ff_reg$crc_datapath.v:207$935 ($aldff) from module crc_ip.
Removing never-active async load on $flatten\CRC_UNIT.\CONTROL_UNIT.$verific$state_reset_reg$crc_control_unit.v:287$766 ($aldff) from module crc_ip.
Removing never-active async load on $flatten\CRC_UNIT.\CONTROL_UNIT.$verific$state_full_reg$crc_control_unit.v:144$698 ($aldff) from module crc_ip.
Removing never-active async load on $flatten\CRC_UNIT.\CONTROL_UNIT.$verific$state_byte_reg$crc_control_unit.v:207$734 ($aldff) from module crc_ip.

yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..
Removed 3 unused cells and 23 unused wires.
<suppressed ~7 debug messages>

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.

yosys> opt_muxtree

3.25. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \crc_ip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

yosys> opt_reduce

3.26. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \crc_ip.
Performed a total of 0 changes.

yosys> opt_merge

3.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
Removed a total of 0 cells.

yosys> opt_share

3.28. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.29. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..

yosys> opt_expr

3.31. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.
MAX OPT ITERATION = 2

yosys> fsm -encoding binary

3.32. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.32.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.32.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.32.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..

yosys> fsm_opt

3.32.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.32.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.32.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.32.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.

yosys> opt_merge -nomux

3.34. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \crc_ip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

yosys> opt_reduce

3.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \crc_ip.
Performed a total of 0 changes.

yosys> opt_merge

3.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
Removed a total of 0 cells.

yosys> opt_share

3.38. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.39. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\HOST_INTERFACE.$verific$hwrite_pp_reg$host_interface.v:170$2735 ($dff) from module crc_ip (D = \HWRITE, Q = \HOST_INTERFACE.hwrite_pp).
Adding EN signal on $flatten\HOST_INTERFACE.$verific$htrans_pp_reg$host_interface.v:170$2734 ($dff) from module crc_ip (D = \HTRANS, Q = \HOST_INTERFACE.htrans_pp).
Adding EN signal on $flatten\HOST_INTERFACE.$verific$hsize_pp_reg$host_interface.v:170$2733 ($dff) from module crc_ip (D = \HSIZE, Q = \HOST_INTERFACE.hsize_pp).
Adding EN signal on $flatten\HOST_INTERFACE.$verific$hselx_pp_reg$host_interface.v:170$2731 ($dff) from module crc_ip (D = $flatten\HOST_INTERFACE.$verific$n33$2662, Q = \HOST_INTERFACE.hselx_pp).
Adding EN signal on $flatten\HOST_INTERFACE.$verific$haddr_pp_reg$host_interface.v:170$2732 ($dff) from module crc_ip (D = \HADDR [4:2], Q = \HOST_INTERFACE.haddr_pp).
Adding EN signal on $flatten\HOST_INTERFACE.$verific$crc_cr_ff_reg$host_interface.v:230$2792 ($dff) from module crc_ip (D = $flatten\HOST_INTERFACE.$verific$n519$2710, Q = \HOST_INTERFACE.crc_cr_ff).
Adding EN signal on $flatten\CRC_UNIT.\DATAPATH.$verific$size_ff_reg$crc_datapath.v:207$936 ($dff) from module crc_ip (D = $flatten\CRC_UNIT.\DATAPATH.$verific$n397$824, Q = \CRC_UNIT.DATAPATH.size_ff).
Adding EN signal on $flatten\CRC_UNIT.\DATAPATH.$verific$crc_poly_ff_reg$crc_datapath.v:299$974 ($dff) from module crc_ip (D = $flatten\CRC_UNIT.\DATAPATH.$verific$n1143$845, Q = \CRC_UNIT.DATAPATH.crc_poly_ff).
Adding EN signal on $flatten\CRC_UNIT.\DATAPATH.$verific$crc_out_ff_reg$crc_datapath.v:276$963 ($dff) from module crc_ip (D = $flatten\CRC_UNIT.\DATAPATH.$verific$n887$838, Q = \CRC_UNIT.DATAPATH.crc_out_ff).
Adding EN signal on $flatten\CRC_UNIT.\DATAPATH.$verific$crc_init_sel_ff_reg$crc_datapath.v:252$952 ($dff) from module crc_ip (D = $flatten\CRC_UNIT.\DATAPATH.$verific$n518$809, Q = \CRC_UNIT.DATAPATH.crc_init_sel_ff).
Adding EN signal on $flatten\CRC_UNIT.\DATAPATH.$verific$crc_init_ff_reg$crc_datapath.v:266$958 ($dff) from module crc_ip (D = $flatten\CRC_UNIT.\DATAPATH.$verific$n720$834, Q = \CRC_UNIT.DATAPATH.crc_init_ff).
Adding EN signal on $flatten\CRC_UNIT.\DATAPATH.$verific$crc_idr_ff_reg$crc_datapath.v:288$969 ($dff) from module crc_ip (D = $flatten\CRC_UNIT.\DATAPATH.$verific$n991$842, Q = \CRC_UNIT.DATAPATH.crc_idr_ff).
Adding EN signal on $flatten\CRC_UNIT.\DATAPATH.$verific$byte_ff_reg$crc_datapath.v:186$926 ($dff) from module crc_ip (D = $flatten\CRC_UNIT.\DATAPATH.$verific$n269$816, Q = \CRC_UNIT.DATAPATH.byte_ff).
Adding EN signal on $flatten\CRC_UNIT.\DATAPATH.$verific$buffer_ff_reg$crc_datapath.v:186$925 ($dff) from module crc_ip (D = $flatten\CRC_UNIT.\DATAPATH.$verific$n236$815, Q = \CRC_UNIT.DATAPATH.buffer_ff).
Adding EN signal on $flatten\CRC_UNIT.\DATAPATH.$verific$bf_size_ff_reg$crc_datapath.v:207$935 ($dff) from module crc_ip (D = $flatten\CRC_UNIT.\DATAPATH.$verific$n394$823, Q = \CRC_UNIT.DATAPATH.bf_size_ff).
Adding EN signal on $flatten\CRC_UNIT.\CONTROL_UNIT.$verific$state_reset_reg$crc_control_unit.v:287$766 ($dff) from module crc_ip (D = $flatten\CRC_UNIT.\CONTROL_UNIT.$verific$n180$682 [0], Q = \CRC_UNIT.CONTROL_UNIT.state_reset [0]).
Adding EN signal on $flatten\CRC_UNIT.\CONTROL_UNIT.$verific$state_full_reg$crc_control_unit.v:144$698 ($dff) from module crc_ip (D = $flatten\CRC_UNIT.\CONTROL_UNIT.$verific$n12$662, Q = \CRC_UNIT.CONTROL_UNIT.state_full).
Adding EN signal on $flatten\CRC_UNIT.\CONTROL_UNIT.$verific$state_byte_reg$crc_control_unit.v:207$734 ($dff) from module crc_ip (D = $flatten\CRC_UNIT.\CONTROL_UNIT.$verific$n88$672 [0], Q = \CRC_UNIT.CONTROL_UNIT.state_byte [0]).

yosys> opt_clean

3.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..
Removed 8 unused cells and 8 unused wires.
<suppressed ~9 debug messages>

yosys> opt_expr

3.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.

yosys> opt_muxtree

3.42. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \crc_ip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.43. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \crc_ip.
Performed a total of 0 changes.

yosys> opt_merge

3.44. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

yosys> opt_share

3.45. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.46. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.

yosys> opt_muxtree

3.49. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \crc_ip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.50. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \crc_ip.
Performed a total of 0 changes.

yosys> opt_merge

3.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
Removed a total of 0 cells.

yosys> opt_share

3.52. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.53. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..

yosys> opt_expr

3.55. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.
MAX OPT ITERATION = 3

yosys> wreduce -keepdc

3.56. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from port B of cell crc_ip.$auto$opt_dff.cc:195:make_patterns_logic$2886 ($ne).
Removed top 24 bits (of 32) from port B of cell crc_ip.$flatten\HOST_INTERFACE.$verific$and_77$host_interface.v:220$2784 ($and).
Removed top 1 bits (of 9) from port B of cell crc_ip.$flatten\HOST_INTERFACE.$verific$and_93$host_interface.v:218$2787 ($and).
Removed top 2 bits (of 3) from port B of cell crc_ip.$flatten\HOST_INTERFACE.$verific$equal_39$host_interface.v:180$2749 ($eq).
Removed top 1 bits (of 3) from port B of cell crc_ip.$flatten\HOST_INTERFACE.$verific$equal_43$host_interface.v:182$2753 ($eq).
Removed top 1 bits (of 3) from FF cell crc_ip.$auto$ff.cc:262:slice$2860 ($dffe).
Removed top 1 bits (of 2) from port B of cell crc_ip.$auto$opt_dff.cc:195:make_patterns_logic$2865 ($ne).
Removed top 1 bits (of 2) from port B of cell crc_ip.$auto$opt_dff.cc:195:make_patterns_logic$2871 ($ne).
Removed top 1 bits (of 2) from port B of cell crc_ip.$auto$opt_dff.cc:195:make_patterns_logic$2874 ($ne).
Removed top 1 bits (of 2) from port B of cell crc_ip.$auto$opt_dff.cc:195:make_patterns_logic$2877 ($ne).
Removed top 1 bits (of 2) from port B of cell crc_ip.$auto$opt_dff.cc:195:make_patterns_logic$2880 ($ne).
Removed top 2 bits (of 3) from port B of cell crc_ip.$auto$opt_dff.cc:195:make_patterns_logic$2883 ($ne).
Removed top 1 bits (of 2) from port B of cell crc_ip.$auto$opt_dff.cc:195:make_patterns_logic$2889 ($ne).
Removed top 2 bits (of 3) from mux cell crc_ip.$flatten\CRC_UNIT.\CONTROL_UNIT.$verific$mux_118$crc_control_unit.v:296$774 ($mux).
Removed top 1 bits (of 3) from port B of cell crc_ip.$flatten\CRC_UNIT.\CONTROL_UNIT.$verific$equal_79$crc_control_unit.v:261$747 ($eq).
Removed top 1 bits (of 3) from port B of cell crc_ip.$flatten\CRC_UNIT.\CONTROL_UNIT.$verific$equal_17$crc_control_unit.v:149$707 ($eq).
Removed top 1 bits (of 3) from port B of cell crc_ip.$flatten\CRC_UNIT.\CONTROL_UNIT.$verific$equal_153$crc_control_unit.v:340$791 ($eq).
Removed top 2 bits (of 3) from port B of cell crc_ip.$flatten\CRC_UNIT.\CONTROL_UNIT.$verific$equal_150$crc_control_unit.v:339$788 ($eq).
Removed top 2 bits (of 3) from port B of cell crc_ip.$flatten\CRC_UNIT.\CONTROL_UNIT.$verific$equal_13$crc_control_unit.v:148$703 ($eq).
Removed top 1 bits (of 2) from port B of cell crc_ip.$flatten\CRC_UNIT.\CONTROL_UNIT.$verific$equal_12$crc_control_unit.v:148$702 ($eq).
Removed top 6 bits (of 31) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.\genblk4[0].CRC_COMB.$verific$and_68$crc_comb.v:112$2646 ($and).
Removed top 2 bits (of 5) from port B of cell crc_ip.$auto$opt_dff.cc:195:make_patterns_logic$2907 ($ne).
Removed top 2 bits (of 3) from port B of cell crc_ip.$auto$opt_dff.cc:195:make_patterns_logic$2898 ($ne).
Removed top 1 bits (of 2) from port B of cell crc_ip.$auto$opt_dff.cc:195:make_patterns_logic$2895 ($ne).
Removed top 6 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_101$crc_parrallel.v:105$1393 ($and).
Removed top 5 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_105$crc_parrallel.v:105$1396 ($and).
Removed top 4 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_109$crc_parrallel.v:105$1399 ($and).
Removed top 3 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_113$crc_parrallel.v:105$1402 ($and).
Removed top 2 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_117$crc_parrallel.v:105$1405 ($and).
Removed top 1 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_121$crc_parrallel.v:105$1408 ($and).
Removed top 28 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_13$crc_parrallel.v:105$1327 ($and).
Removed top 6 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_130$crc_parrallel.v:115$1415 ($and).
Removed top 5 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_135$crc_parrallel.v:115$1418 ($and).
Removed top 4 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_140$crc_parrallel.v:115$1421 ($and).
Removed top 3 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_145$crc_parrallel.v:115$1424 ($and).
Removed top 2 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_150$crc_parrallel.v:115$1427 ($and).
Removed top 1 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_155$crc_parrallel.v:115$1430 ($and).
Removed top 27 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_17$crc_parrallel.v:105$1330 ($and).
Removed top 7 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_170$crc_parrallel.v:115$1439 ($and).
Removed top 6 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_175$crc_parrallel.v:115$1442 ($and).
Removed top 5 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_180$crc_parrallel.v:115$1445 ($and).
Removed top 4 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_185$crc_parrallel.v:115$1448 ($and).
Removed top 3 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_190$crc_parrallel.v:115$1451 ($and).
Removed top 2 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_195$crc_parrallel.v:115$1454 ($and).
Removed top 1 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_200$crc_parrallel.v:115$1457 ($and).
Removed top 26 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_21$crc_parrallel.v:105$1333 ($and).
Removed top 15 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_210$crc_parrallel.v:115$1463 ($and).
Removed top 14 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_215$crc_parrallel.v:115$1466 ($and).
Removed top 13 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_220$crc_parrallel.v:115$1469 ($and).
Removed top 12 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_225$crc_parrallel.v:115$1472 ($and).
Removed top 11 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_230$crc_parrallel.v:115$1475 ($and).
Removed top 10 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_235$crc_parrallel.v:115$1478 ($and).
Removed top 9 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_240$crc_parrallel.v:115$1481 ($and).
Removed top 8 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_245$crc_parrallel.v:115$1484 ($and).
Removed top 25 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_25$crc_parrallel.v:105$1336 ($and).
Removed top 7 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_250$crc_parrallel.v:115$1487 ($and).
Removed top 6 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_255$crc_parrallel.v:115$1490 ($and).
Removed top 5 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_260$crc_parrallel.v:115$1493 ($and).
Removed top 4 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_265$crc_parrallel.v:115$1496 ($and).
Removed top 3 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_270$crc_parrallel.v:115$1499 ($and).
Removed top 2 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_275$crc_parrallel.v:115$1502 ($and).
Removed top 1 bits (of 32) from port A of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_280$crc_parrallel.v:115$1505 ($and).
Removed top 24 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_29$crc_parrallel.v:105$1339 ($and).
Removed top 1 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_293$crc_parrallel.v:124$1516 ($and).
Removed top 2 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_297$crc_parrallel.v:124$1519 ($and).
Removed top 3 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_301$crc_parrallel.v:124$1522 ($and).
Removed top 4 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_305$crc_parrallel.v:124$1525 ($and).
Removed top 5 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_309$crc_parrallel.v:124$1528 ($and).
Removed top 6 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_313$crc_parrallel.v:124$1531 ($and).
Removed top 7 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_317$crc_parrallel.v:124$1534 ($and).
Removed top 8 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_321$crc_parrallel.v:124$1537 ($and).
Removed top 9 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_325$crc_parrallel.v:124$1540 ($and).
Removed top 10 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_329$crc_parrallel.v:124$1543 ($and).
Removed top 23 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_33$crc_parrallel.v:105$1342 ($and).
Removed top 11 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_333$crc_parrallel.v:124$1546 ($and).
Removed top 12 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_337$crc_parrallel.v:124$1549 ($and).
Removed top 13 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_341$crc_parrallel.v:124$1552 ($and).
Removed top 14 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_345$crc_parrallel.v:124$1555 ($and).
Removed top 15 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_349$crc_parrallel.v:124$1558 ($and).
Removed top 16 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_353$crc_parrallel.v:124$1561 ($and).
Removed top 17 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_357$crc_parrallel.v:124$1564 ($and).
Removed top 18 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_361$crc_parrallel.v:124$1567 ($and).
Removed top 19 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_365$crc_parrallel.v:124$1570 ($and).
Removed top 20 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_369$crc_parrallel.v:124$1573 ($and).
Removed top 22 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_37$crc_parrallel.v:105$1345 ($and).
Removed top 21 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_373$crc_parrallel.v:124$1576 ($and).
Removed top 22 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_377$crc_parrallel.v:124$1579 ($and).
Removed top 23 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_381$crc_parrallel.v:124$1582 ($and).
Removed top 24 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_385$crc_parrallel.v:124$1585 ($and).
Removed top 25 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_389$crc_parrallel.v:124$1588 ($and).
Removed top 26 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_393$crc_parrallel.v:124$1591 ($and).
Removed top 27 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_397$crc_parrallel.v:124$1594 ($and).
Removed top 28 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_401$crc_parrallel.v:124$1597 ($and).
Removed top 29 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_405$crc_parrallel.v:124$1600 ($and).
Removed top 30 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_409$crc_parrallel.v:124$1603 ($and).
Removed top 21 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_41$crc_parrallel.v:105$1348 ($and).
Removed top 31 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_413$crc_parrallel.v:124$1606 ($and).
Removed top 20 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_45$crc_parrallel.v:105$1351 ($and).
Removed top 19 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_49$crc_parrallel.v:105$1354 ($and).
Removed top 30 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_5$crc_parrallel.v:105$1321 ($and).
Removed top 18 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_53$crc_parrallel.v:105$1357 ($and).
Removed top 17 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_57$crc_parrallel.v:105$1360 ($and).
Removed top 16 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_61$crc_parrallel.v:105$1363 ($and).
Removed top 15 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_65$crc_parrallel.v:105$1366 ($and).
Removed top 14 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_69$crc_parrallel.v:105$1369 ($and).
Removed top 13 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_73$crc_parrallel.v:105$1372 ($and).
Removed top 12 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_77$crc_parrallel.v:105$1375 ($and).
Removed top 11 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_81$crc_parrallel.v:105$1378 ($and).
Removed top 10 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_85$crc_parrallel.v:105$1381 ($and).
Removed top 9 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_89$crc_parrallel.v:105$1384 ($and).
Removed top 29 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_9$crc_parrallel.v:105$1324 ($and).
Removed top 8 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_93$crc_parrallel.v:105$1387 ($and).
Removed top 7 bits (of 32) from port B of cell crc_ip.$flatten\CRC_UNIT.\DATAPATH.\CRC_UNIT.$verific$and_97$crc_parrallel.v:105$1390 ($and).
Removed top 2 bits (of 3) from wire crc_ip.$flatten\CRC_UNIT.\CONTROL_UNIT.$verific$n201$684.
Removed top 1 bits (of 2) from wire crc_ip.$flatten\CRC_UNIT.\DATAPATH.$auto$bmuxmap.cc:58:execute$2804.
Removed top 1 bits (of 2) from wire crc_ip.$flatten\CRC_UNIT.\DATAPATH.$auto$bmuxmap.cc:58:execute$2809.

yosys> peepopt

3.57. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.59. Executing BMUXMAP pass.

yosys> demuxmap

3.60. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.61. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module crc_ip:
  created 0 $alu and 0 $macc cells.

yosys> opt_expr

3.62. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.

yosys> opt_merge -nomux

3.63. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.64. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \crc_ip..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

yosys> opt_reduce

3.65. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \crc_ip.
Performed a total of 0 changes.

yosys> opt_merge

3.66. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
Removed a total of 0 cells.

yosys> opt_share

3.67. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.68. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.69. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..

yosys> opt_expr

3.70. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.
MAX OPT ITERATION = 1

yosys> stat

3.71. Printing statistics.

=== crc_ip ===

   Number of wires:                602
   Number of wire bits:          11102
   Number of public wires:         363
   Number of public wire bits:    7095
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                424
     $and                          155
     $dff                            2
     $dffe                          18
     $eq                            16
     $logic_not                      4
     $mux                           69
     $ne                            17
     $not                            8
     $or                            19
     $pmux                           1
     $reduce_and                     2
     $reduce_bool                    2
     $reduce_or                     95
     $xor                           16


yosys> memory -nomap

3.72. Executing MEMORY pass.

yosys> opt_mem

3.72.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.72.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.72.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.72.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.72.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.72.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..

yosys> memory_share

3.72.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.72.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.72.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..

yosys> memory_collect

3.72.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.73. Printing statistics.

=== crc_ip ===

   Number of wires:                602
   Number of wire bits:          11102
   Number of public wires:         363
   Number of public wire bits:    7095
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                424
     $and                          155
     $dff                            2
     $dffe                          18
     $eq                            16
     $logic_not                      4
     $mux                           69
     $ne                            17
     $not                            8
     $or                            19
     $pmux                           1
     $reduce_and                     2
     $reduce_bool                    2
     $reduce_or                     95
     $xor                           16


yosys> muxpack

3.74. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~61 debug messages>

yosys> opt_clean

3.75. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..

yosys> pmuxtree

3.76. Executing PMUXTREE pass.

yosys> muxpack

3.77. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~63 debug messages>

yosys> memory_map

3.78. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.79. Printing statistics.

=== crc_ip ===

   Number of wires:                608
   Number of wire bits:          11111
   Number of public wires:         363
   Number of public wire bits:    7095
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                429
     $and                          155
     $dff                            2
     $dffe                          18
     $eq                            16
     $logic_not                      4
     $mux                           72
     $ne                            17
     $not                            9
     $or                            20
     $reduce_and                     2
     $reduce_bool                    2
     $reduce_or                     96
     $xor                           16


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.80. Executing TECHMAP pass (map to technology primitives).

3.80.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.80.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.80.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~500 debug messages>

yosys> stat

3.81. Printing statistics.

=== crc_ip ===

   Number of wires:               1203
   Number of wire bits:          14237
   Number of public wires:         363
   Number of public wire bits:    7095
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               8197
     $_AND_                       3754
     $_DFFE_PP_                    191
     $_DFF_P_                        4
     $_MUX_                        682
     $_NOT_                         59
     $_OR_                        3160
     $_XOR_                        347


yosys> opt_expr

3.82. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.
<suppressed ~6189 debug messages>

yosys> opt_merge -nomux

3.83. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
<suppressed ~258 debug messages>
Removed a total of 86 cells.

yosys> opt_muxtree

3.84. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \crc_ip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.85. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \crc_ip.
Performed a total of 0 changes.

yosys> opt_merge

3.86. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
Removed a total of 0 cells.

yosys> opt_share

3.87. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.88. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.89. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..
Removed 2 unused cells and 604 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.90. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.

yosys> opt_muxtree

3.91. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \crc_ip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.92. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \crc_ip.
Performed a total of 0 changes.

yosys> opt_merge

3.93. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
Removed a total of 0 cells.

yosys> opt_share

3.94. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.95. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.96. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..

yosys> opt_expr

3.97. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.
MAX OPT ITERATION = 2

yosys> opt_expr -full

3.98. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.
<suppressed ~246 debug messages>

yosys> techmap -map +/techmap.v

3.99. Executing TECHMAP pass (map to technology primitives).

3.99.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.99.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.100. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.

yosys> opt_merge -nomux

3.101. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

yosys> opt_muxtree

3.102. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \crc_ip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.103. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \crc_ip.
Performed a total of 0 changes.

yosys> opt_merge

3.104. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.105. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.106. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..
Removed 0 unused cells and 15 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.107. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.
MAX OPT ITERATION = 1

yosys> abc -dff

3.108. Executing ABC pass (technology mapping using ABC).

3.108.1. Summary of detected clock domains:
  38 cells in clk=\HCLK, en=$auto$opt_dff.cc:194:make_patterns_logic$2900, arst={ }, srst={ }
  13 cells in clk=\HCLK, en=$auto$opt_dff.cc:194:make_patterns_logic$2897, arst={ }, srst={ }
  106 cells in clk=\HCLK, en=$auto$opt_dff.cc:194:make_patterns_logic$2894, arst={ }, srst={ }
  37 cells in clk=\HCLK, en=$auto$opt_dff.cc:194:make_patterns_logic$2888, arst={ }, srst={ }
  197 cells in clk=\HCLK, en=$auto$opt_dff.cc:194:make_patterns_logic$2885, arst={ }, srst={ }
  22 cells in clk=\HCLK, en=$auto$opt_dff.cc:194:make_patterns_logic$2882, arst={ }, srst={ }
  729 cells in clk=\HCLK, en=$auto$opt_dff.cc:194:make_patterns_logic$2879, arst={ }, srst={ }
  327 cells in clk=\HCLK, en=$auto$opt_dff.cc:194:make_patterns_logic$2876, arst={ }, srst={ }
  25 cells in clk=\HCLK, en=$auto$opt_dff.cc:194:make_patterns_logic$2913, arst={ }, srst={ }
  38 cells in clk=\HCLK, en={ }, arst={ }, srst={ }
  45 cells in clk=\HCLK, en=$auto$opt_dff.cc:194:make_patterns_logic$2864, arst={ }, srst={ }
  29 cells in clk=\HCLK, en=$auto$opt_dff.cc:219:make_patterns_logic$2855, arst={ }, srst={ }
  120 cells in clk=\HCLK, en=$auto$opt_dff.cc:194:make_patterns_logic$2870, arst={ }, srst={ }
  61 cells in clk=\HCLK, en=$auto$opt_dff.cc:194:make_patterns_logic$2873, arst={ }, srst={ }
  27 cells in clk=\HCLK, en=$auto$opt_dff.cc:219:make_patterns_logic$2910, arst={ }, srst={ }

3.108.2. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $auto$opt_dff.cc:194:make_patterns_logic$2900
Extracted 38 gates and 59 wires to a netlist network with 19 inputs and 15 outputs.

3.108.2.1. Executing ABC.

3.108.3. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $auto$opt_dff.cc:194:make_patterns_logic$2897
Extracted 13 gates and 24 wires to a netlist network with 10 inputs and 6 outputs.

3.108.3.1. Executing ABC.

3.108.4. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $auto$opt_dff.cc:194:make_patterns_logic$2894
Extracted 106 gates and 152 wires to a netlist network with 45 inputs and 42 outputs.

3.108.4.1. Executing ABC.

3.108.5. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $auto$opt_dff.cc:194:make_patterns_logic$2888
Extracted 37 gates and 58 wires to a netlist network with 21 inputs and 16 outputs.

3.108.5.1. Executing ABC.

3.108.6. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $auto$opt_dff.cc:194:make_patterns_logic$2885
Extracted 197 gates and 301 wires to a netlist network with 103 inputs and 66 outputs.

3.108.6.1. Executing ABC.

3.108.7. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $auto$opt_dff.cc:194:make_patterns_logic$2882
Extracted 22 gates and 33 wires to a netlist network with 11 inputs and 4 outputs.

3.108.7.1. Executing ABC.

3.108.8. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $auto$opt_dff.cc:194:make_patterns_logic$2879
Extracted 729 gates and 840 wires to a netlist network with 111 inputs and 74 outputs.

3.108.8.1. Executing ABC.

3.108.9. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $auto$opt_dff.cc:194:make_patterns_logic$2876
Extracted 327 gates and 450 wires to a netlist network with 122 inputs and 111 outputs.

3.108.9.1. Executing ABC.

3.108.10. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $auto$opt_dff.cc:194:make_patterns_logic$2913
Extracted 25 gates and 39 wires to a netlist network with 13 inputs and 15 outputs.

3.108.10.1. Executing ABC.

3.108.11. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK
Extracted 38 gates and 58 wires to a netlist network with 19 inputs and 16 outputs.

3.108.11.1. Executing ABC.

3.108.12. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $auto$opt_dff.cc:194:make_patterns_logic$2864
Extracted 45 gates and 89 wires to a netlist network with 44 inputs and 36 outputs.

3.108.12.1. Executing ABC.

3.108.13. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2855
Extracted 29 gates and 46 wires to a netlist network with 15 inputs and 14 outputs.

3.108.13.1. Executing ABC.

3.108.14. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $auto$opt_dff.cc:194:make_patterns_logic$2870
Extracted 120 gates and 166 wires to a netlist network with 45 inputs and 45 outputs.

3.108.14.1. Executing ABC.

3.108.15. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $auto$opt_dff.cc:194:make_patterns_logic$2873
Extracted 61 gates and 113 wires to a netlist network with 52 inputs and 30 outputs.

3.108.15.1. Executing ABC.

3.108.16. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2910
Extracted 27 gates and 35 wires to a netlist network with 6 inputs and 7 outputs.

3.108.16.1. Executing ABC.

yosys> abc -dff

3.109. Executing ABC pass (technology mapping using ABC).

3.109.1. Summary of detected clock domains:
  29 cells in clk=\HCLK, en=$abc$12426$auto$opt_dff.cc:194:make_patterns_logic$2882, arst={ }, srst={ }
  19 cells in clk=\HCLK, en=$abc$12060$auto$opt_dff.cc:194:make_patterns_logic$2900, arst={ }, srst={ }
  73 cells in clk=\HCLK, en={ }, arst={ }, srst={ }
  121 cells in clk=\HCLK, en=$abc$13698$auto$opt_dff.cc:194:make_patterns_logic$2870, arst={ }, srst={ }
  46 cells in clk=\HCLK, en=$abc$13621$auto$opt_dff.cc:194:make_patterns_logic$2864, arst={ }, srst={ }
  12 cells in clk=\HCLK, en=$abc$13549$auto$opt_dff.cc:194:make_patterns_logic$2913, arst={ }, srst={ }
  24 cells in clk=\HCLK, en=$abc$13667$auto$opt_dff.cc:219:make_patterns_logic$2855, arst={ }, srst={ }
  84 cells in clk=\HCLK, en=$abc$12111$auto$opt_dff.cc:194:make_patterns_logic$2894, arst={ }, srst={ }
  10 cells in clk=\HCLK, en=$abc$12098$auto$opt_dff.cc:194:make_patterns_logic$2897, arst={ }, srst={ }
  146 cells in clk=\HCLK, en=$abc$12260$auto$opt_dff.cc:194:make_patterns_logic$2885, arst={ }, srst={ }
  743 cells in clk=\HCLK, en=$abc$12442$auto$opt_dff.cc:194:make_patterns_logic$2879, arst={ }, srst={ }
  34 cells in clk=\HCLK, en=$abc$12218$auto$opt_dff.cc:194:make_patterns_logic$2888, arst={ }, srst={ }
  335 cells in clk=\HCLK, en=$abc$13220$auto$opt_dff.cc:194:make_patterns_logic$2876, arst={ }, srst={ }
  85 cells in clk=\HCLK, en=$abc$13823$auto$opt_dff.cc:194:make_patterns_logic$2873, arst={ }, srst={ }
  23 cells in clk=\HCLK, en=$abc$13929$auto$opt_dff.cc:219:make_patterns_logic$2910, arst={ }, srst={ }

3.109.2. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$12426$auto$opt_dff.cc:194:make_patterns_logic$2882
Extracted 29 gates and 73 wires to a netlist network with 44 inputs and 19 outputs.

3.109.2.1. Executing ABC.

3.109.3. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$12060$auto$opt_dff.cc:194:make_patterns_logic$2900
Extracted 19 gates and 32 wires to a netlist network with 13 inputs and 10 outputs.

3.109.3.1. Executing ABC.

3.109.4. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK
Extracted 73 gates and 99 wires to a netlist network with 26 inputs and 19 outputs.

3.109.4.1. Executing ABC.

3.109.5. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$13698$auto$opt_dff.cc:194:make_patterns_logic$2870
Extracted 121 gates and 165 wires to a netlist network with 44 inputs and 44 outputs.

3.109.5.1. Executing ABC.

3.109.6. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$13621$auto$opt_dff.cc:194:make_patterns_logic$2864
Extracted 46 gates and 90 wires to a netlist network with 44 inputs and 36 outputs.

3.109.6.1. Executing ABC.

3.109.7. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$13549$auto$opt_dff.cc:194:make_patterns_logic$2913
Extracted 12 gates and 20 wires to a netlist network with 8 inputs and 10 outputs.

3.109.7.1. Executing ABC.

3.109.8. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$13667$auto$opt_dff.cc:219:make_patterns_logic$2855
Extracted 24 gates and 39 wires to a netlist network with 15 inputs and 14 outputs.

3.109.8.1. Executing ABC.

3.109.9. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$12111$auto$opt_dff.cc:194:make_patterns_logic$2894
Extracted 84 gates and 123 wires to a netlist network with 39 inputs and 36 outputs.

3.109.9.1. Executing ABC.

3.109.10. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$12098$auto$opt_dff.cc:194:make_patterns_logic$2897
Extracted 10 gates and 19 wires to a netlist network with 9 inputs and 6 outputs.

3.109.10.1. Executing ABC.

3.109.11. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$12260$auto$opt_dff.cc:194:make_patterns_logic$2885
Extracted 146 gates and 230 wires to a netlist network with 84 inputs and 67 outputs.

3.109.11.1. Executing ABC.

3.109.12. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$12442$auto$opt_dff.cc:194:make_patterns_logic$2879
Extracted 743 gates and 849 wires to a netlist network with 106 inputs and 71 outputs.

3.109.12.1. Executing ABC.

3.109.13. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$12218$auto$opt_dff.cc:194:make_patterns_logic$2888
Extracted 34 gates and 54 wires to a netlist network with 20 inputs and 9 outputs.

3.109.13.1. Executing ABC.

3.109.14. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$13220$auto$opt_dff.cc:194:make_patterns_logic$2876
Extracted 335 gates and 456 wires to a netlist network with 121 inputs and 107 outputs.

3.109.14.1. Executing ABC.

3.109.15. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$13823$auto$opt_dff.cc:194:make_patterns_logic$2873
Extracted 85 gates and 133 wires to a netlist network with 48 inputs and 23 outputs.

3.109.15.1. Executing ABC.

3.109.16. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$13929$auto$opt_dff.cc:219:make_patterns_logic$2910
Extracted 23 gates and 29 wires to a netlist network with 6 inputs and 5 outputs.

3.109.16.1. Executing ABC.

yosys> abc -dff

3.110. Executing ABC pass (technology mapping using ABC).

3.110.1. Summary of detected clock domains:
  19 cells in clk=\HCLK, en=$abc$13954$abc$12426$auto$opt_dff.cc:194:make_patterns_logic$2882, arst={ }, srst={ }
  30 cells in clk=\HCLK, en=$abc$13985$abc$12060$auto$opt_dff.cc:194:make_patterns_logic$2900, arst={ }, srst={ }
  61 cells in clk=\HCLK, en={ }, arst={ }, srst={ }
  44 cells in clk=\HCLK, en=$abc$14209$abc$13621$auto$opt_dff.cc:194:make_patterns_logic$2864, arst={ }, srst={ }
  13 cells in clk=\HCLK, en=$abc$14255$abc$13549$auto$opt_dff.cc:194:make_patterns_logic$2913, arst={ }, srst={ }
  24 cells in clk=\HCLK, en=$abc$14269$abc$13667$auto$opt_dff.cc:219:make_patterns_logic$2855, arst={ }, srst={ }
  10 cells in clk=\HCLK, en=$abc$14400$abc$12098$auto$opt_dff.cc:194:make_patterns_logic$2897, arst={ }, srst={ }
  90 cells in clk=\HCLK, en=$abc$14299$abc$12111$auto$opt_dff.cc:194:make_patterns_logic$2894, arst={ }, srst={ }
  336 cells in clk=\HCLK, en=$abc$15404$abc$13220$auto$opt_dff.cc:194:make_patterns_logic$2876, arst={ }, srst={ }
  151 cells in clk=\HCLK, en=$abc$14412$abc$12260$auto$opt_dff.cc:194:make_patterns_logic$2885, arst={ }, srst={ }
  767 cells in clk=\HCLK, en=$abc$14579$abc$12442$auto$opt_dff.cc:194:make_patterns_logic$2879, arst={ }, srst={ }
  34 cells in clk=\HCLK, en=$abc$15369$abc$12218$auto$opt_dff.cc:194:make_patterns_logic$2888, arst={ }, srst={ }
  123 cells in clk=\HCLK, en=$abc$14084$abc$13698$auto$opt_dff.cc:194:make_patterns_logic$2870, arst={ }, srst={ }
  78 cells in clk=\HCLK, en=$abc$15742$abc$13823$auto$opt_dff.cc:194:make_patterns_logic$2873, arst={ }, srst={ }
  24 cells in clk=\HCLK, en=$abc$15847$abc$13929$auto$opt_dff.cc:219:make_patterns_logic$2910, arst={ }, srst={ }

3.110.2. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$13954$abc$12426$auto$opt_dff.cc:194:make_patterns_logic$2882
Extracted 19 gates and 42 wires to a netlist network with 23 inputs and 8 outputs.

3.110.2.1. Executing ABC.

3.110.3. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$13985$abc$12060$auto$opt_dff.cc:194:make_patterns_logic$2900
Extracted 30 gates and 52 wires to a netlist network with 22 inputs and 9 outputs.

3.110.3.1. Executing ABC.

3.110.4. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK
Extracted 61 gates and 83 wires to a netlist network with 22 inputs and 20 outputs.

3.110.4.1. Executing ABC.

3.110.5. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$14209$abc$13621$auto$opt_dff.cc:194:make_patterns_logic$2864
Extracted 44 gates and 88 wires to a netlist network with 44 inputs and 36 outputs.

3.110.5.1. Executing ABC.

3.110.6. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$14255$abc$13549$auto$opt_dff.cc:194:make_patterns_logic$2913
Extracted 13 gates and 21 wires to a netlist network with 8 inputs and 9 outputs.

3.110.6.1. Executing ABC.

3.110.7. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$14269$abc$13667$auto$opt_dff.cc:219:make_patterns_logic$2855
Extracted 24 gates and 39 wires to a netlist network with 15 inputs and 14 outputs.

3.110.7.1. Executing ABC.

3.110.8. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$14400$abc$12098$auto$opt_dff.cc:194:make_patterns_logic$2897
Extracted 10 gates and 18 wires to a netlist network with 8 inputs and 6 outputs.

3.110.8.1. Executing ABC.

3.110.9. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$14299$abc$12111$auto$opt_dff.cc:194:make_patterns_logic$2894
Extracted 90 gates and 130 wires to a netlist network with 40 inputs and 37 outputs.

3.110.9.1. Executing ABC.

3.110.10. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$15404$abc$13220$auto$opt_dff.cc:194:make_patterns_logic$2876
Extracted 336 gates and 458 wires to a netlist network with 122 inputs and 106 outputs.

3.110.10.1. Executing ABC.

3.110.11. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$14412$abc$12260$auto$opt_dff.cc:194:make_patterns_logic$2885
Extracted 151 gates and 238 wires to a netlist network with 87 inputs and 66 outputs.

3.110.11.1. Executing ABC.

3.110.12. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$14579$abc$12442$auto$opt_dff.cc:194:make_patterns_logic$2879
Extracted 767 gates and 874 wires to a netlist network with 107 inputs and 70 outputs.

3.110.12.1. Executing ABC.

3.110.13. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$15369$abc$12218$auto$opt_dff.cc:194:make_patterns_logic$2888
Extracted 34 gates and 54 wires to a netlist network with 20 inputs and 9 outputs.

3.110.13.1. Executing ABC.

3.110.14. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$14084$abc$13698$auto$opt_dff.cc:194:make_patterns_logic$2870
Extracted 123 gates and 165 wires to a netlist network with 42 inputs and 44 outputs.

3.110.14.1. Executing ABC.

3.110.15. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$15742$abc$13823$auto$opt_dff.cc:194:make_patterns_logic$2873
Extracted 78 gates and 128 wires to a netlist network with 50 inputs and 24 outputs.

3.110.15.1. Executing ABC.

3.110.16. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$15847$abc$13929$auto$opt_dff.cc:219:make_patterns_logic$2910
Extracted 24 gates and 29 wires to a netlist network with 5 inputs and 6 outputs.

3.110.16.1. Executing ABC.

yosys> abc -dff

3.111. Executing ABC pass (technology mapping using ABC).

3.111.1. Summary of detected clock domains:
  135 cells in clk=\HCLK, en=$abc$17521$abc$14084$abc$13698$auto$opt_dff.cc:194:make_patterns_logic$2870, arst={ }, srst={ }
  8 cells in clk=\HCLK, en=$abc$15871$abc$13954$abc$12426$auto$opt_dff.cc:194:make_patterns_logic$2882, arst={ }, srst={ }
  24 cells in clk=\HCLK, en=$abc$15892$abc$13985$abc$12060$auto$opt_dff.cc:194:make_patterns_logic$2900, arst={ }, srst={ }
  45 cells in clk=\HCLK, en=$abc$15984$abc$14209$abc$13621$auto$opt_dff.cc:194:make_patterns_logic$2864, arst={ }, srst={ }
  15 cells in clk=\HCLK, en=$abc$16030$abc$14255$abc$13549$auto$opt_dff.cc:194:make_patterns_logic$2913, arst={ }, srst={ }
  58 cells in clk=\HCLK, en={ }, arst={ }, srst={ }
  23 cells in clk=\HCLK, en=$abc$16047$abc$14269$abc$13667$auto$opt_dff.cc:219:make_patterns_logic$2855, arst={ }, srst={ }
  17 cells in clk=\HCLK, en=$abc$16077$abc$14400$abc$12098$auto$opt_dff.cc:194:make_patterns_logic$2897, arst={ }, srst={ }
  94 cells in clk=\HCLK, en=$abc$16089$abc$14299$abc$12111$auto$opt_dff.cc:194:make_patterns_logic$2894, arst={ }, srst={ }
  336 cells in clk=\HCLK, en=$abc$16191$abc$15404$abc$13220$auto$opt_dff.cc:194:make_patterns_logic$2876, arst={ }, srst={ }
  143 cells in clk=\HCLK, en=$abc$16528$abc$14412$abc$12260$auto$opt_dff.cc:194:make_patterns_logic$2885, arst={ }, srst={ }
  766 cells in clk=\HCLK, en=$abc$16694$abc$14579$abc$12442$auto$opt_dff.cc:194:make_patterns_logic$2879, arst={ }, srst={ }
  34 cells in clk=\HCLK, en=$abc$17486$abc$15369$abc$12218$auto$opt_dff.cc:194:make_patterns_logic$2888, arst={ }, srst={ }
  79 cells in clk=\HCLK, en=$abc$17646$abc$15742$abc$13823$auto$opt_dff.cc:194:make_patterns_logic$2873, arst={ }, srst={ }
  25 cells in clk=\HCLK, en=$abc$17752$abc$15847$abc$13929$auto$opt_dff.cc:219:make_patterns_logic$2910, arst={ }, srst={ }

3.111.2. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$17521$abc$14084$abc$13698$auto$opt_dff.cc:194:make_patterns_logic$2870
Extracted 135 gates and 189 wires to a netlist network with 54 inputs and 56 outputs.

3.111.2.1. Executing ABC.

3.111.3. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$15871$abc$13954$abc$12426$auto$opt_dff.cc:194:make_patterns_logic$2882
Extracted 8 gates and 20 wires to a netlist network with 12 inputs and 6 outputs.

3.111.3.1. Executing ABC.

3.111.4. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$15892$abc$13985$abc$12060$auto$opt_dff.cc:194:make_patterns_logic$2900
Extracted 24 gates and 39 wires to a netlist network with 15 inputs and 8 outputs.

3.111.4.1. Executing ABC.

3.111.5. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$15984$abc$14209$abc$13621$auto$opt_dff.cc:194:make_patterns_logic$2864
Extracted 45 gates and 88 wires to a netlist network with 43 inputs and 37 outputs.

3.111.5.1. Executing ABC.

3.111.6. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$16030$abc$14255$abc$13549$auto$opt_dff.cc:194:make_patterns_logic$2913
Extracted 15 gates and 23 wires to a netlist network with 8 inputs and 9 outputs.

3.111.6.1. Executing ABC.

3.111.7. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK
Extracted 58 gates and 80 wires to a netlist network with 22 inputs and 18 outputs.

3.111.7.1. Executing ABC.

3.111.8. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$16047$abc$14269$abc$13667$auto$opt_dff.cc:219:make_patterns_logic$2855
Extracted 23 gates and 38 wires to a netlist network with 15 inputs and 14 outputs.

3.111.8.1. Executing ABC.

3.111.9. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$16077$abc$14400$abc$12098$auto$opt_dff.cc:194:make_patterns_logic$2897
Extracted 17 gates and 32 wires to a netlist network with 15 inputs and 5 outputs.

3.111.9.1. Executing ABC.

3.111.10. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$16089$abc$14299$abc$12111$auto$opt_dff.cc:194:make_patterns_logic$2894
Extracted 94 gates and 137 wires to a netlist network with 43 inputs and 40 outputs.

3.111.10.1. Executing ABC.

3.111.11. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$16191$abc$15404$abc$13220$auto$opt_dff.cc:194:make_patterns_logic$2876
Extracted 336 gates and 458 wires to a netlist network with 122 inputs and 106 outputs.

3.111.11.1. Executing ABC.

3.111.12. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$16528$abc$14412$abc$12260$auto$opt_dff.cc:194:make_patterns_logic$2885
Extracted 143 gates and 222 wires to a netlist network with 79 inputs and 66 outputs.

3.111.12.1. Executing ABC.

3.111.13. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$16694$abc$14579$abc$12442$auto$opt_dff.cc:194:make_patterns_logic$2879
Extracted 766 gates and 876 wires to a netlist network with 110 inputs and 59 outputs.

3.111.13.1. Executing ABC.

3.111.14. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$17486$abc$15369$abc$12218$auto$opt_dff.cc:194:make_patterns_logic$2888
Extracted 34 gates and 54 wires to a netlist network with 20 inputs and 9 outputs.

3.111.14.1. Executing ABC.

3.111.15. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$17646$abc$15742$abc$13823$auto$opt_dff.cc:194:make_patterns_logic$2873
Extracted 79 gates and 131 wires to a netlist network with 52 inputs and 28 outputs.

3.111.15.1. Executing ABC.

3.111.16. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \HCLK, enabled by $abc$17752$abc$15847$abc$13929$auto$opt_dff.cc:219:make_patterns_logic$2910
Extracted 25 gates and 37 wires to a netlist network with 12 inputs and 7 outputs.

3.111.16.1. Executing ABC.

yosys> opt_ffinv

3.112. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> opt_expr

3.113. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.

yosys> opt_merge -nomux

3.114. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

yosys> opt_muxtree

3.115. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \crc_ip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.116. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \crc_ip.
Performed a total of 0 changes.

yosys> opt_merge

3.117. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
Removed a total of 0 cells.

yosys> opt_share

3.118. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.119. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.120. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..
Removed 0 unused cells and 8812 unused wires.
<suppressed ~93 debug messages>

yosys> opt_expr

3.121. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.
MAX OPT ITERATION = 1

yosys> bmuxmap

3.122. Executing BMUXMAP pass.

yosys> demuxmap

3.123. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_4SNoB0/abc_tmp_1.scr

3.124. Executing ABC pass (technology mapping using ABC).

3.124.1. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Extracted 1605 gates and 1836 wires to a netlist network with 231 inputs and 228 outputs.

3.124.1.1. Executing ABC.
DE:   #PIs = 231  #Luts =   590  Max Lvl =   8  Avg Lvl =   2.71  [   0.16 sec. at Pass 0]{firstMap}
DE:   #PIs = 231  #Luts =   510  Max Lvl =  11  Avg Lvl =   3.29  [   3.99 sec. at Pass 1]{initMapFlow}
DE:   #PIs = 231  #Luts =   505  Max Lvl =  12  Avg Lvl =   3.43  [   0.74 sec. at Pass 2]{map}
DE:   #PIs = 231  #Luts =   504  Max Lvl =  12  Avg Lvl =   3.43  [   1.75 sec. at Pass 3]{postMap}
DE:   #PIs = 231  #Luts =   487  Max Lvl =  12  Avg Lvl =   3.24  [   0.77 sec. at Pass 4]{map}
DE:   #PIs = 231  #Luts =   484  Max Lvl =  12  Avg Lvl =   3.40  [   2.02 sec. at Pass 5]{postMap}
DE:   #PIs = 231  #Luts =   482  Max Lvl =  12  Avg Lvl =   3.36  [   0.82 sec. at Pass 6]{map}
DE:   #PIs = 231  #Luts =   478  Max Lvl =  11  Avg Lvl =   3.25  [   2.12 sec. at Pass 7]{postMap}
DE:   #PIs = 231  #Luts =   473  Max Lvl =  12  Avg Lvl =   3.21  [   1.26 sec. at Pass 8]{map}
DE:   #PIs = 231  #Luts =   473  Max Lvl =  12  Avg Lvl =   3.21  [   1.63 sec. at Pass 9]{postMap}
DE:   #PIs = 231  #Luts =   473  Max Lvl =  12  Avg Lvl =   3.21  [   1.07 sec. at Pass 10]{map}
DE:   #PIs = 231  #Luts =   473  Max Lvl =  12  Avg Lvl =   3.21  [   1.89 sec. at Pass 11]{postMap}
DE:   #PIs = 231  #Luts =   472  Max Lvl =  11  Avg Lvl =   3.25  [   9.74 sec. at Pass 12]{pushMap}
DE:   #PIs = 231  #Luts =   466  Max Lvl =  12  Avg Lvl =   3.36  [   0.69 sec. at Pass 13]{map}
DE:   #PIs = 231  #Luts =   466  Max Lvl =  12  Avg Lvl =   3.36  [   1.49 sec. at Pass 14]{postMap}
DE:   #PIs = 231  #Luts =   466  Max Lvl =  12  Avg Lvl =   3.36  [   1.05 sec. at Pass 15]{map}
DE:   #PIs = 231  #Luts =   466  Max Lvl =  12  Avg Lvl =   3.36  [   1.58 sec. at Pass 16]{postMap}
DE:   #PIs = 231  #Luts =   466  Max Lvl =  12  Avg Lvl =   3.36  [   8.13 sec. at Pass 17]{pushMap}
DE:   #PIs = 231  #Luts =   466  Max Lvl =  12  Avg Lvl =   3.36  [   0.57 sec. at Pass 18]{finalMap}

yosys> opt_expr

3.125. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.

yosys> opt_merge -nomux

3.126. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.127. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \crc_ip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.128. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \crc_ip.
Performed a total of 0 changes.

yosys> opt_merge

3.129. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
Removed a total of 0 cells.

yosys> opt_share

3.130. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.131. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.132. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..
Removed 0 unused cells and 1791 unused wires.
<suppressed ~95 debug messages>

yosys> opt_expr

3.133. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.134. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.135. Printing statistics.

=== crc_ip ===

   Number of wires:                788
   Number of wire bits:           5118
   Number of public wires:         177
   Number of public wire bits:    4507
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                660
     $_DFFE_PP_                    190
     $_DFF_P_                        4
     $lut                          466


yosys> shregmap -minlen 8 -maxlen 20

3.136. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.137. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.138. Printing statistics.

=== crc_ip ===

   Number of wires:                788
   Number of wire bits:           5118
   Number of public wires:         177
   Number of public wire bits:    4507
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                660
     $_DFFE_PP0P_                  190
     $_DFF_P_                        4
     $lut                          466


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.139. Executing TECHMAP pass (map to technology primitives).

3.139.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.139.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.139.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~986 debug messages>

yosys> opt_expr -mux_undef

3.140. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.
<suppressed ~10560 debug messages>

yosys> simplemap

3.141. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.142. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.

yosys> opt_merge

3.143. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
<suppressed ~6159 debug messages>
Removed a total of 2053 cells.

yosys> opt_dff -nodffe -nosdff

3.144. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.145. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..
Removed 0 unused cells and 2254 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.146. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.
<suppressed ~358 debug messages>

yosys> opt_merge -nomux

3.147. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

yosys> opt_muxtree

3.148. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \crc_ip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.149. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \crc_ip.
Performed a total of 0 changes.

yosys> opt_merge

3.150. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
Removed a total of 0 cells.

yosys> opt_share

3.151. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.152. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.153. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..
Removed 0 unused cells and 22 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.154. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_4SNoB0/abc_tmp_2.scr

3.155. Executing ABC pass (technology mapping using ABC).

3.155.1. Extracting gate netlist of module `\crc_ip' to `<abc-temp-dir>/input.blif'..
Extracted 2024 gates and 2257 wires to a netlist network with 231 inputs and 228 outputs.

3.155.1.1. Executing ABC.
DE:   #PIs = 231  #Luts =   482  Max Lvl =   9  Avg Lvl =   2.70  [   0.17 sec. at Pass 0]{firstMap}
DE:   #PIs = 231  #Luts =   479  Max Lvl =   9  Avg Lvl =   2.97  [   5.20 sec. at Pass 1]{initMapFlow}
DE:   #PIs = 231  #Luts =   478  Max Lvl =  12  Avg Lvl =   3.45  [   0.57 sec. at Pass 2]{map}
DE:   #PIs = 231  #Luts =   473  Max Lvl =  11  Avg Lvl =   3.25  [   2.36 sec. at Pass 3]{postMap}
DE:   #PIs = 231  #Luts =   465  Max Lvl =  11  Avg Lvl =   3.26  [   1.79 sec. at Pass 4]{map}
DE:   #PIs = 231  #Luts =   465  Max Lvl =  11  Avg Lvl =   3.26  [   2.20 sec. at Pass 5]{postMap}
DE:   #PIs = 231  #Luts =   464  Max Lvl =  11  Avg Lvl =   3.25  [   1.42 sec. at Pass 6]{map}
DE:   #PIs = 231  #Luts =   464  Max Lvl =  11  Avg Lvl =   3.25  [   2.72 sec. at Pass 7]{postMap}
DE:   #PIs = 231  #Luts =   464  Max Lvl =  11  Avg Lvl =   3.25  [   1.77 sec. at Pass 8]{map}
DE:   #PIs = 231  #Luts =   464  Max Lvl =  11  Avg Lvl =   3.25  [   3.40 sec. at Pass 9]{postMap}
DE:   #PIs = 231  #Luts =   464  Max Lvl =  11  Avg Lvl =   3.25  [  11.30 sec. at Pass 10]{pushMap}
DE:   #PIs = 231  #Luts =   464  Max Lvl =  11  Avg Lvl =   3.25  [   0.49 sec. at Pass 11]{finalMap}

yosys> opt_expr

3.156. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.

yosys> opt_merge -nomux

3.157. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.158. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \crc_ip..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.159. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \crc_ip.
Performed a total of 0 changes.

yosys> opt_merge

3.160. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\crc_ip'.
Removed a total of 0 cells.

yosys> opt_share

3.161. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.162. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.163. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..
Removed 0 unused cells and 1527 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.164. Executing OPT_EXPR pass (perform const folding).
Optimizing module crc_ip.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.165. Executing HIERARCHY pass (managing design hierarchy).

3.165.1. Analyzing design hierarchy..
Top module:  \crc_ip

3.165.2. Analyzing design hierarchy..
Top module:  \crc_ip
Removed 0 unused modules.

yosys> stat

3.166. Printing statistics.

=== crc_ip ===

   Number of wires:                786
   Number of wire bits:           5116
   Number of public wires:         177
   Number of public wire bits:    4507
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                658
     $lut                          464
     dffsre                        194


yosys> opt_clean -purge

3.167. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \crc_ip..
Removed 0 unused cells and 160 unused wires.
<suppressed ~160 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.168. Executing Verilog backend.
Dumping module `\crc_ip'.

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: 12c38a0257, CPU: user 6.68s system 0.13s, MEM: 68.99 MB peak
Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)
Time spent: 98% 6x abc (449 sec), 0% 27x opt_expr (2 sec), ...
real 103.03
user 432.17
sys 23.57
