
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.92
 Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)


-- Executing script file `yosys.ys' --
echo on

yosys> plugin -i synth-rs

yosys> read -verific

yosys> read -incdir .

yosys> verific -vlog-incdir .

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

yosys> verilog_defaults -add -I.

yosys> read -vhdl salsaa_dm.vhd salsaa_mc.vhd salsaa.vhd

yosys> verific -vhdl salsaa_dm.vhd salsaa_mc.vhd salsaa.vhd

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-INFO [VHDL-1504] default VHDL library search path is now "/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008"
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'salsaa_dm.vhd'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_1164' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_1164.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.standard' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/standard.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'std.textio' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/std/textio.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_unsigned' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_unsigned.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.std_logic_arith' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/std_logic_arith.vdb'
VERIFIC-COMMENT [VHDL-1493] Restoring VHDL unit 'ieee.numeric_std' from file '/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/share/yosys/verific/vhdl_vdbs_2008/ieee/numeric_std.vdb'
VERIFIC-INFO [VHDL-1012] salsaa_dm.vhd:29: analyzing entity 'salsaa_dm'
VERIFIC-INFO [VHDL-1010] salsaa_dm.vhd:47: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'salsaa_mc.vhd'
VERIFIC-INFO [VHDL-1012] salsaa_mc.vhd:28: analyzing entity 'salsaa_mc'
VERIFIC-INFO [VHDL-1010] salsaa_mc.vhd:46: analyzing architecture 'rtl'
VERIFIC-COMMENT [VHDL-1481] Analyzing VHDL file 'salsaa.vhd'
VERIFIC-INFO [VHDL-1012] salsaa.vhd:28: analyzing entity 'salsaa'
VERIFIC-INFO [VHDL-1010] salsaa.vhd:45: analyzing architecture 'rtl'

yosys> synth_rs -top salsaa -tech genesis -goal area -de -no_dsp -no_bram -verilog synthesized.v

3. Executing synth_rs pass: v0.4.79

yosys> read_verilog -lib -specify -nomem2reg +/rapidsilicon/common/cells_sim.v +/rapidsilicon/genesis/cells_sim.v +/rapidsilicon/genesis/dsp_sim.v

3.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

3.3. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

yosys> hierarchy -check -top salsaa

3.4. Executing HIERARCHY pass (managing design hierarchy).
VERIFIC-INFO [VHDL-1067] salsaa.vhd:28: processing 'salsaa(rtl)'
VERIFIC-INFO [VHDL-1067] salsaa_dm.vhd:29: processing 'salsaa_dm(rtl)'
VERIFIC-INFO [VHDL-1067] salsaa_mc.vhd:28: processing 'salsaa_mc(rtl)'
Importing module salsaa.
Importing module salsaa_dm(rtl).
Importing module salsaa_mc(rtl).

3.4.1. Analyzing design hierarchy..
Top module:  \salsaa
Used module:     \salsaa_mc(rtl)
Used module:     \salsaa_dm(rtl)

3.4.2. Analyzing design hierarchy..
Top module:  \salsaa
Used module:     \salsaa_mc(rtl)
Used module:     \salsaa_dm(rtl)
Removed 0 unused modules.

yosys> proc

3.5. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> proc_rmdead

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

yosys> proc_prune

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

yosys> proc_init

3.5.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

3.5.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

yosys> proc_mux

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

yosys> proc_dlatch

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

yosys> proc_dff

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

yosys> proc_memwr

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

yosys> opt_expr -keepdc

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa_mc(rtl).
<suppressed ~10 debug messages>
Optimizing module salsaa_dm(rtl).
<suppressed ~9 debug messages>
Optimizing module salsaa.

yosys> bmuxmap

3.6. Executing BMUXMAP pass.

yosys> demuxmap

3.7. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> flatten

3.8. Executing FLATTEN pass (flatten design).
Deleting now unused module salsaa_dm(rtl).
Deleting now unused module salsaa_mc(rtl).
<suppressed ~2 debug messages>

yosys> bmuxmap

3.9. Executing BMUXMAP pass.

yosys> demuxmap

3.10. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> tribuf -logic -formal

3.11. Executing TRIBUF pass.

yosys> deminout

3.12. Executing DEMINOUT pass (demote inout ports to input or output).

yosys> opt_expr

3.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~439 debug messages>

yosys> opt_clean

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 267 unused wires.
<suppressed ~93 debug messages>

yosys> check

3.15. Executing CHECK pass (checking for obvious problems).
Checking module salsaa...
Found and reported 0 problems.

yosys> opt_expr

3.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~17 debug messages>

yosys> opt_merge -nomux

3.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.18. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $flatten\salsaa_dm_0.$auto$bmuxmap.cc:60:execute$1588: \salsaa_dm_0.state -> { 1'1 \salsaa_dm_0.state [2:0] }
      Replacing known input bits on port B of cell $flatten\salsaa_dm_0.$auto$bmuxmap.cc:60:execute$1574: \salsaa_dm_0.state -> 4'0111
      Replacing known input bits on port B of cell $flatten\salsaa_dm_0.$verific$mux_127$salsaa_dm.vhd:230$200: \salsaa_dm_0.state -> 4'0001
      Replacing known input bits on port B of cell $flatten\salsaa_dm_0.$verific$mux_32$salsaa_dm.vhd:99$157: \salsaa_dm_0.state -> 4'0000
      Replacing known input bits on port B of cell $flatten\salsaa_mc_0.$auto$bmuxmap.cc:60:execute$1246: \salsaa_mc_0.state -> { 1'1 \salsaa_mc_0.state [2:0] }
      Replacing known input bits on port B of cell $flatten\salsaa_mc_0.$auto$bmuxmap.cc:60:execute$1239: \salsaa_mc_0.state -> { 3'011 \salsaa_mc_0.state [0] }
      Replacing known input bits on port A of cell $flatten\salsaa_mc_0.$verific$mux_270$salsaa_mc.vhd:234$761: \salsaa_mc_0.state -> 4'0101
      Replacing known input bits on port A of cell $flatten\salsaa_mc_0.$verific$mux_60$salsaa_mc.vhd:154$614: \salsaa_mc_0.state -> 4'0011
      Replacing known input bits on port A of cell $flatten\salsaa_mc_0.$verific$mux_57$salsaa_mc.vhd:153$611: \salsaa_mc_0.state -> 4'0011
      Replacing known input bits on port A of cell $flatten\salsaa_mc_0.$verific$mux_7$salsaa_mc.vhd:91$584: \salsaa_mc_0.state -> 4'0000
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\salsaa_dm_0.$verific$mux_112$salsaa_dm.vhd:198$197.
Removed 1 multiplexer ports.
<suppressed ~46 debug messages>

yosys> opt_reduce

3.19. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_200$salsaa_mc.vhd:201$708: { $flatten\salsaa_mc_0.$verific$n6061$277 $flatten\salsaa_mc_0.$verific$n6065$281 $auto$opt_reduce.cc:134:opt_pmux$1666 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_201$salsaa_mc.vhd:201$709: { $flatten\salsaa_mc_0.$verific$n6060$276 $flatten\salsaa_mc_0.$verific$n6062$278 $auto$opt_reduce.cc:134:opt_pmux$1668 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_202$salsaa_mc.vhd:201$710: { $flatten\salsaa_mc_0.$verific$n6059$275 $flatten\salsaa_mc_0.$verific$n6063$279 $auto$opt_reduce.cc:134:opt_pmux$1670 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_203$salsaa_mc.vhd:201$711: { $flatten\salsaa_mc_0.$verific$n6058$274 $flatten\salsaa_mc_0.$verific$n6064$280 $auto$opt_reduce.cc:134:opt_pmux$1672 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_204$salsaa_mc.vhd:201$712: { $flatten\salsaa_mc_0.$verific$n6058$274 $flatten\salsaa_mc_0.$verific$n6064$280 $auto$opt_reduce.cc:134:opt_pmux$1674 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_205$salsaa_mc.vhd:201$713: { $flatten\salsaa_mc_0.$verific$n6061$277 $flatten\salsaa_mc_0.$verific$n6065$281 $auto$opt_reduce.cc:134:opt_pmux$1676 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_206$salsaa_mc.vhd:201$714: { $flatten\salsaa_mc_0.$verific$n6060$276 $flatten\salsaa_mc_0.$verific$n6062$278 $auto$opt_reduce.cc:134:opt_pmux$1678 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_207$salsaa_mc.vhd:201$715: { $flatten\salsaa_mc_0.$verific$n6059$275 $flatten\salsaa_mc_0.$verific$n6063$279 $auto$opt_reduce.cc:134:opt_pmux$1680 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_208$salsaa_mc.vhd:201$716: { $flatten\salsaa_mc_0.$verific$n6059$275 $flatten\salsaa_mc_0.$verific$n6063$279 $auto$opt_reduce.cc:134:opt_pmux$1682 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_209$salsaa_mc.vhd:201$717: { $flatten\salsaa_mc_0.$verific$n6058$274 $flatten\salsaa_mc_0.$verific$n6064$280 $auto$opt_reduce.cc:134:opt_pmux$1684 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_210$salsaa_mc.vhd:201$718: { $flatten\salsaa_mc_0.$verific$n6061$277 $flatten\salsaa_mc_0.$verific$n6065$281 $auto$opt_reduce.cc:134:opt_pmux$1686 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_211$salsaa_mc.vhd:201$719: { $flatten\salsaa_mc_0.$verific$n6060$276 $flatten\salsaa_mc_0.$verific$n6062$278 $auto$opt_reduce.cc:134:opt_pmux$1688 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_212$salsaa_mc.vhd:201$720: { $flatten\salsaa_mc_0.$verific$n6060$276 $flatten\salsaa_mc_0.$verific$n6062$278 $auto$opt_reduce.cc:134:opt_pmux$1690 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_213$salsaa_mc.vhd:201$721: { $flatten\salsaa_mc_0.$verific$n6059$275 $flatten\salsaa_mc_0.$verific$n6063$279 $auto$opt_reduce.cc:134:opt_pmux$1692 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_214$salsaa_mc.vhd:201$722: { $flatten\salsaa_mc_0.$verific$n6058$274 $flatten\salsaa_mc_0.$verific$n6064$280 $auto$opt_reduce.cc:134:opt_pmux$1694 }
    New ctrl vector for $pmux cell $flatten\salsaa_mc_0.$verific$select_215$salsaa_mc.vhd:201$723: { $flatten\salsaa_mc_0.$verific$n6061$277 $flatten\salsaa_mc_0.$verific$n6065$281 $auto$opt_reduce.cc:134:opt_pmux$1696 }
  Optimizing cells in module \salsaa.
Performed a total of 16 changes.

yosys> opt_merge

3.20. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

yosys> opt_share

3.21. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.22. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_9$salsaa_mc.vhd:242$816 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_8$salsaa_mc.vhd:242$815 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_7$salsaa_mc.vhd:242$814 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_6$salsaa_mc.vhd:242$813 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_5$salsaa_mc.vhd:242$812 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_4$salsaa_mc.vhd:242$811 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_3$salsaa_mc.vhd:242$810 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_2$salsaa_mc.vhd:242$809 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_16$salsaa_mc.vhd:242$823 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_15$salsaa_mc.vhd:242$822 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_14$salsaa_mc.vhd:242$821 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_13$salsaa_mc.vhd:242$820 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_12$salsaa_mc.vhd:242$819 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_11$salsaa_mc.vhd:242$818 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg_10$salsaa_mc.vhd:242$817 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$x_reg$salsaa_mc.vhd:242$824 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$state_reg$salsaa_mc.vhd:242$806 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$rnds_state_reg$salsaa_mc.vhd:242$826 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$mc_data_buf_reg$salsaa_mc.vhd:242$827 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$idx_reg$salsaa_mc.vhd:242$808 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_mc_0.$verific$calc_state_reg$salsaa_mc.vhd:242$825 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$state_reg$salsaa_dm.vhd:260$246 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_9$salsaa_dm.vhd:260$254 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_8$salsaa_dm.vhd:260$253 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_7$salsaa_dm.vhd:260$252 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_6$salsaa_dm.vhd:260$251 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_5$salsaa_dm.vhd:260$250 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_4$salsaa_dm.vhd:260$249 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_3$salsaa_dm.vhd:260$248 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_2$salsaa_dm.vhd:260$247 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_16$salsaa_dm.vhd:260$261 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_15$salsaa_dm.vhd:260$260 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_14$salsaa_dm.vhd:260$259 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_13$salsaa_dm.vhd:260$258 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_12$salsaa_dm.vhd:260$257 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_11$salsaa_dm.vhd:260$256 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg_10$salsaa_dm.vhd:260$255 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_reg$salsaa_dm.vhd:260$262 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$reg_idx_reg$salsaa_dm.vhd:260$265 ($aldff) from module salsaa.
Removing never-active async load on $flatten\salsaa_dm_0.$verific$data_reg$salsaa_dm.vhd:260$264 ($aldff) from module salsaa.

yosys> opt_clean

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 29 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

yosys> opt_muxtree

3.25. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~45 debug messages>

yosys> opt_reduce

3.26. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_share

3.28. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.29. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> opt_expr

3.31. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
MAX OPT ITERATION = 2

yosys> fsm -encoding binary

3.32. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

3.32.1. Executing FSM_DETECT pass (finding FSMs in design).

yosys> fsm_extract

3.32.2. Executing FSM_EXTRACT pass (extracting FSM from design).

yosys> fsm_opt

3.32.3. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> opt_clean

3.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> fsm_opt

3.32.5. Executing FSM_OPT pass (simple optimizations of FSMs).

yosys> fsm_recode -encoding binary

3.32.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

yosys> fsm_info

3.32.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

yosys> fsm_map

3.32.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

yosys> opt_expr

3.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

yosys> opt_merge -nomux

3.34. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~45 debug messages>

yosys> opt_reduce

3.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_share

3.38. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.39. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_9$salsaa_mc.vhd:242$816 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1047 [31:0], Q = \salsaa_mc_0.x[7]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_8$salsaa_mc.vhd:242$815 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1066 [31:0], Q = \salsaa_mc_0.x[6]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_7$salsaa_mc.vhd:242$814 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1085 [31:0], Q = \salsaa_mc_0.x[5]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_6$salsaa_mc.vhd:242$813 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1104 [31:0], Q = \salsaa_mc_0.x[4]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_5$salsaa_mc.vhd:242$812 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1123 [31:0], Q = \salsaa_mc_0.x[3]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_4$salsaa_mc.vhd:242$811 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1142 [31:0], Q = \salsaa_mc_0.x[2]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_3$salsaa_mc.vhd:242$810 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1161 [31:0], Q = \salsaa_mc_0.x[1]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_2$salsaa_mc.vhd:242$809 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1180 [31:0], Q = \salsaa_mc_0.x[0]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_16$salsaa_mc.vhd:242$823 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$914 [31:0], Q = \salsaa_mc_0.x[14]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_15$salsaa_mc.vhd:242$822 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$933 [31:0], Q = \salsaa_mc_0.x[13]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_14$salsaa_mc.vhd:242$821 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$952 [31:0], Q = \salsaa_mc_0.x[12]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_13$salsaa_mc.vhd:242$820 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$971 [31:0], Q = \salsaa_mc_0.x[11]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_12$salsaa_mc.vhd:242$819 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$990 [31:0], Q = \salsaa_mc_0.x[10]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_11$salsaa_mc.vhd:242$818 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1009 [31:0], Q = \salsaa_mc_0.x[9]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg_10$salsaa_mc.vhd:242$817 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1028 [31:0], Q = \salsaa_mc_0.x[8]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$x_reg$salsaa_mc.vhd:242$824 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$895 [31:0], Q = \salsaa_mc_0.x[15]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$state_reg$salsaa_mc.vhd:242$806 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$verific$n9537$556 [0], Q = \salsaa_mc_0.state [0]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$state_reg$salsaa_mc.vhd:242$806 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$verific$n9537$556 [2:1], Q = \salsaa_mc_0.state [2:1]).
Adding EN signal on $flatten\salsaa_mc_0.$verific$rnds_state_reg$salsaa_mc.vhd:242$826 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$848 [15:8], Q = \salsaa_mc_0.rnds_state).
Adding EN signal on $flatten\salsaa_mc_0.$verific$mc_data_buf_reg$salsaa_mc.vhd:242$827 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$843 [511:0], Q = \salsaa_mc_0.mc_data_buf).
Adding EN signal on $flatten\salsaa_mc_0.$verific$mc_busy_reg$salsaa_mc.vhd:242$807 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$verific$n9542$285, Q = \salsaa_mc_0.mc_busy).
Adding EN signal on $flatten\salsaa_mc_0.$verific$idx_reg$salsaa_mc.vhd:242$808 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$1223 [63:0], Q = \salsaa_mc_0.idx).
Adding EN signal on $flatten\salsaa_mc_0.$verific$calc_state_reg$salsaa_mc.vhd:242$825 ($dff) from module salsaa (D = $flatten\salsaa_mc_0.$auto$bmuxmap.cc:58:execute$867 [15:8], Q = \salsaa_mc_0.calc_state).
Adding EN signal on $flatten\salsaa_dm_0.$verific$state_reg$salsaa_dm.vhd:260$246 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n2599$127 [2:0], Q = \salsaa_dm_0.state [2:0]).
Adding EN signal on $flatten\salsaa_dm_0.$verific$reg_reg_9$salsaa_dm.vhd:260$254 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n2835$135, Q = \salsaa_dm_0.reg[7]).
Adding EN signal on $flatten\salsaa_dm_0.$verific$reg_reg_8$salsaa_dm.vhd:260$253 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n2802$134, Q = \salsaa_dm_0.reg[6]).
Adding EN signal on $flatten\salsaa_dm_0.$verific$reg_reg_7$salsaa_dm.vhd:260$252 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n2769$133, Q = \salsaa_dm_0.reg[5]).
Adding EN signal on $flatten\salsaa_dm_0.$verific$reg_reg_6$salsaa_dm.vhd:260$251 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n2736$132, Q = \salsaa_dm_0.reg[4]).
Adding EN signal on $flatten\salsaa_dm_0.$verific$reg_reg_5$salsaa_dm.vhd:260$250 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n2703$131, Q = \salsaa_dm_0.reg[3]).
Adding EN signal on $flatten\salsaa_dm_0.$verific$reg_reg_4$salsaa_dm.vhd:260$249 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n2670$130, Q = \salsaa_dm_0.reg[2]).
Adding EN signal on $flatten\salsaa_dm_0.$verific$reg_reg_3$salsaa_dm.vhd:260$248 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n2637$129, Q = \salsaa_dm_0.reg[1]).
Adding EN signal on $flatten\salsaa_dm_0.$verific$reg_reg_2$salsaa_dm.vhd:260$247 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n2604$128, Q = \salsaa_dm_0.reg[0]).
Adding EN signal on $flatten\salsaa_dm_0.$verific$reg_reg_16$salsaa_dm.vhd:260$261 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n3066$142, Q = \salsaa_dm_0.reg[14]).
Adding EN signal on $flatten\salsaa_dm_0.$verific$reg_reg_15$salsaa_dm.vhd:260$260 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n3033$141, Q = \salsaa_dm_0.reg[13]).
Adding EN signal on $flatten\salsaa_dm_0.$verific$reg_reg_14$salsaa_dm.vhd:260$259 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n3000$140, Q = \salsaa_dm_0.reg[12]).
Adding EN signal on $flatten\salsaa_dm_0.$verific$reg_reg_13$salsaa_dm.vhd:260$258 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n2967$139, Q = \salsaa_dm_0.reg[11]).
Adding EN signal on $flatten\salsaa_dm_0.$verific$reg_reg_12$salsaa_dm.vhd:260$257 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n2934$138, Q = \salsaa_dm_0.reg[10]).
Adding EN signal on $flatten\salsaa_dm_0.$verific$reg_reg_11$salsaa_dm.vhd:260$256 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n2901$137, Q = \salsaa_dm_0.reg[9]).
Adding EN signal on $flatten\salsaa_dm_0.$verific$reg_reg_10$salsaa_dm.vhd:260$255 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n2868$136, Q = \salsaa_dm_0.reg[8]).
Adding EN signal on $flatten\salsaa_dm_0.$verific$reg_reg$salsaa_dm.vhd:260$262 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n3099$143, Q = \salsaa_dm_0.reg[15]).
Adding EN signal on $flatten\salsaa_dm_0.$verific$reg_idx_reg$salsaa_dm.vhd:260$265 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n3166$145, Q = \salsaa_dm_0.reg_idx).
Adding EN signal on $flatten\salsaa_dm_0.$verific$mc_restart_reg$salsaa_dm.vhd:260$266 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$auto$bmuxmap.cc:58:execute$1603 [0], Q = \salsaa_dm_0.mc_restart).
Adding EN signal on $flatten\salsaa_dm_0.$verific$data_valid_reg$salsaa_dm.vhd:260$263 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n3132$31, Q = \salsaa_dm_0.data_valid).
Adding EN signal on $flatten\salsaa_dm_0.$verific$data_reg$salsaa_dm.vhd:260$264 ($dff) from module salsaa (D = $flatten\salsaa_dm_0.$verific$n3133$144, Q = \salsaa_dm_0.data).

yosys> opt_clean

3.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 62 unused cells and 62 unused wires.
<suppressed ~63 debug messages>

yosys> opt_expr

3.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~34 debug messages>

yosys> opt_muxtree

3.42. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~45 debug messages>

yosys> opt_reduce

3.43. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.44. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
<suppressed ~546 debug messages>
Removed a total of 182 cells.

yosys> opt_share

3.45. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.46. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 182 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

yosys> opt_muxtree

3.49. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~45 debug messages>

yosys> opt_reduce

3.50. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_share

3.52. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.53. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> opt_expr

3.55. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
MAX OPT ITERATION = 3

yosys> wreduce -keepdc

3.56. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell salsaa.$auto$opt_dff.cc:195:make_patterns_logic$1939 ($ne).
Removed top 1 bits (of 3) from port B of cell salsaa.$auto$opt_dff.cc:195:make_patterns_logic$1965 ($ne).
Removed top 1 bits (of 5) from port B of cell salsaa.$auto$opt_dff.cc:195:make_patterns_logic$1978 ($ne).
Removed top 2 bits (of 4) from port B of cell salsaa.$auto$opt_dff.cc:195:make_patterns_logic$1980 ($ne).
Removed top 2 bits (of 3) from port B of cell salsaa.$auto$opt_dff.cc:195:make_patterns_logic$1989 ($ne).
Removed top 1 bits (of 2) from port B of cell salsaa.$auto$opt_dff.cc:195:make_patterns_logic$1993 ($ne).
Removed top 63 bits (of 64) from port B of cell salsaa.$flatten\salsaa_mc_0.$verific$add_216$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$724 ($add).
Removed top 7 bits (of 8) from port B of cell salsaa.$flatten\salsaa_mc_0.$verific$add_47$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$602 ($add).
Removed top 7 bits (of 8) from port B of cell salsaa.$flatten\salsaa_mc_0.$verific$add_54$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$608 ($add).
Removed top 1 bits (of 4) from port B of cell salsaa.$auto$opt_dff.cc:195:make_patterns_logic$2017 ($ne).
Removed top 7 bits (of 8) from port A of cell salsaa.$flatten\salsaa_mc_0.$verific$equal_192$salsaa_mc.vhd:163$698 ($eq).
Removed top 6 bits (of 8) from port A of cell salsaa.$flatten\salsaa_mc_0.$verific$equal_193$salsaa_mc.vhd:168$699 ($eq).
Removed top 6 bits (of 8) from port A of cell salsaa.$flatten\salsaa_mc_0.$verific$equal_194$salsaa_mc.vhd:173$700 ($eq).
Removed top 5 bits (of 8) from port A of cell salsaa.$flatten\salsaa_mc_0.$verific$equal_195$salsaa_mc.vhd:179$701 ($eq).
Removed top 5 bits (of 8) from port A of cell salsaa.$flatten\salsaa_mc_0.$verific$equal_196$salsaa_mc.vhd:184$702 ($eq).
Removed top 5 bits (of 8) from port A of cell salsaa.$flatten\salsaa_mc_0.$verific$equal_197$salsaa_mc.vhd:189$703 ($eq).
Removed top 5 bits (of 8) from port A of cell salsaa.$flatten\salsaa_mc_0.$verific$equal_198$salsaa_mc.vhd:194$704 ($eq).
Removed top 5 bits (of 8) from port B of cell salsaa.$flatten\salsaa_mc_0.$verific$equal_50$salsaa_mc.vhd:147$605 ($eq).
Removed top 4 bits (of 8) from port B of cell salsaa.$flatten\salsaa_mc_0.$verific$equal_51$salsaa_mc.vhd:148$606 ($eq).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_mc_0.$verific$mux_270$salsaa_mc.vhd:234$761 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_mc_0.$verific$mux_57$salsaa_mc.vhd:153$611 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_mc_0.$verific$mux_60$salsaa_mc.vhd:154$614 ($mux).
Removed top 3 bits (of 4) from mux cell salsaa.$flatten\salsaa_mc_0.$verific$mux_7$salsaa_mc.vhd:91$584 ($mux).
Removed top 1 bits (of 5) from port B of cell salsaa.$auto$opt_dff.cc:195:make_patterns_logic$2186 ($ne).
Removed top 1 bits (of 5) from port B of cell salsaa.$auto$opt_dff.cc:195:make_patterns_logic$2163 ($ne).
Removed top 2 bits (of 5) from port B of cell salsaa.$auto$opt_dff.cc:195:make_patterns_logic$2161 ($ne).
Removed top 3 bits (of 4) from port B of cell salsaa.$flatten\salsaa_dm_0.$verific$add_51$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$176 ($add).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_113$salsaa_dm.vhd:198$198 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_127$salsaa_dm.vhd:230$200 ($mux).
Removed top 1 bits (of 12) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_211$salsaa_dm.vhd:130$182 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_32$salsaa_dm.vhd:99$157 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_33$salsaa_dm.vhd:99$158 ($mux).
Removed top 1 bits (of 4) from mux cell salsaa.$flatten\salsaa_dm_0.$verific$mux_34$salsaa_dm.vhd:99$159 ($mux).
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n1205$64.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n1920$98.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n1966$103.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n601$39.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n606$40.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_dm_0.$verific$n611$41.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_mc_0.$verific$n1756$332.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_mc_0.$verific$n1779$335.
Removed top 3 bits (of 4) from wire salsaa.$flatten\salsaa_mc_0.$verific$n528$288.
Removed top 1 bits (of 4) from wire salsaa.$flatten\salsaa_mc_0.$verific$n8402$534.

yosys> peepopt

3.57. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

3.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

yosys> bmuxmap

3.59. Executing BMUXMAP pass.

yosys> demuxmap

3.60. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> alumacc

3.61. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module salsaa:
  creating $macc model for $flatten\salsaa_dm_0.$verific$add_51$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$176 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_103$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$657 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_107$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$661 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_111$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$665 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_115$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$669 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_119$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$673 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_123$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$677 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_127$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$681 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_131$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$682 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_135$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$683 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_139$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$684 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_143$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$685 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_147$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$686 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_151$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$687 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_155$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$688 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_159$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$689 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_163$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$690 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_167$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$691 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_171$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$692 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_175$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$693 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_179$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$694 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_183$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$695 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_187$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$696 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_216$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$724 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_219$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$727 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_222$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$729 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_225$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$731 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_228$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$733 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_231$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$735 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_234$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$737 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_237$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$739 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_240$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$741 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_243$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$743 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_246$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$745 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_249$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$747 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_252$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$749 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_255$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$751 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_258$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$753 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_261$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$755 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_264$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$757 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_47$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$602 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_54$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$608 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_63$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$617 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_67$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$621 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_71$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$625 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_75$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$629 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_79$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$633 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_83$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$637 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_87$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$641 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_91$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$645 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_95$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$649 ($add).
  creating $macc model for $flatten\salsaa_mc_0.$verific$add_99$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$653 ($add).
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_99$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$653.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_95$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$649.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_91$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$645.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_87$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$641.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_83$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$637.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_79$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$633.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_75$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$629.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_71$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$625.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_67$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$621.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_63$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$617.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_54$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$608.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_47$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$602.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_264$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$757.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_261$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$755.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_258$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$753.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_255$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$751.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_252$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$749.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_249$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$747.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_246$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$745.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_243$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$743.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_240$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$741.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_237$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$739.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_234$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$737.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_231$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$735.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_228$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$733.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_225$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$731.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_222$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$729.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_219$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$727.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_216$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$724.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_187$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$696.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_183$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$695.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_179$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$694.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_175$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$693.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_171$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$692.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_167$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$691.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_163$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$690.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_159$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$689.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_155$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$688.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_151$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$687.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_147$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$686.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_143$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$685.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_139$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$684.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_135$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$683.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_131$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$682.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_127$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$681.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_123$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$677.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_119$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$673.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_115$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$669.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_111$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$665.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_107$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$661.
  creating $alu model for $macc $flatten\salsaa_mc_0.$verific$add_103$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$657.
  creating $alu model for $macc $flatten\salsaa_dm_0.$verific$add_51$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$176.
  creating $alu cell for $flatten\salsaa_dm_0.$verific$add_51$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$176: $auto$alumacc.cc:485:replace_alu$2205
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_103$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$657: $auto$alumacc.cc:485:replace_alu$2208
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_107$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$661: $auto$alumacc.cc:485:replace_alu$2211
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_111$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$665: $auto$alumacc.cc:485:replace_alu$2214
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_115$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$669: $auto$alumacc.cc:485:replace_alu$2217
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_119$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$673: $auto$alumacc.cc:485:replace_alu$2220
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_123$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$677: $auto$alumacc.cc:485:replace_alu$2223
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_127$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$681: $auto$alumacc.cc:485:replace_alu$2226
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_131$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$682: $auto$alumacc.cc:485:replace_alu$2229
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_135$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$683: $auto$alumacc.cc:485:replace_alu$2232
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_139$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$684: $auto$alumacc.cc:485:replace_alu$2235
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_143$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$685: $auto$alumacc.cc:485:replace_alu$2238
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_147$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$686: $auto$alumacc.cc:485:replace_alu$2241
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_151$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$687: $auto$alumacc.cc:485:replace_alu$2244
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_155$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$688: $auto$alumacc.cc:485:replace_alu$2247
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_159$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$689: $auto$alumacc.cc:485:replace_alu$2250
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_163$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$690: $auto$alumacc.cc:485:replace_alu$2253
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_167$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$691: $auto$alumacc.cc:485:replace_alu$2256
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_171$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$692: $auto$alumacc.cc:485:replace_alu$2259
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_175$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$693: $auto$alumacc.cc:485:replace_alu$2262
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_179$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$694: $auto$alumacc.cc:485:replace_alu$2265
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_183$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$695: $auto$alumacc.cc:485:replace_alu$2268
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_187$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$696: $auto$alumacc.cc:485:replace_alu$2271
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_216$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$724: $auto$alumacc.cc:485:replace_alu$2274
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_219$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$727: $auto$alumacc.cc:485:replace_alu$2277
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_222$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$729: $auto$alumacc.cc:485:replace_alu$2280
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_225$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$731: $auto$alumacc.cc:485:replace_alu$2283
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_228$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$733: $auto$alumacc.cc:485:replace_alu$2286
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_231$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$735: $auto$alumacc.cc:485:replace_alu$2289
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_234$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$737: $auto$alumacc.cc:485:replace_alu$2292
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_237$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$739: $auto$alumacc.cc:485:replace_alu$2295
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_240$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$741: $auto$alumacc.cc:485:replace_alu$2298
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_243$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$743: $auto$alumacc.cc:485:replace_alu$2301
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_246$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$745: $auto$alumacc.cc:485:replace_alu$2304
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_249$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$747: $auto$alumacc.cc:485:replace_alu$2307
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_252$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$749: $auto$alumacc.cc:485:replace_alu$2310
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_255$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$751: $auto$alumacc.cc:485:replace_alu$2313
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_258$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$753: $auto$alumacc.cc:485:replace_alu$2316
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_261$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$755: $auto$alumacc.cc:485:replace_alu$2319
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_264$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$757: $auto$alumacc.cc:485:replace_alu$2322
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_47$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$602: $auto$alumacc.cc:485:replace_alu$2325
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_54$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$608: $auto$alumacc.cc:485:replace_alu$2328
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_63$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$617: $auto$alumacc.cc:485:replace_alu$2331
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_67$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$621: $auto$alumacc.cc:485:replace_alu$2334
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_71$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$625: $auto$alumacc.cc:485:replace_alu$2337
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_75$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$629: $auto$alumacc.cc:485:replace_alu$2340
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_79$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$633: $auto$alumacc.cc:485:replace_alu$2343
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_83$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$637: $auto$alumacc.cc:485:replace_alu$2346
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_87$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$641: $auto$alumacc.cc:485:replace_alu$2349
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_91$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$645: $auto$alumacc.cc:485:replace_alu$2352
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_95$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$649: $auto$alumacc.cc:485:replace_alu$2355
  creating $alu cell for $flatten\salsaa_mc_0.$verific$add_99$../vhdl_packages/vhdl_2008/src/syn_arit.vhd:838$653: $auto$alumacc.cc:485:replace_alu$2358
  created 52 $alu and 0 $macc cells.

yosys> opt_expr

3.62. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

yosys> opt_merge -nomux

3.63. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.64. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~45 debug messages>

yosys> opt_reduce

3.65. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.66. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_share

3.67. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.68. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.69. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> opt_expr

3.70. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
MAX OPT ITERATION = 1

yosys> stat

3.71. Printing statistics.

=== salsaa ===

   Number of wires:                503
   Number of wire bits:          30127
   Number of public wires:          66
   Number of public wire bits:    3886
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                405
     $alu                           52
     $and                            4
     $dff                            2
     $dffe                          44
     $eq                            10
     $logic_not                      1
     $mux                          208
     $ne                            22
     $not                            7
     $pmux                          16
     $reduce_and                    15
     $reduce_bool                    3
     $reduce_or                      5
     $xor                           16


yosys> memory -nomap

3.72. Executing MEMORY pass.

yosys> opt_mem

3.72.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

3.72.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

3.72.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

yosys> memory_bmux2rom

3.72.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

3.72.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

yosys> opt_clean

3.72.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> memory_share

3.72.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

yosys> opt_mem_widen

3.72.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

3.72.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> memory_collect

3.72.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> stat

3.73. Printing statistics.

=== salsaa ===

   Number of wires:                503
   Number of wire bits:          30127
   Number of public wires:          66
   Number of public wire bits:    3886
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                405
     $alu                           52
     $and                            4
     $dff                            2
     $dffe                          44
     $eq                            10
     $logic_not                      1
     $mux                          208
     $ne                            22
     $not                            7
     $pmux                          16
     $reduce_and                    15
     $reduce_bool                    3
     $reduce_or                      5
     $xor                           16


yosys> muxpack

3.74. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~198 debug messages>

yosys> opt_clean

3.75. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> pmuxtree

3.76. Executing PMUXTREE pass.

yosys> muxpack

3.77. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~246 debug messages>

yosys> memory_map

3.78. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

yosys> stat

3.79. Printing statistics.

=== salsaa ===

   Number of wires:                599
   Number of wire bits:          31711
   Number of public wires:          66
   Number of public wire bits:    3886
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                485
     $alu                           52
     $and                            4
     $dff                            2
     $dffe                          44
     $eq                            10
     $logic_not                      1
     $mux                          256
     $ne                            22
     $not                           23
     $or                            16
     $reduce_and                    15
     $reduce_bool                    3
     $reduce_or                     21
     $xor                           16


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/arith_map.v

3.80. Executing TECHMAP pass (map to technology primitives).

3.80.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.80.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

3.80.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$be80489e44a49c29884f59fd81c31ed03229cfc1\_80_rs_alu for cells of type $alu.
Using template $paramod$cc80a4e89b0341cb117f5d28b0e7244620640141\_90_alu for cells of type $alu.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000001000000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
No more expansions possible.
<suppressed ~2186 debug messages>

yosys> stat

3.81. Printing statistics.

=== salsaa ===

   Number of wires:               2239
   Number of wire bits:          60211
   Number of public wires:          66
   Number of public wire bits:    3886
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              19162
     $_AND_                        356
     $_DFFE_PP_                   1661
     $_DFF_P_                        2
     $_MUX_                      10623
     $_NOT_                       1654
     $_OR_                         355
     $_XOR_                       2975
     adder_carry                  1536


yosys> opt_expr

3.82. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~2763 debug messages>

yosys> opt_merge -nomux

3.83. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
<suppressed ~3249 debug messages>
Removed a total of 1083 cells.

yosys> opt_muxtree

3.84. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.85. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.86. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_share

3.87. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.88. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.89. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 1041 unused cells and 1590 unused wires.
<suppressed ~1042 debug messages>

yosys> opt_expr

3.90. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~1 debug messages>

yosys> opt_muxtree

3.91. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.92. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.93. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_share

3.94. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.95. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.96. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> opt_expr

3.97. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
MAX OPT ITERATION = 2

yosys> opt_expr -full

3.98. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~5340 debug messages>

yosys> techmap -map +/techmap.v

3.99. Executing TECHMAP pass (map to technology primitives).

3.99.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.99.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

yosys> opt_expr

3.100. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

yosys> opt_merge -nomux

3.101. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

yosys> opt_muxtree

3.102. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.103. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.104. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_dff -nosdff -nodffe -sat

3.105. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.106. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 100 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.107. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
MAX OPT ITERATION = 1

yosys> abc -dff

3.108. Executing ABC pass (technology mapping using ABC).

3.108.1. Summary of detected clock domains:
  1912 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$1725, arst={ }, srst={ }
  1818 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$1755, arst={ }, srst={ }
  1690 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$1740, arst={ }, srst={ }
  55 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$1942, arst={ }, srst={ }
  34 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$1959, arst={ }, srst={ }
  1126 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$1974, arst={ }, srst={ }
  8 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$1985, arst={ }, srst={ }
  314 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$2000, arst={ }, srst={ }
  35 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$2009, arst={ }, srst={ }
  95 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$2012, arst={ }, srst={ }
  23 cells in clk=\clk, en={ }, arst={ }, srst={ }
  119 cells in clk=\clk, en=$auto$opt_dff.cc:194:make_patterns_logic$1940, arst={ }, srst={ }
  771 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$2022, arst={ }, srst={ }
  242 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$2166, arst={ }, srst={ }
  6 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$2175, arst={ }, srst={ }
  3 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$2182, arst={ }, srst={ }
  67 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$2193, arst={ }, srst={ }
  1291 cells in clk=\clk, en=$auto$opt_dff.cc:219:make_patterns_logic$1710, arst={ }, srst={ }

3.108.2. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1725
Extracted 1464 gates and 2404 wires to a netlist network with 939 inputs and 773 outputs.

3.108.2.1. Executing ABC.

3.108.3. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1755
Extracted 1434 gates and 2340 wires to a netlist network with 905 inputs and 738 outputs.

3.108.3.1. Executing ABC.

3.108.4. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1740
Extracted 1242 gates and 1931 wires to a netlist network with 687 inputs and 554 outputs.

3.108.4.1. Executing ABC.

3.108.5. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1942
Extracted 55 gates and 89 wires to a netlist network with 32 inputs and 30 outputs.

3.108.5.1. Executing ABC.

3.108.6. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1959
Extracted 34 gates and 47 wires to a netlist network with 13 inputs and 13 outputs.

3.108.6.1. Executing ABC.

3.108.7. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1974
Extracted 1126 gates and 1711 wires to a netlist network with 584 inputs and 1056 outputs.

3.108.7.1. Executing ABC.

3.108.8. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1985
Extracted 8 gates and 16 wires to a netlist network with 8 inputs and 4 outputs.

3.108.8.1. Executing ABC.

3.108.9. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2000
Extracted 314 gates and 323 wires to a netlist network with 8 inputs and 69 outputs.

3.108.9.1. Executing ABC.

3.108.10. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2009
Extracted 35 gates and 46 wires to a netlist network with 11 inputs and 18 outputs.

3.108.10.1. Executing ABC.

3.108.11. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$2012
Extracted 95 gates and 111 wires to a netlist network with 14 inputs and 17 outputs.

3.108.11.1. Executing ABC.

3.108.12. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 23 gates and 38 wires to a netlist network with 14 inputs and 11 outputs.

3.108.12.1. Executing ABC.

3.108.13. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:194:make_patterns_logic$1940
Extracted 119 gates and 228 wires to a netlist network with 107 inputs and 47 outputs.

3.108.13.1. Executing ABC.

3.108.14. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2022
Extracted 771 gates and 1288 wires to a netlist network with 517 inputs and 257 outputs.

3.108.14.1. Executing ABC.

3.108.15. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2166
Extracted 242 gates and 506 wires to a netlist network with 263 inputs and 41 outputs.

3.108.15.1. Executing ABC.

3.108.16. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2175
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 2 outputs.

3.108.16.1. Executing ABC.

3.108.17. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2182
Extracted 3 gates and 8 wires to a netlist network with 4 inputs and 2 outputs.

3.108.17.1. Executing ABC.

3.108.18. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$2193
Extracted 67 gates and 105 wires to a netlist network with 37 inputs and 34 outputs.

3.108.18.1. Executing ABC.

3.108.19. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $auto$opt_dff.cc:219:make_patterns_logic$1710
Extracted 1035 gates and 1777 wires to a netlist network with 740 inputs and 515 outputs.

3.108.19.1. Executing ABC.

yosys> abc -dff

3.109. Executing ABC pass (technology mapping using ABC).

3.109.1. Summary of detected clock domains:
  2293 cells in clk=\clk, en=$abc$21209$auto$opt_dff.cc:219:make_patterns_logic$1725, arst={ }, srst={ }
  1530 cells in clk=\clk, en=$abc$23666$auto$opt_dff.cc:219:make_patterns_logic$1755, arst={ }, srst={ }
  39 cells in clk=\clk, en=$abc$27057$auto$opt_dff.cc:219:make_patterns_logic$1942, arst={ }, srst={ }
  1870 cells in clk=\clk, en=$abc$25342$auto$opt_dff.cc:219:make_patterns_logic$1740, arst={ }, srst={ }
  31 cells in clk=\clk, en=$abc$27105$auto$opt_dff.cc:219:make_patterns_logic$1959, arst={ }, srst={ }
  10 cells in clk=\clk, en=$abc$29231$auto$opt_dff.cc:219:make_patterns_logic$1985, arst={ }, srst={ }
  384 cells in clk=\clk, en=$abc$29240$auto$opt_dff.cc:219:make_patterns_logic$2000, arst={ }, srst={ }
  38 cells in clk=\clk, en=$abc$29628$auto$opt_dff.cc:219:make_patterns_logic$2009, arst={ }, srst={ }
  61 cells in clk=\clk, en=$abc$29669$auto$opt_dff.cc:194:make_patterns_logic$2012, arst={ }, srst={ }
  12 cells in clk=\clk, en={ }, arst={ }, srst={ }
  1574 cells in clk=\clk, en=$abc$27144$auto$opt_dff.cc:219:make_patterns_logic$1974, arst={ }, srst={ }
  1122 cells in clk=\clk, en=1'1, arst={ }, srst={ }
  1120 cells in clk=\clk, en=$abc$30019$auto$opt_dff.cc:219:make_patterns_logic$2022, arst={ }, srst={ }
  155 cells in clk=\clk, en=$abc$31303$auto$opt_dff.cc:219:make_patterns_logic$2166, arst={ }, srst={ }
  7 cells in clk=\clk, en=$abc$31547$auto$opt_dff.cc:219:make_patterns_logic$2175, arst={ }, srst={ }
  5 cells in clk=\clk, en=$abc$31555$auto$opt_dff.cc:219:make_patterns_logic$2182, arst={ }, srst={ }
  69 cells in clk=\clk, en=$abc$31560$auto$opt_dff.cc:219:make_patterns_logic$2193, arst={ }, srst={ }
  1373 cells in clk=\clk, en=$abc$31660$auto$opt_dff.cc:219:make_patterns_logic$1710, arst={ }, srst={ }

3.109.2. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$21209$auto$opt_dff.cc:219:make_patterns_logic$1725
Extracted 1849 gates and 2767 wires to a netlist network with 917 inputs and 955 outputs.

3.109.2.1. Executing ABC.

3.109.3. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$23666$auto$opt_dff.cc:219:make_patterns_logic$1755
Extracted 1153 gates and 1798 wires to a netlist network with 644 inputs and 630 outputs.

3.109.3.1. Executing ABC.

3.109.4. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$27057$auto$opt_dff.cc:219:make_patterns_logic$1942
Extracted 39 gates and 74 wires to a netlist network with 34 inputs and 28 outputs.

3.109.4.1. Executing ABC.

3.109.5. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$25342$auto$opt_dff.cc:219:make_patterns_logic$1740
Extracted 1423 gates and 2118 wires to a netlist network with 695 inputs and 626 outputs.

3.109.5.1. Executing ABC.

3.109.6. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$27105$auto$opt_dff.cc:219:make_patterns_logic$1959
Extracted 31 gates and 43 wires to a netlist network with 12 inputs and 14 outputs.

3.109.6.1. Executing ABC.

3.109.7. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$29231$auto$opt_dff.cc:219:make_patterns_logic$1985
Extracted 10 gates and 17 wires to a netlist network with 7 inputs and 5 outputs.

3.109.7.1. Executing ABC.

3.109.8. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$29240$auto$opt_dff.cc:219:make_patterns_logic$2000
Extracted 384 gates and 517 wires to a netlist network with 132 inputs and 132 outputs.

3.109.8.1. Executing ABC.

3.109.9. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$29628$auto$opt_dff.cc:219:make_patterns_logic$2009
Extracted 38 gates and 50 wires to a netlist network with 12 inputs and 16 outputs.

3.109.9.1. Executing ABC.

3.109.10. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$29669$auto$opt_dff.cc:194:make_patterns_logic$2012
Extracted 61 gates and 73 wires to a netlist network with 12 inputs and 13 outputs.

3.109.10.1. Executing ABC.

3.109.11. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk
Extracted 12 gates and 21 wires to a netlist network with 9 inputs and 5 outputs.

3.109.11.1. Executing ABC.

3.109.12. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$27144$auto$opt_dff.cc:219:make_patterns_logic$1974
Extracted 1565 gates and 2574 wires to a netlist network with 1009 inputs and 890 outputs.

3.109.12.1. Executing ABC.

3.109.13. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by 1'1
Extracted 1122 gates and 2038 wires to a netlist network with 916 inputs and 748 outputs.

3.109.13.1. Executing ABC.

3.109.14. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$30019$auto$opt_dff.cc:219:make_patterns_logic$2022
Extracted 1120 gates and 1637 wires to a netlist network with 517 inputs and 257 outputs.

3.109.14.1. Executing ABC.

3.109.15. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$31303$auto$opt_dff.cc:219:make_patterns_logic$2166
Extracted 155 gates and 417 wires to a netlist network with 262 inputs and 135 outputs.

3.109.15.1. Executing ABC.

3.109.16. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$31547$auto$opt_dff.cc:219:make_patterns_logic$2175
Extracted 7 gates and 13 wires to a netlist network with 5 inputs and 2 outputs.

3.109.16.1. Executing ABC.

3.109.17. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$31555$auto$opt_dff.cc:219:make_patterns_logic$2182
Extracted 5 gates and 11 wires to a netlist network with 6 inputs and 3 outputs.

3.109.17.1. Executing ABC.

3.109.18. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$31560$auto$opt_dff.cc:219:make_patterns_logic$2193
Extracted 69 gates and 108 wires to a netlist network with 38 inputs and 34 outputs.

3.109.18.1. Executing ABC.

3.109.19. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$31660$auto$opt_dff.cc:219:make_patterns_logic$1710
Extracted 1114 gates and 1660 wires to a netlist network with 546 inputs and 266 outputs.

3.109.19.1. Executing ABC.

yosys> abc -dff

3.110. Executing ABC pass (technology mapping using ABC).

3.110.1. Summary of detected clock domains:
  68 cells in clk=\clk, en=$abc$43951$abc$31560$auto$opt_dff.cc:219:make_patterns_logic$2193, arst={ }, srst={ }
  2256 cells in clk=\clk, en=$abc$33517$abc$21209$auto$opt_dff.cc:219:make_patterns_logic$1725, arst={ }, srst={ }
  37 cells in clk=\clk, en=$abc$37127$abc$27057$auto$opt_dff.cc:219:make_patterns_logic$1942, arst={ }, srst={ }
  32 cells in clk=\clk, en=$abc$38754$abc$27105$auto$opt_dff.cc:219:make_patterns_logic$1959, arst={ }, srst={ }
  10 cells in clk=\clk, en=$abc$38793$abc$29231$auto$opt_dff.cc:219:make_patterns_logic$1985, arst={ }, srst={ }
  38 cells in clk=\clk, en=$abc$39189$abc$29628$auto$opt_dff.cc:219:make_patterns_logic$2009, arst={ }, srst={ }
  79 cells in clk=\clk, en=$abc$39229$abc$29669$auto$opt_dff.cc:194:make_patterns_logic$2012, arst={ }, srst={ }
  362 cells in clk=\clk, en=$abc$38804$abc$29240$auto$opt_dff.cc:219:make_patterns_logic$2000, arst={ }, srst={ }
  1845 cells in clk=\clk, en=$abc$35503$abc$23666$auto$opt_dff.cc:219:make_patterns_logic$1755, arst={ }, srst={ }
  1437 cells in clk=\clk, en=1'1, arst={ }, srst={ }
  182 cells in clk=\clk, en=$abc$43785$abc$31303$auto$opt_dff.cc:219:make_patterns_logic$2166, arst={ }, srst={ }
  7 cells in clk=\clk, en=$abc$43937$abc$31547$auto$opt_dff.cc:219:make_patterns_logic$2175, arst={ }, srst={ }
  5 cells in clk=\clk, en=$abc$43944$abc$31555$auto$opt_dff.cc:219:make_patterns_logic$2182, arst={ }, srst={ }
  1862 cells in clk=\clk, en=$abc$37166$abc$25342$auto$opt_dff.cc:219:make_patterns_logic$1740, arst={ }, srst={ }
  1107 cells in clk=\clk, en=$abc$42501$abc$30019$auto$opt_dff.cc:219:make_patterns_logic$2022, arst={ }, srst={ }
  1335 cells in clk=\clk, en=$abc$39298$abc$27144$auto$opt_dff.cc:219:make_patterns_logic$1974, arst={ }, srst={ }
  1365 cells in clk=\clk, en=$abc$44052$abc$31660$auto$opt_dff.cc:219:make_patterns_logic$1710, arst={ }, srst={ }

3.110.2. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$43951$abc$31560$auto$opt_dff.cc:219:make_patterns_logic$2193
Extracted 68 gates and 106 wires to a netlist network with 38 inputs and 34 outputs.

3.110.2.1. Executing ABC.

3.110.3. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$33517$abc$21209$auto$opt_dff.cc:219:make_patterns_logic$1725
Extracted 1812 gates and 2717 wires to a netlist network with 905 inputs and 932 outputs.

3.110.3.1. Executing ABC.

3.110.4. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$37127$abc$27057$auto$opt_dff.cc:219:make_patterns_logic$1942
Extracted 37 gates and 70 wires to a netlist network with 33 inputs and 28 outputs.

3.110.4.1. Executing ABC.

3.110.5. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$38754$abc$27105$auto$opt_dff.cc:219:make_patterns_logic$1959
Extracted 32 gates and 45 wires to a netlist network with 13 inputs and 14 outputs.

3.110.5.1. Executing ABC.

3.110.6. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$38793$abc$29231$auto$opt_dff.cc:219:make_patterns_logic$1985
Extracted 10 gates and 17 wires to a netlist network with 7 inputs and 4 outputs.

3.110.6.1. Executing ABC.

3.110.7. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$39189$abc$29628$auto$opt_dff.cc:219:make_patterns_logic$2009
Extracted 38 gates and 50 wires to a netlist network with 12 inputs and 16 outputs.

3.110.7.1. Executing ABC.

3.110.8. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$39229$abc$29669$auto$opt_dff.cc:194:make_patterns_logic$2012
Extracted 79 gates and 109 wires to a netlist network with 29 inputs and 15 outputs.

3.110.8.1. Executing ABC.

3.110.9. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$38804$abc$29240$auto$opt_dff.cc:219:make_patterns_logic$2000
Extracted 362 gates and 479 wires to a netlist network with 117 inputs and 129 outputs.

3.110.9.1. Executing ABC.

3.110.10. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$35503$abc$23666$auto$opt_dff.cc:219:make_patterns_logic$1755
Extracted 1465 gates and 2327 wires to a netlist network with 862 inputs and 825 outputs.

3.110.10.1. Executing ABC.

3.110.11. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by 1'1
Extracted 1436 gates and 2670 wires to a netlist network with 1234 inputs and 907 outputs.

3.110.11.1. Executing ABC.

3.110.12. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$43785$abc$31303$auto$opt_dff.cc:219:make_patterns_logic$2166
Extracted 182 gates and 475 wires to a netlist network with 293 inputs and 135 outputs.

3.110.12.1. Executing ABC.

3.110.13. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$43937$abc$31547$auto$opt_dff.cc:219:make_patterns_logic$2175
Extracted 7 gates and 12 wires to a netlist network with 5 inputs and 3 outputs.

3.110.13.1. Executing ABC.

3.110.14. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$43944$abc$31555$auto$opt_dff.cc:219:make_patterns_logic$2182
Extracted 5 gates and 11 wires to a netlist network with 5 inputs and 3 outputs.

3.110.14.1. Executing ABC.

3.110.15. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$37166$abc$25342$auto$opt_dff.cc:219:make_patterns_logic$1740
Extracted 1417 gates and 2062 wires to a netlist network with 645 inputs and 604 outputs.

3.110.15.1. Executing ABC.

3.110.16. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$42501$abc$30019$auto$opt_dff.cc:219:make_patterns_logic$2022
Extracted 1107 gates and 1624 wires to a netlist network with 517 inputs and 288 outputs.

3.110.16.1. Executing ABC.

3.110.17. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$39298$abc$27144$auto$opt_dff.cc:219:make_patterns_logic$1974
Extracted 1328 gates and 2264 wires to a netlist network with 936 inputs and 849 outputs.

3.110.17.1. Executing ABC.

3.110.18. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$44052$abc$31660$auto$opt_dff.cc:219:make_patterns_logic$1710
Extracted 1106 gates and 1646 wires to a netlist network with 540 inputs and 264 outputs.

3.110.18.1. Executing ABC.

yosys> abc -dff

3.111. Executing ABC pass (technology mapping using ABC).

3.111.1. Summary of detected clock domains:
  69 cells in clk=\clk, en=$abc$45298$abc$43951$abc$31560$auto$opt_dff.cc:219:make_patterns_logic$2193, arst={ }, srst={ }
  35 cells in clk=\clk, en=$abc$47339$abc$37127$abc$27057$auto$opt_dff.cc:219:make_patterns_logic$1942, arst={ }, srst={ }
  33 cells in clk=\clk, en=$abc$47378$abc$38754$abc$27105$auto$opt_dff.cc:219:make_patterns_logic$1959, arst={ }, srst={ }
  9 cells in clk=\clk, en=$abc$47419$abc$38793$abc$29231$auto$opt_dff.cc:219:make_patterns_logic$1985, arst={ }, srst={ }
  38 cells in clk=\clk, en=$abc$47429$abc$39189$abc$29628$auto$opt_dff.cc:219:make_patterns_logic$2009, arst={ }, srst={ }
  322 cells in clk=\clk, en=$abc$47548$abc$38804$abc$29240$auto$opt_dff.cc:219:make_patterns_logic$2000, arst={ }, srst={ }
  2075 cells in clk=\clk, en=1'1, arst={ }, srst={ }
  187 cells in clk=\clk, en=$abc$51277$abc$43785$abc$31303$auto$opt_dff.cc:219:make_patterns_logic$2166, arst={ }, srst={ }
  7 cells in clk=\clk, en=$abc$51460$abc$43937$abc$31547$auto$opt_dff.cc:219:make_patterns_logic$2175, arst={ }, srst={ }
  2333 cells in clk=\clk, en=$abc$45399$abc$33517$abc$21209$auto$opt_dff.cc:219:make_patterns_logic$1725, arst={ }, srst={ }
  4 cells in clk=\clk, en=$abc$51468$abc$43944$abc$31555$auto$opt_dff.cc:219:make_patterns_logic$2182, arst={ }, srst={ }
  1196 cells in clk=\clk, en=$abc$51475$abc$37166$abc$25342$auto$opt_dff.cc:219:make_patterns_logic$1740, arst={ }, srst={ }
  973 cells in clk=\clk, en=$abc$52993$abc$42501$abc$30019$auto$opt_dff.cc:219:make_patterns_logic$2022, arst={ }, srst={ }
  2083 cells in clk=\clk, en=$abc$47940$abc$35503$abc$23666$auto$opt_dff.cc:219:make_patterns_logic$1755, arst={ }, srst={ }
  1567 cells in clk=\clk, en=$abc$54308$abc$39298$abc$27144$auto$opt_dff.cc:219:make_patterns_logic$1974, arst={ }, srst={ }
  1368 cells in clk=\clk, en=$abc$56339$abc$44052$abc$31660$auto$opt_dff.cc:219:make_patterns_logic$1710, arst={ }, srst={ }

3.111.2. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$45298$abc$43951$abc$31560$auto$opt_dff.cc:219:make_patterns_logic$2193
Extracted 69 gates and 108 wires to a netlist network with 38 inputs and 34 outputs.

3.111.2.1. Executing ABC.

3.111.3. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$47339$abc$37127$abc$27057$auto$opt_dff.cc:219:make_patterns_logic$1942
Extracted 35 gates and 66 wires to a netlist network with 31 inputs and 26 outputs.

3.111.3.1. Executing ABC.

3.111.4. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$47378$abc$38754$abc$27105$auto$opt_dff.cc:219:make_patterns_logic$1959
Extracted 33 gates and 45 wires to a netlist network with 12 inputs and 12 outputs.

3.111.4.1. Executing ABC.

3.111.5. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$47419$abc$38793$abc$29231$auto$opt_dff.cc:219:make_patterns_logic$1985
Extracted 9 gates and 16 wires to a netlist network with 7 inputs and 4 outputs.

3.111.5.1. Executing ABC.

3.111.6. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$47429$abc$39189$abc$29628$auto$opt_dff.cc:219:make_patterns_logic$2009
Extracted 38 gates and 50 wires to a netlist network with 12 inputs and 16 outputs.

3.111.6.1. Executing ABC.

3.111.7. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$47548$abc$38804$abc$29240$auto$opt_dff.cc:219:make_patterns_logic$2000
Extracted 322 gates and 410 wires to a netlist network with 88 inputs and 131 outputs.

3.111.7.1. Executing ABC.

3.111.8. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by 1'1
Extracted 2073 gates and 3700 wires to a netlist network with 1627 inputs and 1160 outputs.

3.111.8.1. Executing ABC.

3.111.9. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$51277$abc$43785$abc$31303$auto$opt_dff.cc:219:make_patterns_logic$2166
Extracted 187 gates and 487 wires to a netlist network with 300 inputs and 136 outputs.

3.111.9.1. Executing ABC.

3.111.10. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$51460$abc$43937$abc$31547$auto$opt_dff.cc:219:make_patterns_logic$2175
Extracted 7 gates and 12 wires to a netlist network with 5 inputs and 3 outputs.

3.111.10.1. Executing ABC.

3.111.11. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$45399$abc$33517$abc$21209$auto$opt_dff.cc:219:make_patterns_logic$1725
Extracted 1891 gates and 2800 wires to a netlist network with 909 inputs and 1010 outputs.

3.111.11.1. Executing ABC.

3.111.12. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$51468$abc$43944$abc$31555$auto$opt_dff.cc:219:make_patterns_logic$2182
Extracted 4 gates and 9 wires to a netlist network with 5 inputs and 3 outputs.

3.111.12.1. Executing ABC.

3.111.13. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$51475$abc$37166$abc$25342$auto$opt_dff.cc:219:make_patterns_logic$1740
Extracted 753 gates and 1234 wires to a netlist network with 481 inputs and 430 outputs.

3.111.13.1. Executing ABC.

3.111.14. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$52993$abc$42501$abc$30019$auto$opt_dff.cc:219:make_patterns_logic$2022
Extracted 973 gates and 1490 wires to a netlist network with 517 inputs and 299 outputs.

3.111.14.1. Executing ABC.

3.111.15. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$47940$abc$35503$abc$23666$auto$opt_dff.cc:219:make_patterns_logic$1755
Extracted 1704 gates and 2625 wires to a netlist network with 921 inputs and 916 outputs.

3.111.15.1. Executing ABC.

3.111.16. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$54308$abc$39298$abc$27144$auto$opt_dff.cc:219:make_patterns_logic$1974
Extracted 1557 gates and 2495 wires to a netlist network with 938 inputs and 900 outputs.

3.111.16.1. Executing ABC.

3.111.17. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clk, enabled by $abc$56339$abc$44052$abc$31660$auto$opt_dff.cc:219:make_patterns_logic$1710
Extracted 1108 gates and 1650 wires to a netlist network with 542 inputs and 265 outputs.

3.111.17.1. Executing ABC.

yosys> opt_ffinv

3.112. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 1 inverters.

yosys> opt_expr

3.113. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~109 debug messages>

yosys> opt_merge -nomux

3.114. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

yosys> opt_muxtree

3.115. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.116. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.117. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_share

3.118. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.119. Executing OPT_DFF pass (perform DFF optimizations).
Removing always-active EN on $abc$58147$auto$blifparse.cc:362:parse_blif$58152 ($_DFFE_PP_) from module salsaa.
Removing always-active EN on $abc$58147$auto$blifparse.cc:362:parse_blif$58151 ($_DFFE_PP_) from module salsaa.
Removing always-active EN on $abc$58147$auto$blifparse.cc:362:parse_blif$58150 ($_DFFE_PP_) from module salsaa.
Removing always-active EN on $abc$58147$auto$blifparse.cc:362:parse_blif$58149 ($_DFFE_PP_) from module salsaa.
Removing always-active EN on $abc$58147$auto$blifparse.cc:362:parse_blif$58148 ($_DFFE_PP_) from module salsaa.

yosys> opt_clean

3.120. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 1 unused cells and 63645 unused wires.
<suppressed ~19 debug messages>

yosys> opt_expr

3.121. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

yosys> opt_muxtree

3.122. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.123. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.124. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_share

3.125. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -sat

3.126. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.127. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..

yosys> opt_expr

3.128. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
MAX OPT ITERATION = 2

yosys> bmuxmap

3.129. Executing BMUXMAP pass.

yosys> demuxmap

3.130. Executing DEMUXMAP pass.

yosys> clean_zerowidth

yosys> abc -script /tmp/yosys_pWAAuN/abc_tmp_1.scr

3.131. Executing ABC pass (technology mapping using ABC).

3.131.1. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Extracted 9170 gates and 12609 wires to a netlist network with 3439 inputs and 3116 outputs.

3.131.1.1. Executing ABC.
DE:   #PIs = 3439  #Luts =  3769  Max Lvl =  13  Avg Lvl =   1.59  [   0.32 sec. at Pass 0]{firstMap}
DE:   #PIs = 3439  #Luts =  3388  Max Lvl =   8  Avg Lvl =   1.54  [   7.75 sec. at Pass 1]{initMapFlow}
DE:   #PIs = 3439  #Luts =  3388  Max Lvl =   8  Avg Lvl =   1.54  [   2.61 sec. at Pass 2]{map}
DE:   #PIs = 3439  #Luts =  3386  Max Lvl =   7  Avg Lvl =   1.52  [   2.42 sec. at Pass 3]{postMap}
DE:   #PIs = 3439  #Luts =  3382  Max Lvl =  10  Avg Lvl =   1.46  [   2.52 sec. at Pass 4]{map}
DE:   #PIs = 3439  #Luts =  3380  Max Lvl =   6  Avg Lvl =   1.44  [   3.91 sec. at Pass 5]{postMap}
DE:   #PIs = 3439  #Luts =  3377  Max Lvl =   7  Avg Lvl =   1.44  [   3.13 sec. at Pass 6]{map}
DE:   #PIs = 3439  #Luts =  3376  Max Lvl =   7  Avg Lvl =   1.44  [   3.01 sec. at Pass 7]{postMap}
DE:   #PIs = 3439  #Luts =  3376  Max Lvl =   7  Avg Lvl =   1.44  [   3.77 sec. at Pass 8]{map}
DE:   #PIs = 3439  #Luts =  3376  Max Lvl =   7  Avg Lvl =   1.44  [   3.82 sec. at Pass 9]{postMap}
DE:   #PIs = 3439  #Luts =  3376  Max Lvl =   7  Avg Lvl =   1.44  [   3.22 sec. at Pass 10]{map}
DE:   #PIs = 3439  #Luts =  3376  Max Lvl =   7  Avg Lvl =   1.44  [   1.36 sec. at Pass 11]{finalMap}

yosys> opt_expr

3.132. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

yosys> opt_merge -nomux

3.133. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.134. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.135. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.136. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_share

3.137. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.138. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.139. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 12557 unused wires.
<suppressed ~3 debug messages>

yosys> opt_expr

3.140. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
MAX OPT ITERATION = 1

yosys> opt_ffinv

3.141. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

yosys> stat

3.142. Printing statistics.

=== salsaa ===

   Number of wires:               3172
   Number of wire bits:          10931
   Number of public wires:          47
   Number of public wire bits:    3294
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               6573
     $_DFFE_PP_                   1656
     $_DFF_P_                        5
     $lut                         3376
     adder_carry                  1536


yosys> shregmap -minlen 8 -maxlen 20

3.143. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

yosys> dfflegalize -cell $_DFF_?_ 0 -cell $_DFF_???_ 0 -cell $_DFFE_????_ 0 -cell $_DFFSR_???_ 0 -cell $_DFFSRE_????_ 0 -cell $_DLATCHSR_PPP_ 0

3.144. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

yosys> stat

3.145. Printing statistics.

=== salsaa ===

   Number of wires:               3174
   Number of wire bits:          10933
   Number of public wires:          47
   Number of public wire bits:    3294
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               6575
     $_DFFE_PP0P_                 1656
     $_DFF_P_                        5
     $_NOT_                          2
     $lut                         3376
     adder_carry                  1536


yosys> techmap -map +/techmap.v -map +/rapidsilicon/genesis/ffs_map.v

3.146. Executing TECHMAP pass (map to technology primitives).

3.146.1. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.146.2. Executing Verilog-2005 frontend: /nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_scratch/scratch/Vorak/aram/Workspace/Raptor/yosys_verific_rs/yosys/install/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

3.146.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~6829 debug messages>

yosys> opt_expr -mux_undef

3.147. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~43882 debug messages>

yosys> simplemap

3.148. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> opt_expr

3.149. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

yosys> opt_merge

3.150. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
<suppressed ~12786 debug messages>
Removed a total of 4262 cells.

yosys> opt_dff -nodffe -nosdff

3.151. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.152. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 1 unused cells and 16811 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

3.153. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
<suppressed ~822 debug messages>

yosys> opt_merge -nomux

3.154. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.155. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.156. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.157. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_share

3.158. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.159. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.160. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 64 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.161. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
MAX OPT ITERATION = 1

yosys> abc -script /tmp/yosys_pWAAuN/abc_tmp_2.scr

3.162. Executing ABC pass (technology mapping using ABC).

3.162.1. Extracting gate netlist of module `\salsaa' to `<abc-temp-dir>/input.blif'..
Extracted 8199 gates and 11640 wires to a netlist network with 3439 inputs and 3116 outputs.

3.162.1.1. Executing ABC.
DE:   #PIs = 3439  #Luts =  3375  Max Lvl =   7  Avg Lvl =   1.43  [   0.25 sec. at Pass 0]{firstMap}
DE:   #PIs = 3439  #Luts =  3375  Max Lvl =   7  Avg Lvl =   1.43  [   7.84 sec. at Pass 1]{initMapFlow}
DE:   #PIs = 3439  #Luts =  3375  Max Lvl =   7  Avg Lvl =   1.43  [   3.60 sec. at Pass 2]{map}
DE:   #PIs = 3439  #Luts =  3375  Max Lvl =   7  Avg Lvl =   1.43  [   3.07 sec. at Pass 3]{postMap}
DE:   #PIs = 3439  #Luts =  3375  Max Lvl =   7  Avg Lvl =   1.43  [   3.22 sec. at Pass 4]{map}
DE:   #PIs = 3439  #Luts =  3375  Max Lvl =   7  Avg Lvl =   1.43  [   4.58 sec. at Pass 5]{postMap}
DE:   #PIs = 3439  #Luts =  3375  Max Lvl =   7  Avg Lvl =   1.43  [   0.65 sec. at Pass 6]{finalMap}

yosys> opt_expr

3.163. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.

yosys> opt_merge -nomux

3.164. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_muxtree

3.165. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \salsaa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

3.166. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \salsaa.
Performed a total of 0 changes.

yosys> opt_merge

3.167. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\salsaa'.
Removed a total of 0 cells.

yosys> opt_share

3.168. Executing OPT_SHARE pass.

yosys> opt_dff -nosdff -nodffe

3.169. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

3.170. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 10350 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

3.171. Executing OPT_EXPR pass (perform const folding).
Optimizing module salsaa.
MAX OPT ITERATION = 1

yosys> hierarchy -check

3.172. Executing HIERARCHY pass (managing design hierarchy).

3.172.1. Analyzing design hierarchy..
Top module:  \salsaa

3.172.2. Analyzing design hierarchy..
Top module:  \salsaa
Removed 0 unused modules.

yosys> stat

3.173. Printing statistics.

=== salsaa ===

   Number of wires:               3171
   Number of wire bits:          10930
   Number of public wires:          47
   Number of public wire bits:    3294
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               6572
     $lut                         3375
     adder_carry                  1536
     dffsre                       1661


yosys> opt_clean -purge

3.174. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \salsaa..
Removed 0 unused cells and 19 unused wires.
<suppressed ~19 debug messages>

yosys> write_verilog -noattr -nohex synthesized.v

3.175. Executing Verilog backend.
Dumping module `\salsaa'.

End of script. Logfile hash: 86a49780a0, CPU: user 38.66s system 0.28s, MEM: 177.81 MB peak
Yosys 0.18+10 (git sha1 7361c89db, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)
Time spent: 89% 6x abc (273 sec), 3% 34x opt_expr (10 sec), ...
real 146.90
user 273.48
sys 31.53
